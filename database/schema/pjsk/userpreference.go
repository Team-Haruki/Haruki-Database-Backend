// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"fmt"
	"haruki-database/database/schema/pjsk/userpreference"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserPreference is the model entity for the UserPreference schema.
type UserPreference struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ImID holds the value of the "im_id" field.
	ImID string `json:"im_id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Option holds the value of the "option" field.
	Option string `json:"option,omitempty"`
	// Value holds the value of the "value" field.
	Value        string `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPreference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpreference.FieldID:
			values[i] = new(sql.NullInt64)
		case userpreference.FieldImID, userpreference.FieldPlatform, userpreference.FieldOption, userpreference.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPreference fields.
func (_m *UserPreference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpreference.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case userpreference.FieldImID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field im_id", values[i])
			} else if value.Valid {
				_m.ImID = value.String
			}
		case userpreference.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				_m.Platform = value.String
			}
		case userpreference.FieldOption:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field option", values[i])
			} else if value.Valid {
				_m.Option = value.String
			}
		case userpreference.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the UserPreference.
// This includes values selected through modifiers, order, etc.
func (_m *UserPreference) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this UserPreference.
// Note that you need to call UserPreference.Unwrap() before calling this method if this UserPreference
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserPreference) Update() *UserPreferenceUpdateOne {
	return NewUserPreferenceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserPreference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserPreference) Unwrap() *UserPreference {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("pjsk: UserPreference is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserPreference) String() string {
	var builder strings.Builder
	builder.WriteString("UserPreference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("im_id=")
	builder.WriteString(_m.ImID)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(_m.Platform)
	builder.WriteString(", ")
	builder.WriteString("option=")
	builder.WriteString(_m.Option)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(_m.Value)
	builder.WriteByte(')')
	return builder.String()
}

// UserPreferences is a parsable slice of UserPreference.
type UserPreferences []*UserPreference
