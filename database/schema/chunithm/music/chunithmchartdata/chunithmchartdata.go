// Code generated by ent, DO NOT EDIT.

package chunithmchartdata

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chunithmchartdata type in the database.
	Label = "chunithm_chart_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMusicID holds the string denoting the music_id field in the database.
	FieldMusicID = "music_id"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldBpm holds the string denoting the bpm field in the database.
	FieldBpm = "bpm"
	// FieldTapCount holds the string denoting the tap_count field in the database.
	FieldTapCount = "tap_count"
	// FieldHoldCount holds the string denoting the hold_count field in the database.
	FieldHoldCount = "hold_count"
	// FieldSlideCount holds the string denoting the slide_count field in the database.
	FieldSlideCount = "slide_count"
	// FieldAirCount holds the string denoting the air_count field in the database.
	FieldAirCount = "air_count"
	// FieldFlickCount holds the string denoting the flick_count field in the database.
	FieldFlickCount = "flick_count"
	// FieldTotalCount holds the string denoting the total_count field in the database.
	FieldTotalCount = "total_count"
	// Table holds the table name of the chunithmchartdata in the database.
	Table = "chart_data"
)

// Columns holds all SQL columns for chunithmchartdata fields.
var Columns = []string{
	FieldID,
	FieldMusicID,
	FieldDifficulty,
	FieldCreator,
	FieldBpm,
	FieldTapCount,
	FieldHoldCount,
	FieldSlideCount,
	FieldAirCount,
	FieldFlickCount,
	FieldTotalCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
)

// OrderOption defines the ordering options for the ChunithmChartData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMusicID orders the results by the music_id field.
func ByMusicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMusicID, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByBpm orders the results by the bpm field.
func ByBpm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBpm, opts...).ToFunc()
}

// ByTapCount orders the results by the tap_count field.
func ByTapCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTapCount, opts...).ToFunc()
}

// ByHoldCount orders the results by the hold_count field.
func ByHoldCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHoldCount, opts...).ToFunc()
}

// BySlideCount orders the results by the slide_count field.
func BySlideCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlideCount, opts...).ToFunc()
}

// ByAirCount orders the results by the air_count field.
func ByAirCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAirCount, opts...).ToFunc()
}

// ByFlickCount orders the results by the flick_count field.
func ByFlickCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlickCount, opts...).ToFunc()
}

// ByTotalCount orders the results by the total_count field.
func ByTotalCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCount, opts...).ToFunc()
}
