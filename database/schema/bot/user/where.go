// Code generated by ent, DO NOT EDIT.

package user

import (
	"haruki-database/database/schema/bot/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// OwnerUserID applies equality check predicate on the "owner_user_id" field. It's identical to OwnerUserIDEQ.
func OwnerUserID(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOwnerUserID, v))
}

// BotID applies equality check predicate on the "bot_id" field. It's identical to BotIDEQ.
func BotID(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBotID, v))
}

// Credential applies equality check predicate on the "credential" field. It's identical to CredentialEQ.
func Credential(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredential, v))
}

// OwnerUserIDEQ applies the EQ predicate on the "owner_user_id" field.
func OwnerUserIDEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOwnerUserID, v))
}

// OwnerUserIDNEQ applies the NEQ predicate on the "owner_user_id" field.
func OwnerUserIDNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOwnerUserID, v))
}

// OwnerUserIDIn applies the In predicate on the "owner_user_id" field.
func OwnerUserIDIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDNotIn applies the NotIn predicate on the "owner_user_id" field.
func OwnerUserIDNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDGT applies the GT predicate on the "owner_user_id" field.
func OwnerUserIDGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldOwnerUserID, v))
}

// OwnerUserIDGTE applies the GTE predicate on the "owner_user_id" field.
func OwnerUserIDGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOwnerUserID, v))
}

// OwnerUserIDLT applies the LT predicate on the "owner_user_id" field.
func OwnerUserIDLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldOwnerUserID, v))
}

// OwnerUserIDLTE applies the LTE predicate on the "owner_user_id" field.
func OwnerUserIDLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOwnerUserID, v))
}

// BotIDEQ applies the EQ predicate on the "bot_id" field.
func BotIDEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBotID, v))
}

// BotIDNEQ applies the NEQ predicate on the "bot_id" field.
func BotIDNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBotID, v))
}

// BotIDIn applies the In predicate on the "bot_id" field.
func BotIDIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBotID, vs...))
}

// BotIDNotIn applies the NotIn predicate on the "bot_id" field.
func BotIDNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBotID, vs...))
}

// BotIDGT applies the GT predicate on the "bot_id" field.
func BotIDGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBotID, v))
}

// BotIDGTE applies the GTE predicate on the "bot_id" field.
func BotIDGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBotID, v))
}

// BotIDLT applies the LT predicate on the "bot_id" field.
func BotIDLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBotID, v))
}

// BotIDLTE applies the LTE predicate on the "bot_id" field.
func BotIDLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBotID, v))
}

// CredentialEQ applies the EQ predicate on the "credential" field.
func CredentialEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCredential, v))
}

// CredentialNEQ applies the NEQ predicate on the "credential" field.
func CredentialNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCredential, v))
}

// CredentialIn applies the In predicate on the "credential" field.
func CredentialIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCredential, vs...))
}

// CredentialNotIn applies the NotIn predicate on the "credential" field.
func CredentialNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCredential, vs...))
}

// CredentialGT applies the GT predicate on the "credential" field.
func CredentialGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCredential, v))
}

// CredentialGTE applies the GTE predicate on the "credential" field.
func CredentialGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCredential, v))
}

// CredentialLT applies the LT predicate on the "credential" field.
func CredentialLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCredential, v))
}

// CredentialLTE applies the LTE predicate on the "credential" field.
func CredentialLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCredential, v))
}

// CredentialContains applies the Contains predicate on the "credential" field.
func CredentialContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCredential, v))
}

// CredentialHasPrefix applies the HasPrefix predicate on the "credential" field.
func CredentialHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCredential, v))
}

// CredentialHasSuffix applies the HasSuffix predicate on the "credential" field.
func CredentialHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCredential, v))
}

// CredentialIsNil applies the IsNil predicate on the "credential" field.
func CredentialIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCredential))
}

// CredentialNotNil applies the NotNil predicate on the "credential" field.
func CredentialNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCredential))
}

// CredentialEqualFold applies the EqualFold predicate on the "credential" field.
func CredentialEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCredential, v))
}

// CredentialContainsFold applies the ContainsFold predicate on the "credential" field.
func CredentialContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCredential, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
