// Code generated by ent, DO NOT EDIT.

package music

import (
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmmusicdifficulty"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChunithmMusicDifficulty is the model entity for the ChunithmMusicDifficulty schema.
type ChunithmMusicDifficulty struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MusicID holds the value of the "music_id" field.
	MusicID int `json:"music_id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Diff0Const holds the value of the "diff0_const" field.
	Diff0Const *float64 `json:"diff0_const,omitempty"`
	// Diff1Const holds the value of the "diff1_const" field.
	Diff1Const *float64 `json:"diff1_const,omitempty"`
	// Diff2Const holds the value of the "diff2_const" field.
	Diff2Const *float64 `json:"diff2_const,omitempty"`
	// Diff3Const holds the value of the "diff3_const" field.
	Diff3Const *float64 `json:"diff3_const,omitempty"`
	// Diff4Const holds the value of the "diff4_const" field.
	Diff4Const   *float64 `json:"diff4_const,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChunithmMusicDifficulty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunithmmusicdifficulty.FieldDiff0Const, chunithmmusicdifficulty.FieldDiff1Const, chunithmmusicdifficulty.FieldDiff2Const, chunithmmusicdifficulty.FieldDiff3Const, chunithmmusicdifficulty.FieldDiff4Const:
			values[i] = new(sql.NullFloat64)
		case chunithmmusicdifficulty.FieldID, chunithmmusicdifficulty.FieldMusicID:
			values[i] = new(sql.NullInt64)
		case chunithmmusicdifficulty.FieldVersion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChunithmMusicDifficulty fields.
func (_m *ChunithmMusicDifficulty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunithmmusicdifficulty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case chunithmmusicdifficulty.FieldMusicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field music_id", values[i])
			} else if value.Valid {
				_m.MusicID = int(value.Int64)
			}
		case chunithmmusicdifficulty.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.String
			}
		case chunithmmusicdifficulty.FieldDiff0Const:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field diff0_const", values[i])
			} else if value.Valid {
				_m.Diff0Const = new(float64)
				*_m.Diff0Const = value.Float64
			}
		case chunithmmusicdifficulty.FieldDiff1Const:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field diff1_const", values[i])
			} else if value.Valid {
				_m.Diff1Const = new(float64)
				*_m.Diff1Const = value.Float64
			}
		case chunithmmusicdifficulty.FieldDiff2Const:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field diff2_const", values[i])
			} else if value.Valid {
				_m.Diff2Const = new(float64)
				*_m.Diff2Const = value.Float64
			}
		case chunithmmusicdifficulty.FieldDiff3Const:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field diff3_const", values[i])
			} else if value.Valid {
				_m.Diff3Const = new(float64)
				*_m.Diff3Const = value.Float64
			}
		case chunithmmusicdifficulty.FieldDiff4Const:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field diff4_const", values[i])
			} else if value.Valid {
				_m.Diff4Const = new(float64)
				*_m.Diff4Const = value.Float64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChunithmMusicDifficulty.
// This includes values selected through modifiers, order, etc.
func (_m *ChunithmMusicDifficulty) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ChunithmMusicDifficulty.
// Note that you need to call ChunithmMusicDifficulty.Unwrap() before calling this method if this ChunithmMusicDifficulty
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ChunithmMusicDifficulty) Update() *ChunithmMusicDifficultyUpdateOne {
	return NewChunithmMusicDifficultyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ChunithmMusicDifficulty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ChunithmMusicDifficulty) Unwrap() *ChunithmMusicDifficulty {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("music: ChunithmMusicDifficulty is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ChunithmMusicDifficulty) String() string {
	var builder strings.Builder
	builder.WriteString("ChunithmMusicDifficulty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("music_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.MusicID))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(_m.Version)
	builder.WriteString(", ")
	if v := _m.Diff0Const; v != nil {
		builder.WriteString("diff0_const=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Diff1Const; v != nil {
		builder.WriteString("diff1_const=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Diff2Const; v != nil {
		builder.WriteString("diff2_const=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Diff3Const; v != nil {
		builder.WriteString("diff3_const=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Diff4Const; v != nil {
		builder.WriteString("diff4_const=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ChunithmMusicDifficulties is a parsable slice of ChunithmMusicDifficulty.
type ChunithmMusicDifficulties []*ChunithmMusicDifficulty
