// Code generated by ent, DO NOT EDIT.

package music

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmmusicdifficulty"
	"haruki-database/database/schema/chunithm/music/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunithmMusicDifficultyUpdate is the builder for updating ChunithmMusicDifficulty entities.
type ChunithmMusicDifficultyUpdate struct {
	config
	hooks    []Hook
	mutation *ChunithmMusicDifficultyMutation
}

// Where appends a list predicates to the ChunithmMusicDifficultyUpdate builder.
func (_u *ChunithmMusicDifficultyUpdate) Where(ps ...predicate.ChunithmMusicDifficulty) *ChunithmMusicDifficultyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmMusicDifficultyUpdate) SetMusicID(v int) *ChunithmMusicDifficultyUpdate {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdate) SetNillableMusicID(v *int) *ChunithmMusicDifficultyUpdate {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmMusicDifficultyUpdate) AddMusicID(v int) *ChunithmMusicDifficultyUpdate {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *ChunithmMusicDifficultyUpdate) SetVersion(v string) *ChunithmMusicDifficultyUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdate) SetNillableVersion(v *string) *ChunithmMusicDifficultyUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetDiff0Const sets the "diff0_const" field.
func (_u *ChunithmMusicDifficultyUpdate) SetDiff0Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.ResetDiff0Const()
	_u.mutation.SetDiff0Const(v)
	return _u
}

// SetNillableDiff0Const sets the "diff0_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdate) SetNillableDiff0Const(v *float64) *ChunithmMusicDifficultyUpdate {
	if v != nil {
		_u.SetDiff0Const(*v)
	}
	return _u
}

// AddDiff0Const adds value to the "diff0_const" field.
func (_u *ChunithmMusicDifficultyUpdate) AddDiff0Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.AddDiff0Const(v)
	return _u
}

// ClearDiff0Const clears the value of the "diff0_const" field.
func (_u *ChunithmMusicDifficultyUpdate) ClearDiff0Const() *ChunithmMusicDifficultyUpdate {
	_u.mutation.ClearDiff0Const()
	return _u
}

// SetDiff1Const sets the "diff1_const" field.
func (_u *ChunithmMusicDifficultyUpdate) SetDiff1Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.ResetDiff1Const()
	_u.mutation.SetDiff1Const(v)
	return _u
}

// SetNillableDiff1Const sets the "diff1_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdate) SetNillableDiff1Const(v *float64) *ChunithmMusicDifficultyUpdate {
	if v != nil {
		_u.SetDiff1Const(*v)
	}
	return _u
}

// AddDiff1Const adds value to the "diff1_const" field.
func (_u *ChunithmMusicDifficultyUpdate) AddDiff1Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.AddDiff1Const(v)
	return _u
}

// ClearDiff1Const clears the value of the "diff1_const" field.
func (_u *ChunithmMusicDifficultyUpdate) ClearDiff1Const() *ChunithmMusicDifficultyUpdate {
	_u.mutation.ClearDiff1Const()
	return _u
}

// SetDiff2Const sets the "diff2_const" field.
func (_u *ChunithmMusicDifficultyUpdate) SetDiff2Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.ResetDiff2Const()
	_u.mutation.SetDiff2Const(v)
	return _u
}

// SetNillableDiff2Const sets the "diff2_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdate) SetNillableDiff2Const(v *float64) *ChunithmMusicDifficultyUpdate {
	if v != nil {
		_u.SetDiff2Const(*v)
	}
	return _u
}

// AddDiff2Const adds value to the "diff2_const" field.
func (_u *ChunithmMusicDifficultyUpdate) AddDiff2Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.AddDiff2Const(v)
	return _u
}

// ClearDiff2Const clears the value of the "diff2_const" field.
func (_u *ChunithmMusicDifficultyUpdate) ClearDiff2Const() *ChunithmMusicDifficultyUpdate {
	_u.mutation.ClearDiff2Const()
	return _u
}

// SetDiff3Const sets the "diff3_const" field.
func (_u *ChunithmMusicDifficultyUpdate) SetDiff3Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.ResetDiff3Const()
	_u.mutation.SetDiff3Const(v)
	return _u
}

// SetNillableDiff3Const sets the "diff3_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdate) SetNillableDiff3Const(v *float64) *ChunithmMusicDifficultyUpdate {
	if v != nil {
		_u.SetDiff3Const(*v)
	}
	return _u
}

// AddDiff3Const adds value to the "diff3_const" field.
func (_u *ChunithmMusicDifficultyUpdate) AddDiff3Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.AddDiff3Const(v)
	return _u
}

// ClearDiff3Const clears the value of the "diff3_const" field.
func (_u *ChunithmMusicDifficultyUpdate) ClearDiff3Const() *ChunithmMusicDifficultyUpdate {
	_u.mutation.ClearDiff3Const()
	return _u
}

// SetDiff4Const sets the "diff4_const" field.
func (_u *ChunithmMusicDifficultyUpdate) SetDiff4Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.ResetDiff4Const()
	_u.mutation.SetDiff4Const(v)
	return _u
}

// SetNillableDiff4Const sets the "diff4_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdate) SetNillableDiff4Const(v *float64) *ChunithmMusicDifficultyUpdate {
	if v != nil {
		_u.SetDiff4Const(*v)
	}
	return _u
}

// AddDiff4Const adds value to the "diff4_const" field.
func (_u *ChunithmMusicDifficultyUpdate) AddDiff4Const(v float64) *ChunithmMusicDifficultyUpdate {
	_u.mutation.AddDiff4Const(v)
	return _u
}

// ClearDiff4Const clears the value of the "diff4_const" field.
func (_u *ChunithmMusicDifficultyUpdate) ClearDiff4Const() *ChunithmMusicDifficultyUpdate {
	_u.mutation.ClearDiff4Const()
	return _u
}

// Mutation returns the ChunithmMusicDifficultyMutation object of the builder.
func (_u *ChunithmMusicDifficultyUpdate) Mutation() *ChunithmMusicDifficultyMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChunithmMusicDifficultyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmMusicDifficultyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChunithmMusicDifficultyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmMusicDifficultyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmMusicDifficultyUpdate) check() error {
	if v, ok := _u.mutation.Version(); ok {
		if err := chunithmmusicdifficulty.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusicDifficulty.version": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmMusicDifficultyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmmusicdifficulty.Table, chunithmmusicdifficulty.Columns, sqlgraph.NewFieldSpec(chunithmmusicdifficulty.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Diff0Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff0Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff0Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff0Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff0ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff0Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff1Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff1Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff1Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff1Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff1ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff1Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff2Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff2Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff2Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff2Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff2ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff2Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff3Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff3Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff3Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff3Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff3ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff3Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff4Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff4Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff4Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff4Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff4ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff4Const, field.TypeFloat64)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmmusicdifficulty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChunithmMusicDifficultyUpdateOne is the builder for updating a single ChunithmMusicDifficulty entity.
type ChunithmMusicDifficultyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChunithmMusicDifficultyMutation
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmMusicDifficultyUpdateOne) SetMusicID(v int) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdateOne) SetNillableMusicID(v *int) *ChunithmMusicDifficultyUpdateOne {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmMusicDifficultyUpdateOne) AddMusicID(v int) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *ChunithmMusicDifficultyUpdateOne) SetVersion(v string) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdateOne) SetNillableVersion(v *string) *ChunithmMusicDifficultyUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetDiff0Const sets the "diff0_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) SetDiff0Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ResetDiff0Const()
	_u.mutation.SetDiff0Const(v)
	return _u
}

// SetNillableDiff0Const sets the "diff0_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdateOne) SetNillableDiff0Const(v *float64) *ChunithmMusicDifficultyUpdateOne {
	if v != nil {
		_u.SetDiff0Const(*v)
	}
	return _u
}

// AddDiff0Const adds value to the "diff0_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) AddDiff0Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.AddDiff0Const(v)
	return _u
}

// ClearDiff0Const clears the value of the "diff0_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) ClearDiff0Const() *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ClearDiff0Const()
	return _u
}

// SetDiff1Const sets the "diff1_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) SetDiff1Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ResetDiff1Const()
	_u.mutation.SetDiff1Const(v)
	return _u
}

// SetNillableDiff1Const sets the "diff1_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdateOne) SetNillableDiff1Const(v *float64) *ChunithmMusicDifficultyUpdateOne {
	if v != nil {
		_u.SetDiff1Const(*v)
	}
	return _u
}

// AddDiff1Const adds value to the "diff1_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) AddDiff1Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.AddDiff1Const(v)
	return _u
}

// ClearDiff1Const clears the value of the "diff1_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) ClearDiff1Const() *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ClearDiff1Const()
	return _u
}

// SetDiff2Const sets the "diff2_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) SetDiff2Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ResetDiff2Const()
	_u.mutation.SetDiff2Const(v)
	return _u
}

// SetNillableDiff2Const sets the "diff2_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdateOne) SetNillableDiff2Const(v *float64) *ChunithmMusicDifficultyUpdateOne {
	if v != nil {
		_u.SetDiff2Const(*v)
	}
	return _u
}

// AddDiff2Const adds value to the "diff2_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) AddDiff2Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.AddDiff2Const(v)
	return _u
}

// ClearDiff2Const clears the value of the "diff2_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) ClearDiff2Const() *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ClearDiff2Const()
	return _u
}

// SetDiff3Const sets the "diff3_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) SetDiff3Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ResetDiff3Const()
	_u.mutation.SetDiff3Const(v)
	return _u
}

// SetNillableDiff3Const sets the "diff3_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdateOne) SetNillableDiff3Const(v *float64) *ChunithmMusicDifficultyUpdateOne {
	if v != nil {
		_u.SetDiff3Const(*v)
	}
	return _u
}

// AddDiff3Const adds value to the "diff3_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) AddDiff3Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.AddDiff3Const(v)
	return _u
}

// ClearDiff3Const clears the value of the "diff3_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) ClearDiff3Const() *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ClearDiff3Const()
	return _u
}

// SetDiff4Const sets the "diff4_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) SetDiff4Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ResetDiff4Const()
	_u.mutation.SetDiff4Const(v)
	return _u
}

// SetNillableDiff4Const sets the "diff4_const" field if the given value is not nil.
func (_u *ChunithmMusicDifficultyUpdateOne) SetNillableDiff4Const(v *float64) *ChunithmMusicDifficultyUpdateOne {
	if v != nil {
		_u.SetDiff4Const(*v)
	}
	return _u
}

// AddDiff4Const adds value to the "diff4_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) AddDiff4Const(v float64) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.AddDiff4Const(v)
	return _u
}

// ClearDiff4Const clears the value of the "diff4_const" field.
func (_u *ChunithmMusicDifficultyUpdateOne) ClearDiff4Const() *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.ClearDiff4Const()
	return _u
}

// Mutation returns the ChunithmMusicDifficultyMutation object of the builder.
func (_u *ChunithmMusicDifficultyUpdateOne) Mutation() *ChunithmMusicDifficultyMutation {
	return _u.mutation
}

// Where appends a list predicates to the ChunithmMusicDifficultyUpdate builder.
func (_u *ChunithmMusicDifficultyUpdateOne) Where(ps ...predicate.ChunithmMusicDifficulty) *ChunithmMusicDifficultyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChunithmMusicDifficultyUpdateOne) Select(field string, fields ...string) *ChunithmMusicDifficultyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ChunithmMusicDifficulty entity.
func (_u *ChunithmMusicDifficultyUpdateOne) Save(ctx context.Context) (*ChunithmMusicDifficulty, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmMusicDifficultyUpdateOne) SaveX(ctx context.Context) *ChunithmMusicDifficulty {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChunithmMusicDifficultyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmMusicDifficultyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmMusicDifficultyUpdateOne) check() error {
	if v, ok := _u.mutation.Version(); ok {
		if err := chunithmmusicdifficulty.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusicDifficulty.version": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmMusicDifficultyUpdateOne) sqlSave(ctx context.Context) (_node *ChunithmMusicDifficulty, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmmusicdifficulty.Table, chunithmmusicdifficulty.Columns, sqlgraph.NewFieldSpec(chunithmmusicdifficulty.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`music: missing "ChunithmMusicDifficulty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chunithmmusicdifficulty.FieldID)
		for _, f := range fields {
			if !chunithmmusicdifficulty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("music: invalid field %q for query", f)}
			}
			if f != chunithmmusicdifficulty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Diff0Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff0Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff0Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff0Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff0ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff0Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff1Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff1Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff1Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff1Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff1ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff1Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff2Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff2Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff2Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff2Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff2ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff2Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff3Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff3Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff3Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff3Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff3ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff3Const, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Diff4Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff4Const, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiff4Const(); ok {
		_spec.AddField(chunithmmusicdifficulty.FieldDiff4Const, field.TypeFloat64, value)
	}
	if _u.mutation.Diff4ConstCleared() {
		_spec.ClearField(chunithmmusicdifficulty.FieldDiff4Const, field.TypeFloat64)
	}
	_node = &ChunithmMusicDifficulty{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmmusicdifficulty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
