// Code generated by ent, DO NOT EDIT.

package bot

import (
	"fmt"
	"haruki-database/database/schema/bot/requestsranking"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RequestsRanking is the model entity for the RequestsRanking schema.
type RequestsRanking struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Bot ID, primary key
	BotID int `json:"bot_id,omitempty"`
	// Total request counts (bigint)
	Counts       int64 `json:"counts,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RequestsRanking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case requestsranking.FieldID, requestsranking.FieldBotID, requestsranking.FieldCounts:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RequestsRanking fields.
func (_m *RequestsRanking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case requestsranking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case requestsranking.FieldBotID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bot_id", values[i])
			} else if value.Valid {
				_m.BotID = int(value.Int64)
			}
		case requestsranking.FieldCounts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field counts", values[i])
			} else if value.Valid {
				_m.Counts = value.Int64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RequestsRanking.
// This includes values selected through modifiers, order, etc.
func (_m *RequestsRanking) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this RequestsRanking.
// Note that you need to call RequestsRanking.Unwrap() before calling this method if this RequestsRanking
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *RequestsRanking) Update() *RequestsRankingUpdateOne {
	return NewRequestsRankingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the RequestsRanking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *RequestsRanking) Unwrap() *RequestsRanking {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("bot: RequestsRanking is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *RequestsRanking) String() string {
	var builder strings.Builder
	builder.WriteString("RequestsRanking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("bot_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.BotID))
	builder.WriteString(", ")
	builder.WriteString("counts=")
	builder.WriteString(fmt.Sprintf("%v", _m.Counts))
	builder.WriteByte(')')
	return builder.String()
}

// RequestsRankings is a parsable slice of RequestsRanking.
type RequestsRankings []*RequestsRanking
