// Code generated by ent, DO NOT EDIT.

package maindb

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/maindb/chunithmmusicalias"
	"haruki-database/database/schema/chunithm/maindb/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunithmMusicAliasUpdate is the builder for updating ChunithmMusicAlias entities.
type ChunithmMusicAliasUpdate struct {
	config
	hooks    []Hook
	mutation *ChunithmMusicAliasMutation
}

// Where appends a list predicates to the ChunithmMusicAliasUpdate builder.
func (_u *ChunithmMusicAliasUpdate) Where(ps ...predicate.ChunithmMusicAlias) *ChunithmMusicAliasUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmMusicAliasUpdate) SetMusicID(v int) *ChunithmMusicAliasUpdate {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmMusicAliasUpdate) SetNillableMusicID(v *int) *ChunithmMusicAliasUpdate {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmMusicAliasUpdate) AddMusicID(v int) *ChunithmMusicAliasUpdate {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetAlias sets the "alias" field.
func (_u *ChunithmMusicAliasUpdate) SetAlias(v string) *ChunithmMusicAliasUpdate {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *ChunithmMusicAliasUpdate) SetNillableAlias(v *string) *ChunithmMusicAliasUpdate {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// Mutation returns the ChunithmMusicAliasMutation object of the builder.
func (_u *ChunithmMusicAliasUpdate) Mutation() *ChunithmMusicAliasMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChunithmMusicAliasUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmMusicAliasUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChunithmMusicAliasUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmMusicAliasUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmMusicAliasUpdate) check() error {
	if v, ok := _u.mutation.Alias(); ok {
		if err := chunithmmusicalias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`maindb: validator failed for field "ChunithmMusicAlias.alias": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmMusicAliasUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmmusicalias.Table, chunithmmusicalias.Columns, sqlgraph.NewFieldSpec(chunithmmusicalias.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusicalias.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmmusicalias.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(chunithmmusicalias.FieldAlias, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmmusicalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChunithmMusicAliasUpdateOne is the builder for updating a single ChunithmMusicAlias entity.
type ChunithmMusicAliasUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChunithmMusicAliasMutation
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmMusicAliasUpdateOne) SetMusicID(v int) *ChunithmMusicAliasUpdateOne {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmMusicAliasUpdateOne) SetNillableMusicID(v *int) *ChunithmMusicAliasUpdateOne {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmMusicAliasUpdateOne) AddMusicID(v int) *ChunithmMusicAliasUpdateOne {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetAlias sets the "alias" field.
func (_u *ChunithmMusicAliasUpdateOne) SetAlias(v string) *ChunithmMusicAliasUpdateOne {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *ChunithmMusicAliasUpdateOne) SetNillableAlias(v *string) *ChunithmMusicAliasUpdateOne {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// Mutation returns the ChunithmMusicAliasMutation object of the builder.
func (_u *ChunithmMusicAliasUpdateOne) Mutation() *ChunithmMusicAliasMutation {
	return _u.mutation
}

// Where appends a list predicates to the ChunithmMusicAliasUpdate builder.
func (_u *ChunithmMusicAliasUpdateOne) Where(ps ...predicate.ChunithmMusicAlias) *ChunithmMusicAliasUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChunithmMusicAliasUpdateOne) Select(field string, fields ...string) *ChunithmMusicAliasUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ChunithmMusicAlias entity.
func (_u *ChunithmMusicAliasUpdateOne) Save(ctx context.Context) (*ChunithmMusicAlias, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmMusicAliasUpdateOne) SaveX(ctx context.Context) *ChunithmMusicAlias {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChunithmMusicAliasUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmMusicAliasUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmMusicAliasUpdateOne) check() error {
	if v, ok := _u.mutation.Alias(); ok {
		if err := chunithmmusicalias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`maindb: validator failed for field "ChunithmMusicAlias.alias": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmMusicAliasUpdateOne) sqlSave(ctx context.Context) (_node *ChunithmMusicAlias, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmmusicalias.Table, chunithmmusicalias.Columns, sqlgraph.NewFieldSpec(chunithmmusicalias.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`maindb: missing "ChunithmMusicAlias.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chunithmmusicalias.FieldID)
		for _, f := range fields {
			if !chunithmmusicalias.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("maindb: invalid field %q for query", f)}
			}
			if f != chunithmmusicalias.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusicalias.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmmusicalias.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(chunithmmusicalias.FieldAlias, field.TypeString, value)
	}
	_node = &ChunithmMusicAlias{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmmusicalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
