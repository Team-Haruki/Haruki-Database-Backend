// Code generated by ent, DO NOT EDIT.

package music

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmmusicdifficulty"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunithmMusicDifficultyCreate is the builder for creating a ChunithmMusicDifficulty entity.
type ChunithmMusicDifficultyCreate struct {
	config
	mutation *ChunithmMusicDifficultyMutation
	hooks    []Hook
}

// SetMusicID sets the "music_id" field.
func (_c *ChunithmMusicDifficultyCreate) SetMusicID(v int) *ChunithmMusicDifficultyCreate {
	_c.mutation.SetMusicID(v)
	return _c
}

// SetVersion sets the "version" field.
func (_c *ChunithmMusicDifficultyCreate) SetVersion(v string) *ChunithmMusicDifficultyCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetDiff0Const sets the "diff0_const" field.
func (_c *ChunithmMusicDifficultyCreate) SetDiff0Const(v float64) *ChunithmMusicDifficultyCreate {
	_c.mutation.SetDiff0Const(v)
	return _c
}

// SetNillableDiff0Const sets the "diff0_const" field if the given value is not nil.
func (_c *ChunithmMusicDifficultyCreate) SetNillableDiff0Const(v *float64) *ChunithmMusicDifficultyCreate {
	if v != nil {
		_c.SetDiff0Const(*v)
	}
	return _c
}

// SetDiff1Const sets the "diff1_const" field.
func (_c *ChunithmMusicDifficultyCreate) SetDiff1Const(v float64) *ChunithmMusicDifficultyCreate {
	_c.mutation.SetDiff1Const(v)
	return _c
}

// SetNillableDiff1Const sets the "diff1_const" field if the given value is not nil.
func (_c *ChunithmMusicDifficultyCreate) SetNillableDiff1Const(v *float64) *ChunithmMusicDifficultyCreate {
	if v != nil {
		_c.SetDiff1Const(*v)
	}
	return _c
}

// SetDiff2Const sets the "diff2_const" field.
func (_c *ChunithmMusicDifficultyCreate) SetDiff2Const(v float64) *ChunithmMusicDifficultyCreate {
	_c.mutation.SetDiff2Const(v)
	return _c
}

// SetNillableDiff2Const sets the "diff2_const" field if the given value is not nil.
func (_c *ChunithmMusicDifficultyCreate) SetNillableDiff2Const(v *float64) *ChunithmMusicDifficultyCreate {
	if v != nil {
		_c.SetDiff2Const(*v)
	}
	return _c
}

// SetDiff3Const sets the "diff3_const" field.
func (_c *ChunithmMusicDifficultyCreate) SetDiff3Const(v float64) *ChunithmMusicDifficultyCreate {
	_c.mutation.SetDiff3Const(v)
	return _c
}

// SetNillableDiff3Const sets the "diff3_const" field if the given value is not nil.
func (_c *ChunithmMusicDifficultyCreate) SetNillableDiff3Const(v *float64) *ChunithmMusicDifficultyCreate {
	if v != nil {
		_c.SetDiff3Const(*v)
	}
	return _c
}

// SetDiff4Const sets the "diff4_const" field.
func (_c *ChunithmMusicDifficultyCreate) SetDiff4Const(v float64) *ChunithmMusicDifficultyCreate {
	_c.mutation.SetDiff4Const(v)
	return _c
}

// SetNillableDiff4Const sets the "diff4_const" field if the given value is not nil.
func (_c *ChunithmMusicDifficultyCreate) SetNillableDiff4Const(v *float64) *ChunithmMusicDifficultyCreate {
	if v != nil {
		_c.SetDiff4Const(*v)
	}
	return _c
}

// Mutation returns the ChunithmMusicDifficultyMutation object of the builder.
func (_c *ChunithmMusicDifficultyCreate) Mutation() *ChunithmMusicDifficultyMutation {
	return _c.mutation
}

// Save creates the ChunithmMusicDifficulty in the database.
func (_c *ChunithmMusicDifficultyCreate) Save(ctx context.Context) (*ChunithmMusicDifficulty, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ChunithmMusicDifficultyCreate) SaveX(ctx context.Context) *ChunithmMusicDifficulty {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunithmMusicDifficultyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunithmMusicDifficultyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ChunithmMusicDifficultyCreate) check() error {
	if _, ok := _c.mutation.MusicID(); !ok {
		return &ValidationError{Name: "music_id", err: errors.New(`music: missing required field "ChunithmMusicDifficulty.music_id"`)}
	}
	if _, ok := _c.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`music: missing required field "ChunithmMusicDifficulty.version"`)}
	}
	if v, ok := _c.mutation.Version(); ok {
		if err := chunithmmusicdifficulty.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusicDifficulty.version": %w`, err)}
		}
	}
	return nil
}

func (_c *ChunithmMusicDifficultyCreate) sqlSave(ctx context.Context) (*ChunithmMusicDifficulty, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ChunithmMusicDifficultyCreate) createSpec() (*ChunithmMusicDifficulty, *sqlgraph.CreateSpec) {
	var (
		_node = &ChunithmMusicDifficulty{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(chunithmmusicdifficulty.Table, sqlgraph.NewFieldSpec(chunithmmusicdifficulty.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldMusicID, field.TypeInt, value)
		_node.MusicID = value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.Diff0Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff0Const, field.TypeFloat64, value)
		_node.Diff0Const = &value
	}
	if value, ok := _c.mutation.Diff1Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff1Const, field.TypeFloat64, value)
		_node.Diff1Const = &value
	}
	if value, ok := _c.mutation.Diff2Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff2Const, field.TypeFloat64, value)
		_node.Diff2Const = &value
	}
	if value, ok := _c.mutation.Diff3Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff3Const, field.TypeFloat64, value)
		_node.Diff3Const = &value
	}
	if value, ok := _c.mutation.Diff4Const(); ok {
		_spec.SetField(chunithmmusicdifficulty.FieldDiff4Const, field.TypeFloat64, value)
		_node.Diff4Const = &value
	}
	return _node, _spec
}

// ChunithmMusicDifficultyCreateBulk is the builder for creating many ChunithmMusicDifficulty entities in bulk.
type ChunithmMusicDifficultyCreateBulk struct {
	config
	err      error
	builders []*ChunithmMusicDifficultyCreate
}

// Save creates the ChunithmMusicDifficulty entities in the database.
func (_c *ChunithmMusicDifficultyCreateBulk) Save(ctx context.Context) ([]*ChunithmMusicDifficulty, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ChunithmMusicDifficulty, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChunithmMusicDifficultyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ChunithmMusicDifficultyCreateBulk) SaveX(ctx context.Context) []*ChunithmMusicDifficulty {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunithmMusicDifficultyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunithmMusicDifficultyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
