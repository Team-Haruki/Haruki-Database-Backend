// Code generated by ent, DO NOT EDIT.

package censor

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"haruki-database/database/schema/censor/migrate"

	"haruki-database/database/schema/censor/namelog"
	"haruki-database/database/schema/censor/result"
	"haruki-database/database/schema/censor/shortbio"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// NameLog is the client for interacting with the NameLog builders.
	NameLog *NameLogClient
	// Result is the client for interacting with the Result builders.
	Result *ResultClient
	// ShortBio is the client for interacting with the ShortBio builders.
	ShortBio *ShortBioClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.NameLog = NewNameLogClient(c.config)
	c.Result = NewResultClient(c.config)
	c.ShortBio = NewShortBioClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("censor: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("censor: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		NameLog:  NewNameLogClient(cfg),
		Result:   NewResultClient(cfg),
		ShortBio: NewShortBioClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		NameLog:  NewNameLogClient(cfg),
		Result:   NewResultClient(cfg),
		ShortBio: NewShortBioClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		NameLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.NameLog.Use(hooks...)
	c.Result.Use(hooks...)
	c.ShortBio.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.NameLog.Intercept(interceptors...)
	c.Result.Intercept(interceptors...)
	c.ShortBio.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *NameLogMutation:
		return c.NameLog.mutate(ctx, m)
	case *ResultMutation:
		return c.Result.mutate(ctx, m)
	case *ShortBioMutation:
		return c.ShortBio.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("censor: unknown mutation type %T", m)
	}
}

// NameLogClient is a client for the NameLog schema.
type NameLogClient struct {
	config
}

// NewNameLogClient returns a client for the NameLog from the given config.
func NewNameLogClient(c config) *NameLogClient {
	return &NameLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `namelog.Hooks(f(g(h())))`.
func (c *NameLogClient) Use(hooks ...Hook) {
	c.hooks.NameLog = append(c.hooks.NameLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `namelog.Intercept(f(g(h())))`.
func (c *NameLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.NameLog = append(c.inters.NameLog, interceptors...)
}

// Create returns a builder for creating a NameLog entity.
func (c *NameLogClient) Create() *NameLogCreate {
	mutation := newNameLogMutation(c.config, OpCreate)
	return &NameLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NameLog entities.
func (c *NameLogClient) CreateBulk(builders ...*NameLogCreate) *NameLogCreateBulk {
	return &NameLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NameLogClient) MapCreateBulk(slice any, setFunc func(*NameLogCreate, int)) *NameLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NameLogCreateBulk{err: fmt.Errorf("calling to NameLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NameLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NameLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NameLog.
func (c *NameLogClient) Update() *NameLogUpdate {
	mutation := newNameLogMutation(c.config, OpUpdate)
	return &NameLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NameLogClient) UpdateOne(_m *NameLog) *NameLogUpdateOne {
	mutation := newNameLogMutation(c.config, OpUpdateOne, withNameLog(_m))
	return &NameLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NameLogClient) UpdateOneID(id int) *NameLogUpdateOne {
	mutation := newNameLogMutation(c.config, OpUpdateOne, withNameLogID(id))
	return &NameLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NameLog.
func (c *NameLogClient) Delete() *NameLogDelete {
	mutation := newNameLogMutation(c.config, OpDelete)
	return &NameLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NameLogClient) DeleteOne(_m *NameLog) *NameLogDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NameLogClient) DeleteOneID(id int) *NameLogDeleteOne {
	builder := c.Delete().Where(namelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NameLogDeleteOne{builder}
}

// Query returns a query builder for NameLog.
func (c *NameLogClient) Query() *NameLogQuery {
	return &NameLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNameLog},
		inters: c.Interceptors(),
	}
}

// Get returns a NameLog entity by its id.
func (c *NameLogClient) Get(ctx context.Context, id int) (*NameLog, error) {
	return c.Query().Where(namelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NameLogClient) GetX(ctx context.Context, id int) *NameLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NameLogClient) Hooks() []Hook {
	return c.hooks.NameLog
}

// Interceptors returns the client interceptors.
func (c *NameLogClient) Interceptors() []Interceptor {
	return c.inters.NameLog
}

func (c *NameLogClient) mutate(ctx context.Context, m *NameLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NameLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NameLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NameLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NameLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("censor: unknown NameLog mutation op: %q", m.Op())
	}
}

// ResultClient is a client for the Result schema.
type ResultClient struct {
	config
}

// NewResultClient returns a client for the Result from the given config.
func NewResultClient(c config) *ResultClient {
	return &ResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `result.Hooks(f(g(h())))`.
func (c *ResultClient) Use(hooks ...Hook) {
	c.hooks.Result = append(c.hooks.Result, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `result.Intercept(f(g(h())))`.
func (c *ResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.Result = append(c.inters.Result, interceptors...)
}

// Create returns a builder for creating a Result entity.
func (c *ResultClient) Create() *ResultCreate {
	mutation := newResultMutation(c.config, OpCreate)
	return &ResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Result entities.
func (c *ResultClient) CreateBulk(builders ...*ResultCreate) *ResultCreateBulk {
	return &ResultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResultClient) MapCreateBulk(slice any, setFunc func(*ResultCreate, int)) *ResultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResultCreateBulk{err: fmt.Errorf("calling to ResultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Result.
func (c *ResultClient) Update() *ResultUpdate {
	mutation := newResultMutation(c.config, OpUpdate)
	return &ResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResultClient) UpdateOne(_m *Result) *ResultUpdateOne {
	mutation := newResultMutation(c.config, OpUpdateOne, withResult(_m))
	return &ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResultClient) UpdateOneID(id int) *ResultUpdateOne {
	mutation := newResultMutation(c.config, OpUpdateOne, withResultID(id))
	return &ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Result.
func (c *ResultClient) Delete() *ResultDelete {
	mutation := newResultMutation(c.config, OpDelete)
	return &ResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResultClient) DeleteOne(_m *Result) *ResultDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResultClient) DeleteOneID(id int) *ResultDeleteOne {
	builder := c.Delete().Where(result.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResultDeleteOne{builder}
}

// Query returns a query builder for Result.
func (c *ResultClient) Query() *ResultQuery {
	return &ResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResult},
		inters: c.Interceptors(),
	}
}

// Get returns a Result entity by its id.
func (c *ResultClient) Get(ctx context.Context, id int) (*Result, error) {
	return c.Query().Where(result.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResultClient) GetX(ctx context.Context, id int) *Result {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResultClient) Hooks() []Hook {
	return c.hooks.Result
}

// Interceptors returns the client interceptors.
func (c *ResultClient) Interceptors() []Interceptor {
	return c.inters.Result
}

func (c *ResultClient) mutate(ctx context.Context, m *ResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("censor: unknown Result mutation op: %q", m.Op())
	}
}

// ShortBioClient is a client for the ShortBio schema.
type ShortBioClient struct {
	config
}

// NewShortBioClient returns a client for the ShortBio from the given config.
func NewShortBioClient(c config) *ShortBioClient {
	return &ShortBioClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shortbio.Hooks(f(g(h())))`.
func (c *ShortBioClient) Use(hooks ...Hook) {
	c.hooks.ShortBio = append(c.hooks.ShortBio, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shortbio.Intercept(f(g(h())))`.
func (c *ShortBioClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShortBio = append(c.inters.ShortBio, interceptors...)
}

// Create returns a builder for creating a ShortBio entity.
func (c *ShortBioClient) Create() *ShortBioCreate {
	mutation := newShortBioMutation(c.config, OpCreate)
	return &ShortBioCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShortBio entities.
func (c *ShortBioClient) CreateBulk(builders ...*ShortBioCreate) *ShortBioCreateBulk {
	return &ShortBioCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShortBioClient) MapCreateBulk(slice any, setFunc func(*ShortBioCreate, int)) *ShortBioCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShortBioCreateBulk{err: fmt.Errorf("calling to ShortBioClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShortBioCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShortBioCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShortBio.
func (c *ShortBioClient) Update() *ShortBioUpdate {
	mutation := newShortBioMutation(c.config, OpUpdate)
	return &ShortBioUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShortBioClient) UpdateOne(_m *ShortBio) *ShortBioUpdateOne {
	mutation := newShortBioMutation(c.config, OpUpdateOne, withShortBio(_m))
	return &ShortBioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShortBioClient) UpdateOneID(id int) *ShortBioUpdateOne {
	mutation := newShortBioMutation(c.config, OpUpdateOne, withShortBioID(id))
	return &ShortBioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShortBio.
func (c *ShortBioClient) Delete() *ShortBioDelete {
	mutation := newShortBioMutation(c.config, OpDelete)
	return &ShortBioDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShortBioClient) DeleteOne(_m *ShortBio) *ShortBioDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShortBioClient) DeleteOneID(id int) *ShortBioDeleteOne {
	builder := c.Delete().Where(shortbio.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShortBioDeleteOne{builder}
}

// Query returns a query builder for ShortBio.
func (c *ShortBioClient) Query() *ShortBioQuery {
	return &ShortBioQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShortBio},
		inters: c.Interceptors(),
	}
}

// Get returns a ShortBio entity by its id.
func (c *ShortBioClient) Get(ctx context.Context, id int) (*ShortBio, error) {
	return c.Query().Where(shortbio.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShortBioClient) GetX(ctx context.Context, id int) *ShortBio {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShortBioClient) Hooks() []Hook {
	return c.hooks.ShortBio
}

// Interceptors returns the client interceptors.
func (c *ShortBioClient) Interceptors() []Interceptor {
	return c.inters.ShortBio
}

func (c *ShortBioClient) mutate(ctx context.Context, m *ShortBioMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShortBioCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShortBioUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShortBioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShortBioDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("censor: unknown ShortBio mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		NameLog, Result, ShortBio []ent.Hook
	}
	inters struct {
		NameLog, Result, ShortBio []ent.Interceptor
	}
)
