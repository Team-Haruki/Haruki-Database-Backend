// Code generated by ent, DO NOT EDIT.

package pendingalias

import (
	"haruki-database/database/schema/pjsk/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLTE(FieldID, id))
}

// AliasType applies equality check predicate on the "alias_type" field. It's identical to AliasTypeEQ.
func AliasType(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldAliasType, v))
}

// AliasTypeID applies equality check predicate on the "alias_type_id" field. It's identical to AliasTypeIDEQ.
func AliasTypeID(v int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldAliasTypeID, v))
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldAlias, v))
}

// SubmittedBy applies equality check predicate on the "submitted_by" field. It's identical to SubmittedByEQ.
func SubmittedBy(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldSubmittedBy, v))
}

// SubmittedAt applies equality check predicate on the "submitted_at" field. It's identical to SubmittedAtEQ.
func SubmittedAt(v time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldSubmittedAt, v))
}

// AliasTypeEQ applies the EQ predicate on the "alias_type" field.
func AliasTypeEQ(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldAliasType, v))
}

// AliasTypeNEQ applies the NEQ predicate on the "alias_type" field.
func AliasTypeNEQ(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNEQ(FieldAliasType, v))
}

// AliasTypeIn applies the In predicate on the "alias_type" field.
func AliasTypeIn(vs ...string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldIn(FieldAliasType, vs...))
}

// AliasTypeNotIn applies the NotIn predicate on the "alias_type" field.
func AliasTypeNotIn(vs ...string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNotIn(FieldAliasType, vs...))
}

// AliasTypeGT applies the GT predicate on the "alias_type" field.
func AliasTypeGT(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGT(FieldAliasType, v))
}

// AliasTypeGTE applies the GTE predicate on the "alias_type" field.
func AliasTypeGTE(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGTE(FieldAliasType, v))
}

// AliasTypeLT applies the LT predicate on the "alias_type" field.
func AliasTypeLT(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLT(FieldAliasType, v))
}

// AliasTypeLTE applies the LTE predicate on the "alias_type" field.
func AliasTypeLTE(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLTE(FieldAliasType, v))
}

// AliasTypeContains applies the Contains predicate on the "alias_type" field.
func AliasTypeContains(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldContains(FieldAliasType, v))
}

// AliasTypeHasPrefix applies the HasPrefix predicate on the "alias_type" field.
func AliasTypeHasPrefix(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldHasPrefix(FieldAliasType, v))
}

// AliasTypeHasSuffix applies the HasSuffix predicate on the "alias_type" field.
func AliasTypeHasSuffix(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldHasSuffix(FieldAliasType, v))
}

// AliasTypeEqualFold applies the EqualFold predicate on the "alias_type" field.
func AliasTypeEqualFold(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEqualFold(FieldAliasType, v))
}

// AliasTypeContainsFold applies the ContainsFold predicate on the "alias_type" field.
func AliasTypeContainsFold(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldContainsFold(FieldAliasType, v))
}

// AliasTypeIDEQ applies the EQ predicate on the "alias_type_id" field.
func AliasTypeIDEQ(v int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldAliasTypeID, v))
}

// AliasTypeIDNEQ applies the NEQ predicate on the "alias_type_id" field.
func AliasTypeIDNEQ(v int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNEQ(FieldAliasTypeID, v))
}

// AliasTypeIDIn applies the In predicate on the "alias_type_id" field.
func AliasTypeIDIn(vs ...int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldIn(FieldAliasTypeID, vs...))
}

// AliasTypeIDNotIn applies the NotIn predicate on the "alias_type_id" field.
func AliasTypeIDNotIn(vs ...int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNotIn(FieldAliasTypeID, vs...))
}

// AliasTypeIDGT applies the GT predicate on the "alias_type_id" field.
func AliasTypeIDGT(v int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGT(FieldAliasTypeID, v))
}

// AliasTypeIDGTE applies the GTE predicate on the "alias_type_id" field.
func AliasTypeIDGTE(v int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGTE(FieldAliasTypeID, v))
}

// AliasTypeIDLT applies the LT predicate on the "alias_type_id" field.
func AliasTypeIDLT(v int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLT(FieldAliasTypeID, v))
}

// AliasTypeIDLTE applies the LTE predicate on the "alias_type_id" field.
func AliasTypeIDLTE(v int) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLTE(FieldAliasTypeID, v))
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldAlias, v))
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNEQ(FieldAlias, v))
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldIn(FieldAlias, vs...))
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNotIn(FieldAlias, vs...))
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGT(FieldAlias, v))
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGTE(FieldAlias, v))
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLT(FieldAlias, v))
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLTE(FieldAlias, v))
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldContains(FieldAlias, v))
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldHasPrefix(FieldAlias, v))
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldHasSuffix(FieldAlias, v))
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEqualFold(FieldAlias, v))
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldContainsFold(FieldAlias, v))
}

// SubmittedByEQ applies the EQ predicate on the "submitted_by" field.
func SubmittedByEQ(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldSubmittedBy, v))
}

// SubmittedByNEQ applies the NEQ predicate on the "submitted_by" field.
func SubmittedByNEQ(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNEQ(FieldSubmittedBy, v))
}

// SubmittedByIn applies the In predicate on the "submitted_by" field.
func SubmittedByIn(vs ...string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldIn(FieldSubmittedBy, vs...))
}

// SubmittedByNotIn applies the NotIn predicate on the "submitted_by" field.
func SubmittedByNotIn(vs ...string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNotIn(FieldSubmittedBy, vs...))
}

// SubmittedByGT applies the GT predicate on the "submitted_by" field.
func SubmittedByGT(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGT(FieldSubmittedBy, v))
}

// SubmittedByGTE applies the GTE predicate on the "submitted_by" field.
func SubmittedByGTE(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGTE(FieldSubmittedBy, v))
}

// SubmittedByLT applies the LT predicate on the "submitted_by" field.
func SubmittedByLT(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLT(FieldSubmittedBy, v))
}

// SubmittedByLTE applies the LTE predicate on the "submitted_by" field.
func SubmittedByLTE(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLTE(FieldSubmittedBy, v))
}

// SubmittedByContains applies the Contains predicate on the "submitted_by" field.
func SubmittedByContains(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldContains(FieldSubmittedBy, v))
}

// SubmittedByHasPrefix applies the HasPrefix predicate on the "submitted_by" field.
func SubmittedByHasPrefix(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldHasPrefix(FieldSubmittedBy, v))
}

// SubmittedByHasSuffix applies the HasSuffix predicate on the "submitted_by" field.
func SubmittedByHasSuffix(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldHasSuffix(FieldSubmittedBy, v))
}

// SubmittedByEqualFold applies the EqualFold predicate on the "submitted_by" field.
func SubmittedByEqualFold(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEqualFold(FieldSubmittedBy, v))
}

// SubmittedByContainsFold applies the ContainsFold predicate on the "submitted_by" field.
func SubmittedByContainsFold(v string) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldContainsFold(FieldSubmittedBy, v))
}

// SubmittedAtEQ applies the EQ predicate on the "submitted_at" field.
func SubmittedAtEQ(v time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedAtNEQ applies the NEQ predicate on the "submitted_at" field.
func SubmittedAtNEQ(v time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNEQ(FieldSubmittedAt, v))
}

// SubmittedAtIn applies the In predicate on the "submitted_at" field.
func SubmittedAtIn(vs ...time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldIn(FieldSubmittedAt, vs...))
}

// SubmittedAtNotIn applies the NotIn predicate on the "submitted_at" field.
func SubmittedAtNotIn(vs ...time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldNotIn(FieldSubmittedAt, vs...))
}

// SubmittedAtGT applies the GT predicate on the "submitted_at" field.
func SubmittedAtGT(v time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGT(FieldSubmittedAt, v))
}

// SubmittedAtGTE applies the GTE predicate on the "submitted_at" field.
func SubmittedAtGTE(v time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldGTE(FieldSubmittedAt, v))
}

// SubmittedAtLT applies the LT predicate on the "submitted_at" field.
func SubmittedAtLT(v time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLT(FieldSubmittedAt, v))
}

// SubmittedAtLTE applies the LTE predicate on the "submitted_at" field.
func SubmittedAtLTE(v time.Time) predicate.PendingAlias {
	return predicate.PendingAlias(sql.FieldLTE(FieldSubmittedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PendingAlias) predicate.PendingAlias {
	return predicate.PendingAlias(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PendingAlias) predicate.PendingAlias {
	return predicate.PendingAlias(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PendingAlias) predicate.PendingAlias {
	return predicate.PendingAlias(sql.NotPredicates(p))
}
