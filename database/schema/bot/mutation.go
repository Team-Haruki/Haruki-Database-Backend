// Code generated by ent, DO NOT EDIT.

package bot

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/bot/dailyrequests"
	"haruki-database/database/schema/bot/hourlyrequests"
	"haruki-database/database/schema/bot/predicate"
	"haruki-database/database/schema/bot/requestsranking"
	"haruki-database/database/schema/bot/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDailyRequests   = "DailyRequests"
	TypeHourlyRequests  = "HourlyRequests"
	TypeRequestsRanking = "RequestsRanking"
	TypeUser            = "User"
)

// DailyRequestsMutation represents an operation that mutates the DailyRequests nodes in the graph.
type DailyRequestsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date_key      *time.Time
	count         *int
	addcount      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DailyRequests, error)
	predicates    []predicate.DailyRequests
}

var _ ent.Mutation = (*DailyRequestsMutation)(nil)

// dailyrequestsOption allows management of the mutation configuration using functional options.
type dailyrequestsOption func(*DailyRequestsMutation)

// newDailyRequestsMutation creates new mutation for the DailyRequests entity.
func newDailyRequestsMutation(c config, op Op, opts ...dailyrequestsOption) *DailyRequestsMutation {
	m := &DailyRequestsMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyRequests,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyRequestsID sets the ID field of the mutation.
func withDailyRequestsID(id int) dailyrequestsOption {
	return func(m *DailyRequestsMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyRequests
		)
		m.oldValue = func(ctx context.Context) (*DailyRequests, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyRequests.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyRequests sets the old DailyRequests of the mutation.
func withDailyRequests(node *DailyRequests) dailyrequestsOption {
	return func(m *DailyRequestsMutation) {
		m.oldValue = func(context.Context) (*DailyRequests, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyRequestsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyRequestsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("bot: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyRequestsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyRequestsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyRequests.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDateKey sets the "date_key" field.
func (m *DailyRequestsMutation) SetDateKey(t time.Time) {
	m.date_key = &t
}

// DateKey returns the value of the "date_key" field in the mutation.
func (m *DailyRequestsMutation) DateKey() (r time.Time, exists bool) {
	v := m.date_key
	if v == nil {
		return
	}
	return *v, true
}

// OldDateKey returns the old "date_key" field's value of the DailyRequests entity.
// If the DailyRequests object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRequestsMutation) OldDateKey(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateKey: %w", err)
	}
	return oldValue.DateKey, nil
}

// ResetDateKey resets all changes to the "date_key" field.
func (m *DailyRequestsMutation) ResetDateKey() {
	m.date_key = nil
}

// SetCount sets the "count" field.
func (m *DailyRequestsMutation) SetCount(i int) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *DailyRequestsMutation) Count() (r int, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the DailyRequests entity.
// If the DailyRequests object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRequestsMutation) OldCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *DailyRequestsMutation) AddCount(i int) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *DailyRequestsMutation) AddedCount() (r int, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *DailyRequestsMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// Where appends a list predicates to the DailyRequestsMutation builder.
func (m *DailyRequestsMutation) Where(ps ...predicate.DailyRequests) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyRequestsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyRequestsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyRequests, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyRequestsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyRequestsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyRequests).
func (m *DailyRequestsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyRequestsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.date_key != nil {
		fields = append(fields, dailyrequests.FieldDateKey)
	}
	if m.count != nil {
		fields = append(fields, dailyrequests.FieldCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyRequestsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailyrequests.FieldDateKey:
		return m.DateKey()
	case dailyrequests.FieldCount:
		return m.Count()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyRequestsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailyrequests.FieldDateKey:
		return m.OldDateKey(ctx)
	case dailyrequests.FieldCount:
		return m.OldCount(ctx)
	}
	return nil, fmt.Errorf("unknown DailyRequests field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRequestsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailyrequests.FieldDateKey:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateKey(v)
		return nil
	case dailyrequests.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRequests field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyRequestsMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, dailyrequests.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyRequestsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dailyrequests.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRequestsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dailyrequests.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRequests numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyRequestsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyRequestsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyRequestsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DailyRequests nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyRequestsMutation) ResetField(name string) error {
	switch name {
	case dailyrequests.FieldDateKey:
		m.ResetDateKey()
		return nil
	case dailyrequests.FieldCount:
		m.ResetCount()
		return nil
	}
	return fmt.Errorf("unknown DailyRequests field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyRequestsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyRequestsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyRequestsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyRequestsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyRequestsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyRequestsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyRequestsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DailyRequests unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyRequestsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DailyRequests edge %s", name)
}

// HourlyRequestsMutation represents an operation that mutates the HourlyRequests nodes in the graph.
type HourlyRequestsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	hour_key      *time.Time
	count         *int
	addcount      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HourlyRequests, error)
	predicates    []predicate.HourlyRequests
}

var _ ent.Mutation = (*HourlyRequestsMutation)(nil)

// hourlyrequestsOption allows management of the mutation configuration using functional options.
type hourlyrequestsOption func(*HourlyRequestsMutation)

// newHourlyRequestsMutation creates new mutation for the HourlyRequests entity.
func newHourlyRequestsMutation(c config, op Op, opts ...hourlyrequestsOption) *HourlyRequestsMutation {
	m := &HourlyRequestsMutation{
		config:        c,
		op:            op,
		typ:           TypeHourlyRequests,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHourlyRequestsID sets the ID field of the mutation.
func withHourlyRequestsID(id int) hourlyrequestsOption {
	return func(m *HourlyRequestsMutation) {
		var (
			err   error
			once  sync.Once
			value *HourlyRequests
		)
		m.oldValue = func(ctx context.Context) (*HourlyRequests, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HourlyRequests.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHourlyRequests sets the old HourlyRequests of the mutation.
func withHourlyRequests(node *HourlyRequests) hourlyrequestsOption {
	return func(m *HourlyRequestsMutation) {
		m.oldValue = func(context.Context) (*HourlyRequests, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HourlyRequestsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HourlyRequestsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("bot: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HourlyRequestsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HourlyRequestsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HourlyRequests.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHourKey sets the "hour_key" field.
func (m *HourlyRequestsMutation) SetHourKey(t time.Time) {
	m.hour_key = &t
}

// HourKey returns the value of the "hour_key" field in the mutation.
func (m *HourlyRequestsMutation) HourKey() (r time.Time, exists bool) {
	v := m.hour_key
	if v == nil {
		return
	}
	return *v, true
}

// OldHourKey returns the old "hour_key" field's value of the HourlyRequests entity.
// If the HourlyRequests object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HourlyRequestsMutation) OldHourKey(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHourKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHourKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHourKey: %w", err)
	}
	return oldValue.HourKey, nil
}

// ResetHourKey resets all changes to the "hour_key" field.
func (m *HourlyRequestsMutation) ResetHourKey() {
	m.hour_key = nil
}

// SetCount sets the "count" field.
func (m *HourlyRequestsMutation) SetCount(i int) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *HourlyRequestsMutation) Count() (r int, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the HourlyRequests entity.
// If the HourlyRequests object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HourlyRequestsMutation) OldCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *HourlyRequestsMutation) AddCount(i int) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *HourlyRequestsMutation) AddedCount() (r int, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *HourlyRequestsMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// Where appends a list predicates to the HourlyRequestsMutation builder.
func (m *HourlyRequestsMutation) Where(ps ...predicate.HourlyRequests) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HourlyRequestsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HourlyRequestsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HourlyRequests, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HourlyRequestsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HourlyRequestsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HourlyRequests).
func (m *HourlyRequestsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HourlyRequestsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.hour_key != nil {
		fields = append(fields, hourlyrequests.FieldHourKey)
	}
	if m.count != nil {
		fields = append(fields, hourlyrequests.FieldCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HourlyRequestsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hourlyrequests.FieldHourKey:
		return m.HourKey()
	case hourlyrequests.FieldCount:
		return m.Count()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HourlyRequestsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hourlyrequests.FieldHourKey:
		return m.OldHourKey(ctx)
	case hourlyrequests.FieldCount:
		return m.OldCount(ctx)
	}
	return nil, fmt.Errorf("unknown HourlyRequests field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HourlyRequestsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hourlyrequests.FieldHourKey:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHourKey(v)
		return nil
	case hourlyrequests.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	}
	return fmt.Errorf("unknown HourlyRequests field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HourlyRequestsMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, hourlyrequests.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HourlyRequestsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hourlyrequests.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HourlyRequestsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hourlyrequests.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown HourlyRequests numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HourlyRequestsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HourlyRequestsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HourlyRequestsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HourlyRequests nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HourlyRequestsMutation) ResetField(name string) error {
	switch name {
	case hourlyrequests.FieldHourKey:
		m.ResetHourKey()
		return nil
	case hourlyrequests.FieldCount:
		m.ResetCount()
		return nil
	}
	return fmt.Errorf("unknown HourlyRequests field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HourlyRequestsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HourlyRequestsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HourlyRequestsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HourlyRequestsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HourlyRequestsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HourlyRequestsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HourlyRequestsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HourlyRequests unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HourlyRequestsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HourlyRequests edge %s", name)
}

// RequestsRankingMutation represents an operation that mutates the RequestsRanking nodes in the graph.
type RequestsRankingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	bot_id        *int
	addbot_id     *int
	counts        *int64
	addcounts     *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RequestsRanking, error)
	predicates    []predicate.RequestsRanking
}

var _ ent.Mutation = (*RequestsRankingMutation)(nil)

// requestsrankingOption allows management of the mutation configuration using functional options.
type requestsrankingOption func(*RequestsRankingMutation)

// newRequestsRankingMutation creates new mutation for the RequestsRanking entity.
func newRequestsRankingMutation(c config, op Op, opts ...requestsrankingOption) *RequestsRankingMutation {
	m := &RequestsRankingMutation{
		config:        c,
		op:            op,
		typ:           TypeRequestsRanking,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRequestsRankingID sets the ID field of the mutation.
func withRequestsRankingID(id int) requestsrankingOption {
	return func(m *RequestsRankingMutation) {
		var (
			err   error
			once  sync.Once
			value *RequestsRanking
		)
		m.oldValue = func(ctx context.Context) (*RequestsRanking, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RequestsRanking.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRequestsRanking sets the old RequestsRanking of the mutation.
func withRequestsRanking(node *RequestsRanking) requestsrankingOption {
	return func(m *RequestsRankingMutation) {
		m.oldValue = func(context.Context) (*RequestsRanking, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RequestsRankingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RequestsRankingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("bot: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RequestsRankingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RequestsRankingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RequestsRanking.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBotID sets the "bot_id" field.
func (m *RequestsRankingMutation) SetBotID(i int) {
	m.bot_id = &i
	m.addbot_id = nil
}

// BotID returns the value of the "bot_id" field in the mutation.
func (m *RequestsRankingMutation) BotID() (r int, exists bool) {
	v := m.bot_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBotID returns the old "bot_id" field's value of the RequestsRanking entity.
// If the RequestsRanking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestsRankingMutation) OldBotID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBotID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBotID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotID: %w", err)
	}
	return oldValue.BotID, nil
}

// AddBotID adds i to the "bot_id" field.
func (m *RequestsRankingMutation) AddBotID(i int) {
	if m.addbot_id != nil {
		*m.addbot_id += i
	} else {
		m.addbot_id = &i
	}
}

// AddedBotID returns the value that was added to the "bot_id" field in this mutation.
func (m *RequestsRankingMutation) AddedBotID() (r int, exists bool) {
	v := m.addbot_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetBotID resets all changes to the "bot_id" field.
func (m *RequestsRankingMutation) ResetBotID() {
	m.bot_id = nil
	m.addbot_id = nil
}

// SetCounts sets the "counts" field.
func (m *RequestsRankingMutation) SetCounts(i int64) {
	m.counts = &i
	m.addcounts = nil
}

// Counts returns the value of the "counts" field in the mutation.
func (m *RequestsRankingMutation) Counts() (r int64, exists bool) {
	v := m.counts
	if v == nil {
		return
	}
	return *v, true
}

// OldCounts returns the old "counts" field's value of the RequestsRanking entity.
// If the RequestsRanking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestsRankingMutation) OldCounts(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounts: %w", err)
	}
	return oldValue.Counts, nil
}

// AddCounts adds i to the "counts" field.
func (m *RequestsRankingMutation) AddCounts(i int64) {
	if m.addcounts != nil {
		*m.addcounts += i
	} else {
		m.addcounts = &i
	}
}

// AddedCounts returns the value that was added to the "counts" field in this mutation.
func (m *RequestsRankingMutation) AddedCounts() (r int64, exists bool) {
	v := m.addcounts
	if v == nil {
		return
	}
	return *v, true
}

// ClearCounts clears the value of the "counts" field.
func (m *RequestsRankingMutation) ClearCounts() {
	m.counts = nil
	m.addcounts = nil
	m.clearedFields[requestsranking.FieldCounts] = struct{}{}
}

// CountsCleared returns if the "counts" field was cleared in this mutation.
func (m *RequestsRankingMutation) CountsCleared() bool {
	_, ok := m.clearedFields[requestsranking.FieldCounts]
	return ok
}

// ResetCounts resets all changes to the "counts" field.
func (m *RequestsRankingMutation) ResetCounts() {
	m.counts = nil
	m.addcounts = nil
	delete(m.clearedFields, requestsranking.FieldCounts)
}

// Where appends a list predicates to the RequestsRankingMutation builder.
func (m *RequestsRankingMutation) Where(ps ...predicate.RequestsRanking) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RequestsRankingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RequestsRankingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RequestsRanking, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RequestsRankingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RequestsRankingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RequestsRanking).
func (m *RequestsRankingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RequestsRankingMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.bot_id != nil {
		fields = append(fields, requestsranking.FieldBotID)
	}
	if m.counts != nil {
		fields = append(fields, requestsranking.FieldCounts)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RequestsRankingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case requestsranking.FieldBotID:
		return m.BotID()
	case requestsranking.FieldCounts:
		return m.Counts()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RequestsRankingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case requestsranking.FieldBotID:
		return m.OldBotID(ctx)
	case requestsranking.FieldCounts:
		return m.OldCounts(ctx)
	}
	return nil, fmt.Errorf("unknown RequestsRanking field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestsRankingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case requestsranking.FieldBotID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotID(v)
		return nil
	case requestsranking.FieldCounts:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounts(v)
		return nil
	}
	return fmt.Errorf("unknown RequestsRanking field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RequestsRankingMutation) AddedFields() []string {
	var fields []string
	if m.addbot_id != nil {
		fields = append(fields, requestsranking.FieldBotID)
	}
	if m.addcounts != nil {
		fields = append(fields, requestsranking.FieldCounts)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RequestsRankingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case requestsranking.FieldBotID:
		return m.AddedBotID()
	case requestsranking.FieldCounts:
		return m.AddedCounts()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestsRankingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case requestsranking.FieldBotID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBotID(v)
		return nil
	case requestsranking.FieldCounts:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounts(v)
		return nil
	}
	return fmt.Errorf("unknown RequestsRanking numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RequestsRankingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(requestsranking.FieldCounts) {
		fields = append(fields, requestsranking.FieldCounts)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RequestsRankingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RequestsRankingMutation) ClearField(name string) error {
	switch name {
	case requestsranking.FieldCounts:
		m.ClearCounts()
		return nil
	}
	return fmt.Errorf("unknown RequestsRanking nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RequestsRankingMutation) ResetField(name string) error {
	switch name {
	case requestsranking.FieldBotID:
		m.ResetBotID()
		return nil
	case requestsranking.FieldCounts:
		m.ResetCounts()
		return nil
	}
	return fmt.Errorf("unknown RequestsRanking field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RequestsRankingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RequestsRankingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RequestsRankingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RequestsRankingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RequestsRankingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RequestsRankingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RequestsRankingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RequestsRanking unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RequestsRankingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RequestsRanking edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	owner_user_id    *int64
	addowner_user_id *int64
	bot_id           *int
	addbot_id        *int
	credential       *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("bot: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerUserID sets the "owner_user_id" field.
func (m *UserMutation) SetOwnerUserID(i int64) {
	m.owner_user_id = &i
	m.addowner_user_id = nil
}

// OwnerUserID returns the value of the "owner_user_id" field in the mutation.
func (m *UserMutation) OwnerUserID() (r int64, exists bool) {
	v := m.owner_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerUserID returns the old "owner_user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOwnerUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerUserID: %w", err)
	}
	return oldValue.OwnerUserID, nil
}

// AddOwnerUserID adds i to the "owner_user_id" field.
func (m *UserMutation) AddOwnerUserID(i int64) {
	if m.addowner_user_id != nil {
		*m.addowner_user_id += i
	} else {
		m.addowner_user_id = &i
	}
}

// AddedOwnerUserID returns the value that was added to the "owner_user_id" field in this mutation.
func (m *UserMutation) AddedOwnerUserID() (r int64, exists bool) {
	v := m.addowner_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOwnerUserID resets all changes to the "owner_user_id" field.
func (m *UserMutation) ResetOwnerUserID() {
	m.owner_user_id = nil
	m.addowner_user_id = nil
}

// SetBotID sets the "bot_id" field.
func (m *UserMutation) SetBotID(i int) {
	m.bot_id = &i
	m.addbot_id = nil
}

// BotID returns the value of the "bot_id" field in the mutation.
func (m *UserMutation) BotID() (r int, exists bool) {
	v := m.bot_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBotID returns the old "bot_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBotID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBotID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBotID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotID: %w", err)
	}
	return oldValue.BotID, nil
}

// AddBotID adds i to the "bot_id" field.
func (m *UserMutation) AddBotID(i int) {
	if m.addbot_id != nil {
		*m.addbot_id += i
	} else {
		m.addbot_id = &i
	}
}

// AddedBotID returns the value that was added to the "bot_id" field in this mutation.
func (m *UserMutation) AddedBotID() (r int, exists bool) {
	v := m.addbot_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetBotID resets all changes to the "bot_id" field.
func (m *UserMutation) ResetBotID() {
	m.bot_id = nil
	m.addbot_id = nil
}

// SetCredential sets the "credential" field.
func (m *UserMutation) SetCredential(s string) {
	m.credential = &s
}

// Credential returns the value of the "credential" field in the mutation.
func (m *UserMutation) Credential() (r string, exists bool) {
	v := m.credential
	if v == nil {
		return
	}
	return *v, true
}

// OldCredential returns the old "credential" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCredential(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredential is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredential requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredential: %w", err)
	}
	return oldValue.Credential, nil
}

// ClearCredential clears the value of the "credential" field.
func (m *UserMutation) ClearCredential() {
	m.credential = nil
	m.clearedFields[user.FieldCredential] = struct{}{}
}

// CredentialCleared returns if the "credential" field was cleared in this mutation.
func (m *UserMutation) CredentialCleared() bool {
	_, ok := m.clearedFields[user.FieldCredential]
	return ok
}

// ResetCredential resets all changes to the "credential" field.
func (m *UserMutation) ResetCredential() {
	m.credential = nil
	delete(m.clearedFields, user.FieldCredential)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.owner_user_id != nil {
		fields = append(fields, user.FieldOwnerUserID)
	}
	if m.bot_id != nil {
		fields = append(fields, user.FieldBotID)
	}
	if m.credential != nil {
		fields = append(fields, user.FieldCredential)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldOwnerUserID:
		return m.OwnerUserID()
	case user.FieldBotID:
		return m.BotID()
	case user.FieldCredential:
		return m.Credential()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldOwnerUserID:
		return m.OldOwnerUserID(ctx)
	case user.FieldBotID:
		return m.OldBotID(ctx)
	case user.FieldCredential:
		return m.OldCredential(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldOwnerUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerUserID(v)
		return nil
	case user.FieldBotID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotID(v)
		return nil
	case user.FieldCredential:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredential(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addowner_user_id != nil {
		fields = append(fields, user.FieldOwnerUserID)
	}
	if m.addbot_id != nil {
		fields = append(fields, user.FieldBotID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldOwnerUserID:
		return m.AddedOwnerUserID()
	case user.FieldBotID:
		return m.AddedBotID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldOwnerUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOwnerUserID(v)
		return nil
	case user.FieldBotID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBotID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCredential) {
		fields = append(fields, user.FieldCredential)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCredential:
		m.ClearCredential()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldOwnerUserID:
		m.ResetOwnerUserID()
		return nil
	case user.FieldBotID:
		m.ResetBotID()
		return nil
	case user.FieldCredential:
		m.ResetCredential()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
