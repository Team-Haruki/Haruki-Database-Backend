// Code generated by ent, DO NOT EDIT.

package censor

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/censor/namelog"
	"haruki-database/database/schema/censor/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NameLogUpdate is the builder for updating NameLog entities.
type NameLogUpdate struct {
	config
	hooks    []Hook
	mutation *NameLogMutation
}

// Where appends a list predicates to the NameLogUpdate builder.
func (_u *NameLogUpdate) Where(ps ...predicate.NameLog) *NameLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *NameLogUpdate) SetUserID(v string) *NameLogUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *NameLogUpdate) SetNillableUserID(v *string) *NameLogUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *NameLogUpdate) ClearUserID() *NameLogUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetName sets the "name" field.
func (_u *NameLogUpdate) SetName(v string) *NameLogUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NameLogUpdate) SetNillableName(v *string) *NameLogUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *NameLogUpdate) ClearName() *NameLogUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetImUserID sets the "im_user_id" field.
func (_u *NameLogUpdate) SetImUserID(v string) *NameLogUpdate {
	_u.mutation.SetImUserID(v)
	return _u
}

// SetNillableImUserID sets the "im_user_id" field if the given value is not nil.
func (_u *NameLogUpdate) SetNillableImUserID(v *string) *NameLogUpdate {
	if v != nil {
		_u.SetImUserID(*v)
	}
	return _u
}

// ClearImUserID clears the value of the "im_user_id" field.
func (_u *NameLogUpdate) ClearImUserID() *NameLogUpdate {
	_u.mutation.ClearImUserID()
	return _u
}

// SetTime sets the "time" field.
func (_u *NameLogUpdate) SetTime(v time.Time) *NameLogUpdate {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *NameLogUpdate) SetNillableTime(v *time.Time) *NameLogUpdate {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// ClearTime clears the value of the "time" field.
func (_u *NameLogUpdate) ClearTime() *NameLogUpdate {
	_u.mutation.ClearTime()
	return _u
}

// SetResult sets the "result" field.
func (_u *NameLogUpdate) SetResult(v string) *NameLogUpdate {
	_u.mutation.SetResult(v)
	return _u
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_u *NameLogUpdate) SetNillableResult(v *string) *NameLogUpdate {
	if v != nil {
		_u.SetResult(*v)
	}
	return _u
}

// ClearResult clears the value of the "result" field.
func (_u *NameLogUpdate) ClearResult() *NameLogUpdate {
	_u.mutation.ClearResult()
	return _u
}

// Mutation returns the NameLogMutation object of the builder.
func (_u *NameLogUpdate) Mutation() *NameLogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NameLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NameLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NameLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NameLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NameLogUpdate) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := namelog.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`censor: validator failed for field "NameLog.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := namelog.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`censor: validator failed for field "NameLog.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ImUserID(); ok {
		if err := namelog.ImUserIDValidator(v); err != nil {
			return &ValidationError{Name: "im_user_id", err: fmt.Errorf(`censor: validator failed for field "NameLog.im_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Result(); ok {
		if err := namelog.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`censor: validator failed for field "NameLog.result": %w`, err)}
		}
	}
	return nil
}

func (_u *NameLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(namelog.Table, namelog.Columns, sqlgraph.NewFieldSpec(namelog.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(namelog.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(namelog.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(namelog.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(namelog.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.ImUserID(); ok {
		_spec.SetField(namelog.FieldImUserID, field.TypeString, value)
	}
	if _u.mutation.ImUserIDCleared() {
		_spec.ClearField(namelog.FieldImUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(namelog.FieldTime, field.TypeTime, value)
	}
	if _u.mutation.TimeCleared() {
		_spec.ClearField(namelog.FieldTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(namelog.FieldResult, field.TypeString, value)
	}
	if _u.mutation.ResultCleared() {
		_spec.ClearField(namelog.FieldResult, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NameLogUpdateOne is the builder for updating a single NameLog entity.
type NameLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NameLogMutation
}

// SetUserID sets the "user_id" field.
func (_u *NameLogUpdateOne) SetUserID(v string) *NameLogUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *NameLogUpdateOne) SetNillableUserID(v *string) *NameLogUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *NameLogUpdateOne) ClearUserID() *NameLogUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetName sets the "name" field.
func (_u *NameLogUpdateOne) SetName(v string) *NameLogUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NameLogUpdateOne) SetNillableName(v *string) *NameLogUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *NameLogUpdateOne) ClearName() *NameLogUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetImUserID sets the "im_user_id" field.
func (_u *NameLogUpdateOne) SetImUserID(v string) *NameLogUpdateOne {
	_u.mutation.SetImUserID(v)
	return _u
}

// SetNillableImUserID sets the "im_user_id" field if the given value is not nil.
func (_u *NameLogUpdateOne) SetNillableImUserID(v *string) *NameLogUpdateOne {
	if v != nil {
		_u.SetImUserID(*v)
	}
	return _u
}

// ClearImUserID clears the value of the "im_user_id" field.
func (_u *NameLogUpdateOne) ClearImUserID() *NameLogUpdateOne {
	_u.mutation.ClearImUserID()
	return _u
}

// SetTime sets the "time" field.
func (_u *NameLogUpdateOne) SetTime(v time.Time) *NameLogUpdateOne {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *NameLogUpdateOne) SetNillableTime(v *time.Time) *NameLogUpdateOne {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// ClearTime clears the value of the "time" field.
func (_u *NameLogUpdateOne) ClearTime() *NameLogUpdateOne {
	_u.mutation.ClearTime()
	return _u
}

// SetResult sets the "result" field.
func (_u *NameLogUpdateOne) SetResult(v string) *NameLogUpdateOne {
	_u.mutation.SetResult(v)
	return _u
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_u *NameLogUpdateOne) SetNillableResult(v *string) *NameLogUpdateOne {
	if v != nil {
		_u.SetResult(*v)
	}
	return _u
}

// ClearResult clears the value of the "result" field.
func (_u *NameLogUpdateOne) ClearResult() *NameLogUpdateOne {
	_u.mutation.ClearResult()
	return _u
}

// Mutation returns the NameLogMutation object of the builder.
func (_u *NameLogUpdateOne) Mutation() *NameLogMutation {
	return _u.mutation
}

// Where appends a list predicates to the NameLogUpdate builder.
func (_u *NameLogUpdateOne) Where(ps ...predicate.NameLog) *NameLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NameLogUpdateOne) Select(field string, fields ...string) *NameLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NameLog entity.
func (_u *NameLogUpdateOne) Save(ctx context.Context) (*NameLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NameLogUpdateOne) SaveX(ctx context.Context) *NameLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NameLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NameLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NameLogUpdateOne) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := namelog.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`censor: validator failed for field "NameLog.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := namelog.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`censor: validator failed for field "NameLog.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ImUserID(); ok {
		if err := namelog.ImUserIDValidator(v); err != nil {
			return &ValidationError{Name: "im_user_id", err: fmt.Errorf(`censor: validator failed for field "NameLog.im_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Result(); ok {
		if err := namelog.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`censor: validator failed for field "NameLog.result": %w`, err)}
		}
	}
	return nil
}

func (_u *NameLogUpdateOne) sqlSave(ctx context.Context) (_node *NameLog, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(namelog.Table, namelog.Columns, sqlgraph.NewFieldSpec(namelog.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`censor: missing "NameLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, namelog.FieldID)
		for _, f := range fields {
			if !namelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("censor: invalid field %q for query", f)}
			}
			if f != namelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(namelog.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(namelog.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(namelog.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(namelog.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.ImUserID(); ok {
		_spec.SetField(namelog.FieldImUserID, field.TypeString, value)
	}
	if _u.mutation.ImUserIDCleared() {
		_spec.ClearField(namelog.FieldImUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(namelog.FieldTime, field.TypeTime, value)
	}
	if _u.mutation.TimeCleared() {
		_spec.ClearField(namelog.FieldTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(namelog.FieldResult, field.TypeString, value)
	}
	if _u.mutation.ResultCleared() {
		_spec.ClearField(namelog.FieldResult, field.TypeString)
	}
	_node = &NameLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
