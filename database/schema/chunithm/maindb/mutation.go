// Code generated by ent, DO NOT EDIT.

package maindb

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/maindb/chunithmbinding"
	"haruki-database/database/schema/chunithm/maindb/chunithmdefaultserver"
	"haruki-database/database/schema/chunithm/maindb/chunithmmusicalias"
	"haruki-database/database/schema/chunithm/maindb/predicate"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChunithmBinding       = "ChunithmBinding"
	TypeChunithmDefaultServer = "ChunithmDefaultServer"
	TypeChunithmMusicAlias    = "ChunithmMusicAlias"
)

// ChunithmBindingMutation represents an operation that mutates the ChunithmBinding nodes in the graph.
type ChunithmBindingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	im_id         *string
	platform      *string
	server        *string
	aime_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ChunithmBinding, error)
	predicates    []predicate.ChunithmBinding
}

var _ ent.Mutation = (*ChunithmBindingMutation)(nil)

// chunithmbindingOption allows management of the mutation configuration using functional options.
type chunithmbindingOption func(*ChunithmBindingMutation)

// newChunithmBindingMutation creates new mutation for the ChunithmBinding entity.
func newChunithmBindingMutation(c config, op Op, opts ...chunithmbindingOption) *ChunithmBindingMutation {
	m := &ChunithmBindingMutation{
		config:        c,
		op:            op,
		typ:           TypeChunithmBinding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChunithmBindingID sets the ID field of the mutation.
func withChunithmBindingID(id int) chunithmbindingOption {
	return func(m *ChunithmBindingMutation) {
		var (
			err   error
			once  sync.Once
			value *ChunithmBinding
		)
		m.oldValue = func(ctx context.Context) (*ChunithmBinding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChunithmBinding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChunithmBinding sets the old ChunithmBinding of the mutation.
func withChunithmBinding(node *ChunithmBinding) chunithmbindingOption {
	return func(m *ChunithmBindingMutation) {
		m.oldValue = func(context.Context) (*ChunithmBinding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChunithmBindingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChunithmBindingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("maindb: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChunithmBindingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChunithmBindingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChunithmBinding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetImID sets the "im_id" field.
func (m *ChunithmBindingMutation) SetImID(s string) {
	m.im_id = &s
}

// ImID returns the value of the "im_id" field in the mutation.
func (m *ChunithmBindingMutation) ImID() (r string, exists bool) {
	v := m.im_id
	if v == nil {
		return
	}
	return *v, true
}

// OldImID returns the old "im_id" field's value of the ChunithmBinding entity.
// If the ChunithmBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmBindingMutation) OldImID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImID: %w", err)
	}
	return oldValue.ImID, nil
}

// ResetImID resets all changes to the "im_id" field.
func (m *ChunithmBindingMutation) ResetImID() {
	m.im_id = nil
}

// SetPlatform sets the "platform" field.
func (m *ChunithmBindingMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *ChunithmBindingMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the ChunithmBinding entity.
// If the ChunithmBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmBindingMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *ChunithmBindingMutation) ResetPlatform() {
	m.platform = nil
}

// SetServer sets the "server" field.
func (m *ChunithmBindingMutation) SetServer(s string) {
	m.server = &s
}

// Server returns the value of the "server" field in the mutation.
func (m *ChunithmBindingMutation) Server() (r string, exists bool) {
	v := m.server
	if v == nil {
		return
	}
	return *v, true
}

// OldServer returns the old "server" field's value of the ChunithmBinding entity.
// If the ChunithmBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmBindingMutation) OldServer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServer: %w", err)
	}
	return oldValue.Server, nil
}

// ResetServer resets all changes to the "server" field.
func (m *ChunithmBindingMutation) ResetServer() {
	m.server = nil
}

// SetAimeID sets the "aime_id" field.
func (m *ChunithmBindingMutation) SetAimeID(s string) {
	m.aime_id = &s
}

// AimeID returns the value of the "aime_id" field in the mutation.
func (m *ChunithmBindingMutation) AimeID() (r string, exists bool) {
	v := m.aime_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAimeID returns the old "aime_id" field's value of the ChunithmBinding entity.
// If the ChunithmBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmBindingMutation) OldAimeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAimeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAimeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAimeID: %w", err)
	}
	return oldValue.AimeID, nil
}

// ResetAimeID resets all changes to the "aime_id" field.
func (m *ChunithmBindingMutation) ResetAimeID() {
	m.aime_id = nil
}

// Where appends a list predicates to the ChunithmBindingMutation builder.
func (m *ChunithmBindingMutation) Where(ps ...predicate.ChunithmBinding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChunithmBindingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChunithmBindingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChunithmBinding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChunithmBindingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChunithmBindingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChunithmBinding).
func (m *ChunithmBindingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChunithmBindingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.im_id != nil {
		fields = append(fields, chunithmbinding.FieldImID)
	}
	if m.platform != nil {
		fields = append(fields, chunithmbinding.FieldPlatform)
	}
	if m.server != nil {
		fields = append(fields, chunithmbinding.FieldServer)
	}
	if m.aime_id != nil {
		fields = append(fields, chunithmbinding.FieldAimeID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChunithmBindingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chunithmbinding.FieldImID:
		return m.ImID()
	case chunithmbinding.FieldPlatform:
		return m.Platform()
	case chunithmbinding.FieldServer:
		return m.Server()
	case chunithmbinding.FieldAimeID:
		return m.AimeID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChunithmBindingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chunithmbinding.FieldImID:
		return m.OldImID(ctx)
	case chunithmbinding.FieldPlatform:
		return m.OldPlatform(ctx)
	case chunithmbinding.FieldServer:
		return m.OldServer(ctx)
	case chunithmbinding.FieldAimeID:
		return m.OldAimeID(ctx)
	}
	return nil, fmt.Errorf("unknown ChunithmBinding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunithmBindingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chunithmbinding.FieldImID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImID(v)
		return nil
	case chunithmbinding.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case chunithmbinding.FieldServer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServer(v)
		return nil
	case chunithmbinding.FieldAimeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAimeID(v)
		return nil
	}
	return fmt.Errorf("unknown ChunithmBinding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChunithmBindingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChunithmBindingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunithmBindingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChunithmBinding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChunithmBindingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChunithmBindingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChunithmBindingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChunithmBinding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChunithmBindingMutation) ResetField(name string) error {
	switch name {
	case chunithmbinding.FieldImID:
		m.ResetImID()
		return nil
	case chunithmbinding.FieldPlatform:
		m.ResetPlatform()
		return nil
	case chunithmbinding.FieldServer:
		m.ResetServer()
		return nil
	case chunithmbinding.FieldAimeID:
		m.ResetAimeID()
		return nil
	}
	return fmt.Errorf("unknown ChunithmBinding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChunithmBindingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChunithmBindingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChunithmBindingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChunithmBindingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChunithmBindingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChunithmBindingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChunithmBindingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChunithmBinding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChunithmBindingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChunithmBinding edge %s", name)
}

// ChunithmDefaultServerMutation represents an operation that mutates the ChunithmDefaultServer nodes in the graph.
type ChunithmDefaultServerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	im_id         *string
	platform      *string
	server        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ChunithmDefaultServer, error)
	predicates    []predicate.ChunithmDefaultServer
}

var _ ent.Mutation = (*ChunithmDefaultServerMutation)(nil)

// chunithmdefaultserverOption allows management of the mutation configuration using functional options.
type chunithmdefaultserverOption func(*ChunithmDefaultServerMutation)

// newChunithmDefaultServerMutation creates new mutation for the ChunithmDefaultServer entity.
func newChunithmDefaultServerMutation(c config, op Op, opts ...chunithmdefaultserverOption) *ChunithmDefaultServerMutation {
	m := &ChunithmDefaultServerMutation{
		config:        c,
		op:            op,
		typ:           TypeChunithmDefaultServer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChunithmDefaultServerID sets the ID field of the mutation.
func withChunithmDefaultServerID(id int) chunithmdefaultserverOption {
	return func(m *ChunithmDefaultServerMutation) {
		var (
			err   error
			once  sync.Once
			value *ChunithmDefaultServer
		)
		m.oldValue = func(ctx context.Context) (*ChunithmDefaultServer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChunithmDefaultServer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChunithmDefaultServer sets the old ChunithmDefaultServer of the mutation.
func withChunithmDefaultServer(node *ChunithmDefaultServer) chunithmdefaultserverOption {
	return func(m *ChunithmDefaultServerMutation) {
		m.oldValue = func(context.Context) (*ChunithmDefaultServer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChunithmDefaultServerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChunithmDefaultServerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("maindb: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChunithmDefaultServerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChunithmDefaultServerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChunithmDefaultServer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetImID sets the "im_id" field.
func (m *ChunithmDefaultServerMutation) SetImID(s string) {
	m.im_id = &s
}

// ImID returns the value of the "im_id" field in the mutation.
func (m *ChunithmDefaultServerMutation) ImID() (r string, exists bool) {
	v := m.im_id
	if v == nil {
		return
	}
	return *v, true
}

// OldImID returns the old "im_id" field's value of the ChunithmDefaultServer entity.
// If the ChunithmDefaultServer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmDefaultServerMutation) OldImID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImID: %w", err)
	}
	return oldValue.ImID, nil
}

// ResetImID resets all changes to the "im_id" field.
func (m *ChunithmDefaultServerMutation) ResetImID() {
	m.im_id = nil
}

// SetPlatform sets the "platform" field.
func (m *ChunithmDefaultServerMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *ChunithmDefaultServerMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the ChunithmDefaultServer entity.
// If the ChunithmDefaultServer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmDefaultServerMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *ChunithmDefaultServerMutation) ResetPlatform() {
	m.platform = nil
}

// SetServer sets the "server" field.
func (m *ChunithmDefaultServerMutation) SetServer(s string) {
	m.server = &s
}

// Server returns the value of the "server" field in the mutation.
func (m *ChunithmDefaultServerMutation) Server() (r string, exists bool) {
	v := m.server
	if v == nil {
		return
	}
	return *v, true
}

// OldServer returns the old "server" field's value of the ChunithmDefaultServer entity.
// If the ChunithmDefaultServer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmDefaultServerMutation) OldServer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServer: %w", err)
	}
	return oldValue.Server, nil
}

// ResetServer resets all changes to the "server" field.
func (m *ChunithmDefaultServerMutation) ResetServer() {
	m.server = nil
}

// Where appends a list predicates to the ChunithmDefaultServerMutation builder.
func (m *ChunithmDefaultServerMutation) Where(ps ...predicate.ChunithmDefaultServer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChunithmDefaultServerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChunithmDefaultServerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChunithmDefaultServer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChunithmDefaultServerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChunithmDefaultServerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChunithmDefaultServer).
func (m *ChunithmDefaultServerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChunithmDefaultServerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.im_id != nil {
		fields = append(fields, chunithmdefaultserver.FieldImID)
	}
	if m.platform != nil {
		fields = append(fields, chunithmdefaultserver.FieldPlatform)
	}
	if m.server != nil {
		fields = append(fields, chunithmdefaultserver.FieldServer)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChunithmDefaultServerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chunithmdefaultserver.FieldImID:
		return m.ImID()
	case chunithmdefaultserver.FieldPlatform:
		return m.Platform()
	case chunithmdefaultserver.FieldServer:
		return m.Server()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChunithmDefaultServerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chunithmdefaultserver.FieldImID:
		return m.OldImID(ctx)
	case chunithmdefaultserver.FieldPlatform:
		return m.OldPlatform(ctx)
	case chunithmdefaultserver.FieldServer:
		return m.OldServer(ctx)
	}
	return nil, fmt.Errorf("unknown ChunithmDefaultServer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunithmDefaultServerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chunithmdefaultserver.FieldImID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImID(v)
		return nil
	case chunithmdefaultserver.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case chunithmdefaultserver.FieldServer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServer(v)
		return nil
	}
	return fmt.Errorf("unknown ChunithmDefaultServer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChunithmDefaultServerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChunithmDefaultServerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunithmDefaultServerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChunithmDefaultServer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChunithmDefaultServerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChunithmDefaultServerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChunithmDefaultServerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChunithmDefaultServer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChunithmDefaultServerMutation) ResetField(name string) error {
	switch name {
	case chunithmdefaultserver.FieldImID:
		m.ResetImID()
		return nil
	case chunithmdefaultserver.FieldPlatform:
		m.ResetPlatform()
		return nil
	case chunithmdefaultserver.FieldServer:
		m.ResetServer()
		return nil
	}
	return fmt.Errorf("unknown ChunithmDefaultServer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChunithmDefaultServerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChunithmDefaultServerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChunithmDefaultServerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChunithmDefaultServerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChunithmDefaultServerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChunithmDefaultServerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChunithmDefaultServerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChunithmDefaultServer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChunithmDefaultServerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChunithmDefaultServer edge %s", name)
}

// ChunithmMusicAliasMutation represents an operation that mutates the ChunithmMusicAlias nodes in the graph.
type ChunithmMusicAliasMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	music_id      *int
	addmusic_id   *int
	alias         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ChunithmMusicAlias, error)
	predicates    []predicate.ChunithmMusicAlias
}

var _ ent.Mutation = (*ChunithmMusicAliasMutation)(nil)

// chunithmmusicaliasOption allows management of the mutation configuration using functional options.
type chunithmmusicaliasOption func(*ChunithmMusicAliasMutation)

// newChunithmMusicAliasMutation creates new mutation for the ChunithmMusicAlias entity.
func newChunithmMusicAliasMutation(c config, op Op, opts ...chunithmmusicaliasOption) *ChunithmMusicAliasMutation {
	m := &ChunithmMusicAliasMutation{
		config:        c,
		op:            op,
		typ:           TypeChunithmMusicAlias,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChunithmMusicAliasID sets the ID field of the mutation.
func withChunithmMusicAliasID(id int64) chunithmmusicaliasOption {
	return func(m *ChunithmMusicAliasMutation) {
		var (
			err   error
			once  sync.Once
			value *ChunithmMusicAlias
		)
		m.oldValue = func(ctx context.Context) (*ChunithmMusicAlias, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChunithmMusicAlias.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChunithmMusicAlias sets the old ChunithmMusicAlias of the mutation.
func withChunithmMusicAlias(node *ChunithmMusicAlias) chunithmmusicaliasOption {
	return func(m *ChunithmMusicAliasMutation) {
		m.oldValue = func(context.Context) (*ChunithmMusicAlias, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChunithmMusicAliasMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChunithmMusicAliasMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("maindb: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChunithmMusicAlias entities.
func (m *ChunithmMusicAliasMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChunithmMusicAliasMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChunithmMusicAliasMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChunithmMusicAlias.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMusicID sets the "music_id" field.
func (m *ChunithmMusicAliasMutation) SetMusicID(i int) {
	m.music_id = &i
	m.addmusic_id = nil
}

// MusicID returns the value of the "music_id" field in the mutation.
func (m *ChunithmMusicAliasMutation) MusicID() (r int, exists bool) {
	v := m.music_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMusicID returns the old "music_id" field's value of the ChunithmMusicAlias entity.
// If the ChunithmMusicAlias object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmMusicAliasMutation) OldMusicID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMusicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMusicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMusicID: %w", err)
	}
	return oldValue.MusicID, nil
}

// AddMusicID adds i to the "music_id" field.
func (m *ChunithmMusicAliasMutation) AddMusicID(i int) {
	if m.addmusic_id != nil {
		*m.addmusic_id += i
	} else {
		m.addmusic_id = &i
	}
}

// AddedMusicID returns the value that was added to the "music_id" field in this mutation.
func (m *ChunithmMusicAliasMutation) AddedMusicID() (r int, exists bool) {
	v := m.addmusic_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMusicID resets all changes to the "music_id" field.
func (m *ChunithmMusicAliasMutation) ResetMusicID() {
	m.music_id = nil
	m.addmusic_id = nil
}

// SetAlias sets the "alias" field.
func (m *ChunithmMusicAliasMutation) SetAlias(s string) {
	m.alias = &s
}

// Alias returns the value of the "alias" field in the mutation.
func (m *ChunithmMusicAliasMutation) Alias() (r string, exists bool) {
	v := m.alias
	if v == nil {
		return
	}
	return *v, true
}

// OldAlias returns the old "alias" field's value of the ChunithmMusicAlias entity.
// If the ChunithmMusicAlias object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunithmMusicAliasMutation) OldAlias(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlias is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlias requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlias: %w", err)
	}
	return oldValue.Alias, nil
}

// ResetAlias resets all changes to the "alias" field.
func (m *ChunithmMusicAliasMutation) ResetAlias() {
	m.alias = nil
}

// Where appends a list predicates to the ChunithmMusicAliasMutation builder.
func (m *ChunithmMusicAliasMutation) Where(ps ...predicate.ChunithmMusicAlias) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChunithmMusicAliasMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChunithmMusicAliasMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChunithmMusicAlias, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChunithmMusicAliasMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChunithmMusicAliasMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChunithmMusicAlias).
func (m *ChunithmMusicAliasMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChunithmMusicAliasMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.music_id != nil {
		fields = append(fields, chunithmmusicalias.FieldMusicID)
	}
	if m.alias != nil {
		fields = append(fields, chunithmmusicalias.FieldAlias)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChunithmMusicAliasMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chunithmmusicalias.FieldMusicID:
		return m.MusicID()
	case chunithmmusicalias.FieldAlias:
		return m.Alias()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChunithmMusicAliasMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chunithmmusicalias.FieldMusicID:
		return m.OldMusicID(ctx)
	case chunithmmusicalias.FieldAlias:
		return m.OldAlias(ctx)
	}
	return nil, fmt.Errorf("unknown ChunithmMusicAlias field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunithmMusicAliasMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chunithmmusicalias.FieldMusicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMusicID(v)
		return nil
	case chunithmmusicalias.FieldAlias:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlias(v)
		return nil
	}
	return fmt.Errorf("unknown ChunithmMusicAlias field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChunithmMusicAliasMutation) AddedFields() []string {
	var fields []string
	if m.addmusic_id != nil {
		fields = append(fields, chunithmmusicalias.FieldMusicID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChunithmMusicAliasMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chunithmmusicalias.FieldMusicID:
		return m.AddedMusicID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunithmMusicAliasMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chunithmmusicalias.FieldMusicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMusicID(v)
		return nil
	}
	return fmt.Errorf("unknown ChunithmMusicAlias numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChunithmMusicAliasMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChunithmMusicAliasMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChunithmMusicAliasMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChunithmMusicAlias nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChunithmMusicAliasMutation) ResetField(name string) error {
	switch name {
	case chunithmmusicalias.FieldMusicID:
		m.ResetMusicID()
		return nil
	case chunithmmusicalias.FieldAlias:
		m.ResetAlias()
		return nil
	}
	return fmt.Errorf("unknown ChunithmMusicAlias field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChunithmMusicAliasMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChunithmMusicAliasMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChunithmMusicAliasMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChunithmMusicAliasMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChunithmMusicAliasMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChunithmMusicAliasMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChunithmMusicAliasMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChunithmMusicAlias unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChunithmMusicAliasMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChunithmMusicAlias edge %s", name)
}
