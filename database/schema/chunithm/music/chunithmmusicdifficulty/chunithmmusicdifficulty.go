// Code generated by ent, DO NOT EDIT.

package chunithmmusicdifficulty

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chunithmmusicdifficulty type in the database.
	Label = "chunithm_music_difficulty"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMusicID holds the string denoting the music_id field in the database.
	FieldMusicID = "music_id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDiff0Const holds the string denoting the diff0_const field in the database.
	FieldDiff0Const = "diff0_const"
	// FieldDiff1Const holds the string denoting the diff1_const field in the database.
	FieldDiff1Const = "diff1_const"
	// FieldDiff2Const holds the string denoting the diff2_const field in the database.
	FieldDiff2Const = "diff2_const"
	// FieldDiff3Const holds the string denoting the diff3_const field in the database.
	FieldDiff3Const = "diff3_const"
	// FieldDiff4Const holds the string denoting the diff4_const field in the database.
	FieldDiff4Const = "diff4_const"
	// Table holds the table name of the chunithmmusicdifficulty in the database.
	Table = "chunithm_music_difficulties"
)

// Columns holds all SQL columns for chunithmmusicdifficulty fields.
var Columns = []string{
	FieldID,
	FieldMusicID,
	FieldVersion,
	FieldDiff0Const,
	FieldDiff1Const,
	FieldDiff2Const,
	FieldDiff3Const,
	FieldDiff4Const,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(string) error
)

// OrderOption defines the ordering options for the ChunithmMusicDifficulty queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMusicID orders the results by the music_id field.
func ByMusicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMusicID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByDiff0Const orders the results by the diff0_const field.
func ByDiff0Const(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiff0Const, opts...).ToFunc()
}

// ByDiff1Const orders the results by the diff1_const field.
func ByDiff1Const(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiff1Const, opts...).ToFunc()
}

// ByDiff2Const orders the results by the diff2_const field.
func ByDiff2Const(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiff2Const, opts...).ToFunc()
}

// ByDiff3Const orders the results by the diff3_const field.
func ByDiff3Const(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiff3Const, opts...).ToFunc()
}

// ByDiff4Const orders the results by the diff4_const field.
func ByDiff4Const(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiff4Const, opts...).ToFunc()
}
