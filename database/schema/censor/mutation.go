// Code generated by ent, DO NOT EDIT.

package censor

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/censor/namelog"
	"haruki-database/database/schema/censor/predicate"
	"haruki-database/database/schema/censor/result"
	"haruki-database/database/schema/censor/shortbio"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNameLog  = "NameLog"
	TypeResult   = "Result"
	TypeShortBio = "ShortBio"
)

// NameLogMutation represents an operation that mutates the NameLog nodes in the graph.
type NameLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_id       *string
	name          *string
	im_user_id    *string
	time          *time.Time
	result        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NameLog, error)
	predicates    []predicate.NameLog
}

var _ ent.Mutation = (*NameLogMutation)(nil)

// namelogOption allows management of the mutation configuration using functional options.
type namelogOption func(*NameLogMutation)

// newNameLogMutation creates new mutation for the NameLog entity.
func newNameLogMutation(c config, op Op, opts ...namelogOption) *NameLogMutation {
	m := &NameLogMutation{
		config:        c,
		op:            op,
		typ:           TypeNameLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNameLogID sets the ID field of the mutation.
func withNameLogID(id int) namelogOption {
	return func(m *NameLogMutation) {
		var (
			err   error
			once  sync.Once
			value *NameLog
		)
		m.oldValue = func(ctx context.Context) (*NameLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NameLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNameLog sets the old NameLog of the mutation.
func withNameLog(node *NameLog) namelogOption {
	return func(m *NameLogMutation) {
		m.oldValue = func(context.Context) (*NameLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NameLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NameLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("censor: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NameLog entities.
func (m *NameLogMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NameLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NameLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NameLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *NameLogMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *NameLogMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the NameLog entity.
// If the NameLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameLogMutation) OldUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *NameLogMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[namelog.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *NameLogMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[namelog.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *NameLogMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, namelog.FieldUserID)
}

// SetName sets the "name" field.
func (m *NameLogMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NameLogMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the NameLog entity.
// If the NameLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameLogMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *NameLogMutation) ClearName() {
	m.name = nil
	m.clearedFields[namelog.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *NameLogMutation) NameCleared() bool {
	_, ok := m.clearedFields[namelog.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *NameLogMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, namelog.FieldName)
}

// SetImUserID sets the "im_user_id" field.
func (m *NameLogMutation) SetImUserID(s string) {
	m.im_user_id = &s
}

// ImUserID returns the value of the "im_user_id" field in the mutation.
func (m *NameLogMutation) ImUserID() (r string, exists bool) {
	v := m.im_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldImUserID returns the old "im_user_id" field's value of the NameLog entity.
// If the NameLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameLogMutation) OldImUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImUserID: %w", err)
	}
	return oldValue.ImUserID, nil
}

// ClearImUserID clears the value of the "im_user_id" field.
func (m *NameLogMutation) ClearImUserID() {
	m.im_user_id = nil
	m.clearedFields[namelog.FieldImUserID] = struct{}{}
}

// ImUserIDCleared returns if the "im_user_id" field was cleared in this mutation.
func (m *NameLogMutation) ImUserIDCleared() bool {
	_, ok := m.clearedFields[namelog.FieldImUserID]
	return ok
}

// ResetImUserID resets all changes to the "im_user_id" field.
func (m *NameLogMutation) ResetImUserID() {
	m.im_user_id = nil
	delete(m.clearedFields, namelog.FieldImUserID)
}

// SetTime sets the "time" field.
func (m *NameLogMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *NameLogMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the NameLog entity.
// If the NameLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameLogMutation) OldTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ClearTime clears the value of the "time" field.
func (m *NameLogMutation) ClearTime() {
	m.time = nil
	m.clearedFields[namelog.FieldTime] = struct{}{}
}

// TimeCleared returns if the "time" field was cleared in this mutation.
func (m *NameLogMutation) TimeCleared() bool {
	_, ok := m.clearedFields[namelog.FieldTime]
	return ok
}

// ResetTime resets all changes to the "time" field.
func (m *NameLogMutation) ResetTime() {
	m.time = nil
	delete(m.clearedFields, namelog.FieldTime)
}

// SetResult sets the "result" field.
func (m *NameLogMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the value of the "result" field in the mutation.
func (m *NameLogMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the NameLog entity.
// If the NameLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameLogMutation) OldResult(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ClearResult clears the value of the "result" field.
func (m *NameLogMutation) ClearResult() {
	m.result = nil
	m.clearedFields[namelog.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *NameLogMutation) ResultCleared() bool {
	_, ok := m.clearedFields[namelog.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *NameLogMutation) ResetResult() {
	m.result = nil
	delete(m.clearedFields, namelog.FieldResult)
}

// Where appends a list predicates to the NameLogMutation builder.
func (m *NameLogMutation) Where(ps ...predicate.NameLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NameLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NameLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NameLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NameLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NameLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NameLog).
func (m *NameLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NameLogMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user_id != nil {
		fields = append(fields, namelog.FieldUserID)
	}
	if m.name != nil {
		fields = append(fields, namelog.FieldName)
	}
	if m.im_user_id != nil {
		fields = append(fields, namelog.FieldImUserID)
	}
	if m.time != nil {
		fields = append(fields, namelog.FieldTime)
	}
	if m.result != nil {
		fields = append(fields, namelog.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NameLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case namelog.FieldUserID:
		return m.UserID()
	case namelog.FieldName:
		return m.Name()
	case namelog.FieldImUserID:
		return m.ImUserID()
	case namelog.FieldTime:
		return m.Time()
	case namelog.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NameLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case namelog.FieldUserID:
		return m.OldUserID(ctx)
	case namelog.FieldName:
		return m.OldName(ctx)
	case namelog.FieldImUserID:
		return m.OldImUserID(ctx)
	case namelog.FieldTime:
		return m.OldTime(ctx)
	case namelog.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown NameLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NameLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case namelog.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case namelog.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case namelog.FieldImUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImUserID(v)
		return nil
	case namelog.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case namelog.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown NameLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NameLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NameLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NameLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NameLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NameLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(namelog.FieldUserID) {
		fields = append(fields, namelog.FieldUserID)
	}
	if m.FieldCleared(namelog.FieldName) {
		fields = append(fields, namelog.FieldName)
	}
	if m.FieldCleared(namelog.FieldImUserID) {
		fields = append(fields, namelog.FieldImUserID)
	}
	if m.FieldCleared(namelog.FieldTime) {
		fields = append(fields, namelog.FieldTime)
	}
	if m.FieldCleared(namelog.FieldResult) {
		fields = append(fields, namelog.FieldResult)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NameLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NameLogMutation) ClearField(name string) error {
	switch name {
	case namelog.FieldUserID:
		m.ClearUserID()
		return nil
	case namelog.FieldName:
		m.ClearName()
		return nil
	case namelog.FieldImUserID:
		m.ClearImUserID()
		return nil
	case namelog.FieldTime:
		m.ClearTime()
		return nil
	case namelog.FieldResult:
		m.ClearResult()
		return nil
	}
	return fmt.Errorf("unknown NameLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NameLogMutation) ResetField(name string) error {
	switch name {
	case namelog.FieldUserID:
		m.ResetUserID()
		return nil
	case namelog.FieldName:
		m.ResetName()
		return nil
	case namelog.FieldImUserID:
		m.ResetImUserID()
		return nil
	case namelog.FieldTime:
		m.ResetTime()
		return nil
	case namelog.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown NameLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NameLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NameLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NameLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NameLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NameLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NameLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NameLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NameLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NameLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NameLog edge %s", name)
}

// ResultMutation represents an operation that mutates the Result nodes in the graph.
type ResultMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	result        *int
	addresult     *int
	time          *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Result, error)
	predicates    []predicate.Result
}

var _ ent.Mutation = (*ResultMutation)(nil)

// resultOption allows management of the mutation configuration using functional options.
type resultOption func(*ResultMutation)

// newResultMutation creates new mutation for the Result entity.
func newResultMutation(c config, op Op, opts ...resultOption) *ResultMutation {
	m := &ResultMutation{
		config:        c,
		op:            op,
		typ:           TypeResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResultID sets the ID field of the mutation.
func withResultID(id int) resultOption {
	return func(m *ResultMutation) {
		var (
			err   error
			once  sync.Once
			value *Result
		)
		m.oldValue = func(ctx context.Context) (*Result, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Result.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResult sets the old Result of the mutation.
func withResult(node *Result) resultOption {
	return func(m *ResultMutation) {
		m.oldValue = func(context.Context) (*Result, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("censor: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Result entities.
func (m *ResultMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Result.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ResultMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ResultMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ResultMutation) ResetName() {
	m.name = nil
}

// SetResult sets the "result" field.
func (m *ResultMutation) SetResult(i int) {
	m.result = &i
	m.addresult = nil
}

// Result returns the value of the "result" field in the mutation.
func (m *ResultMutation) Result() (r int, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldResult(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// AddResult adds i to the "result" field.
func (m *ResultMutation) AddResult(i int) {
	if m.addresult != nil {
		*m.addresult += i
	} else {
		m.addresult = &i
	}
}

// AddedResult returns the value that was added to the "result" field in this mutation.
func (m *ResultMutation) AddedResult() (r int, exists bool) {
	v := m.addresult
	if v == nil {
		return
	}
	return *v, true
}

// ClearResult clears the value of the "result" field.
func (m *ResultMutation) ClearResult() {
	m.result = nil
	m.addresult = nil
	m.clearedFields[result.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *ResultMutation) ResultCleared() bool {
	_, ok := m.clearedFields[result.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *ResultMutation) ResetResult() {
	m.result = nil
	m.addresult = nil
	delete(m.clearedFields, result.FieldResult)
}

// SetTime sets the "time" field.
func (m *ResultMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *ResultMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ClearTime clears the value of the "time" field.
func (m *ResultMutation) ClearTime() {
	m.time = nil
	m.clearedFields[result.FieldTime] = struct{}{}
}

// TimeCleared returns if the "time" field was cleared in this mutation.
func (m *ResultMutation) TimeCleared() bool {
	_, ok := m.clearedFields[result.FieldTime]
	return ok
}

// ResetTime resets all changes to the "time" field.
func (m *ResultMutation) ResetTime() {
	m.time = nil
	delete(m.clearedFields, result.FieldTime)
}

// Where appends a list predicates to the ResultMutation builder.
func (m *ResultMutation) Where(ps ...predicate.Result) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Result, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Result).
func (m *ResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResultMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, result.FieldName)
	}
	if m.result != nil {
		fields = append(fields, result.FieldResult)
	}
	if m.time != nil {
		fields = append(fields, result.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case result.FieldName:
		return m.Name()
	case result.FieldResult:
		return m.Result()
	case result.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case result.FieldName:
		return m.OldName(ctx)
	case result.FieldResult:
		return m.OldResult(ctx)
	case result.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown Result field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case result.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case result.FieldResult:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case result.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown Result field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResultMutation) AddedFields() []string {
	var fields []string
	if m.addresult != nil {
		fields = append(fields, result.FieldResult)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case result.FieldResult:
		return m.AddedResult()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case result.FieldResult:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddResult(v)
		return nil
	}
	return fmt.Errorf("unknown Result numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(result.FieldResult) {
		fields = append(fields, result.FieldResult)
	}
	if m.FieldCleared(result.FieldTime) {
		fields = append(fields, result.FieldTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResultMutation) ClearField(name string) error {
	switch name {
	case result.FieldResult:
		m.ClearResult()
		return nil
	case result.FieldTime:
		m.ClearTime()
		return nil
	}
	return fmt.Errorf("unknown Result nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResultMutation) ResetField(name string) error {
	switch name {
	case result.FieldName:
		m.ResetName()
		return nil
	case result.FieldResult:
		m.ResetResult()
		return nil
	case result.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown Result field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Result unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Result edge %s", name)
}

// ShortBioMutation represents an operation that mutates the ShortBio nodes in the graph.
type ShortBioMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_id       *string
	content       *string
	im_user_id    *string
	result        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ShortBio, error)
	predicates    []predicate.ShortBio
}

var _ ent.Mutation = (*ShortBioMutation)(nil)

// shortbioOption allows management of the mutation configuration using functional options.
type shortbioOption func(*ShortBioMutation)

// newShortBioMutation creates new mutation for the ShortBio entity.
func newShortBioMutation(c config, op Op, opts ...shortbioOption) *ShortBioMutation {
	m := &ShortBioMutation{
		config:        c,
		op:            op,
		typ:           TypeShortBio,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShortBioID sets the ID field of the mutation.
func withShortBioID(id int) shortbioOption {
	return func(m *ShortBioMutation) {
		var (
			err   error
			once  sync.Once
			value *ShortBio
		)
		m.oldValue = func(ctx context.Context) (*ShortBio, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShortBio.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShortBio sets the old ShortBio of the mutation.
func withShortBio(node *ShortBio) shortbioOption {
	return func(m *ShortBioMutation) {
		m.oldValue = func(context.Context) (*ShortBio, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShortBioMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShortBioMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("censor: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ShortBio entities.
func (m *ShortBioMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShortBioMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShortBioMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShortBio.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ShortBioMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ShortBioMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ShortBio entity.
// If the ShortBio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShortBioMutation) OldUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ShortBioMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[shortbio.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ShortBioMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[shortbio.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ShortBioMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, shortbio.FieldUserID)
}

// SetContent sets the "content" field.
func (m *ShortBioMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ShortBioMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the ShortBio entity.
// If the ShortBio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShortBioMutation) OldContent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *ShortBioMutation) ClearContent() {
	m.content = nil
	m.clearedFields[shortbio.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *ShortBioMutation) ContentCleared() bool {
	_, ok := m.clearedFields[shortbio.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *ShortBioMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, shortbio.FieldContent)
}

// SetImUserID sets the "im_user_id" field.
func (m *ShortBioMutation) SetImUserID(s string) {
	m.im_user_id = &s
}

// ImUserID returns the value of the "im_user_id" field in the mutation.
func (m *ShortBioMutation) ImUserID() (r string, exists bool) {
	v := m.im_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldImUserID returns the old "im_user_id" field's value of the ShortBio entity.
// If the ShortBio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShortBioMutation) OldImUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImUserID: %w", err)
	}
	return oldValue.ImUserID, nil
}

// ClearImUserID clears the value of the "im_user_id" field.
func (m *ShortBioMutation) ClearImUserID() {
	m.im_user_id = nil
	m.clearedFields[shortbio.FieldImUserID] = struct{}{}
}

// ImUserIDCleared returns if the "im_user_id" field was cleared in this mutation.
func (m *ShortBioMutation) ImUserIDCleared() bool {
	_, ok := m.clearedFields[shortbio.FieldImUserID]
	return ok
}

// ResetImUserID resets all changes to the "im_user_id" field.
func (m *ShortBioMutation) ResetImUserID() {
	m.im_user_id = nil
	delete(m.clearedFields, shortbio.FieldImUserID)
}

// SetResult sets the "result" field.
func (m *ShortBioMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the value of the "result" field in the mutation.
func (m *ShortBioMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the ShortBio entity.
// If the ShortBio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShortBioMutation) OldResult(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ClearResult clears the value of the "result" field.
func (m *ShortBioMutation) ClearResult() {
	m.result = nil
	m.clearedFields[shortbio.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *ShortBioMutation) ResultCleared() bool {
	_, ok := m.clearedFields[shortbio.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *ShortBioMutation) ResetResult() {
	m.result = nil
	delete(m.clearedFields, shortbio.FieldResult)
}

// Where appends a list predicates to the ShortBioMutation builder.
func (m *ShortBioMutation) Where(ps ...predicate.ShortBio) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShortBioMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShortBioMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShortBio, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShortBioMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShortBioMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShortBio).
func (m *ShortBioMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShortBioMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_id != nil {
		fields = append(fields, shortbio.FieldUserID)
	}
	if m.content != nil {
		fields = append(fields, shortbio.FieldContent)
	}
	if m.im_user_id != nil {
		fields = append(fields, shortbio.FieldImUserID)
	}
	if m.result != nil {
		fields = append(fields, shortbio.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShortBioMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shortbio.FieldUserID:
		return m.UserID()
	case shortbio.FieldContent:
		return m.Content()
	case shortbio.FieldImUserID:
		return m.ImUserID()
	case shortbio.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShortBioMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shortbio.FieldUserID:
		return m.OldUserID(ctx)
	case shortbio.FieldContent:
		return m.OldContent(ctx)
	case shortbio.FieldImUserID:
		return m.OldImUserID(ctx)
	case shortbio.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown ShortBio field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShortBioMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shortbio.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case shortbio.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case shortbio.FieldImUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImUserID(v)
		return nil
	case shortbio.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown ShortBio field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShortBioMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShortBioMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShortBioMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShortBio numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShortBioMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shortbio.FieldUserID) {
		fields = append(fields, shortbio.FieldUserID)
	}
	if m.FieldCleared(shortbio.FieldContent) {
		fields = append(fields, shortbio.FieldContent)
	}
	if m.FieldCleared(shortbio.FieldImUserID) {
		fields = append(fields, shortbio.FieldImUserID)
	}
	if m.FieldCleared(shortbio.FieldResult) {
		fields = append(fields, shortbio.FieldResult)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShortBioMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShortBioMutation) ClearField(name string) error {
	switch name {
	case shortbio.FieldUserID:
		m.ClearUserID()
		return nil
	case shortbio.FieldContent:
		m.ClearContent()
		return nil
	case shortbio.FieldImUserID:
		m.ClearImUserID()
		return nil
	case shortbio.FieldResult:
		m.ClearResult()
		return nil
	}
	return fmt.Errorf("unknown ShortBio nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShortBioMutation) ResetField(name string) error {
	switch name {
	case shortbio.FieldUserID:
		m.ResetUserID()
		return nil
	case shortbio.FieldContent:
		m.ResetContent()
		return nil
	case shortbio.FieldImUserID:
		m.ResetImUserID()
		return nil
	case shortbio.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown ShortBio field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShortBioMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShortBioMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShortBioMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShortBioMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShortBioMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShortBioMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShortBioMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ShortBio unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShortBioMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ShortBio edge %s", name)
}
