// Code generated by ent, DO NOT EDIT.

package userdefaultbinding

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userdefaultbinding type in the database.
	Label = "user_default_binding"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImID holds the string denoting the im_id field in the database.
	FieldImID = "im_id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldServer holds the string denoting the server field in the database.
	FieldServer = "server"
	// FieldBindingID holds the string denoting the binding_id field in the database.
	FieldBindingID = "binding_id"
	// EdgeBinding holds the string denoting the binding edge name in mutations.
	EdgeBinding = "binding"
	// Table holds the table name of the userdefaultbinding in the database.
	Table = "user_default_bindings"
	// BindingTable is the table that holds the binding relation/edge.
	BindingTable = "user_default_bindings"
	// BindingInverseTable is the table name for the UserBinding entity.
	// It exists in this package in order to avoid circular dependency with the "userbinding" package.
	BindingInverseTable = "user_bindings"
	// BindingColumn is the table column denoting the binding relation/edge.
	BindingColumn = "binding_id"
)

// Columns holds all SQL columns for userdefaultbinding fields.
var Columns = []string{
	FieldID,
	FieldImID,
	FieldPlatform,
	FieldServer,
	FieldBindingID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ImIDValidator is a validator for the "im_id" field. It is called by the builders before save.
	ImIDValidator func(string) error
	// PlatformValidator is a validator for the "platform" field. It is called by the builders before save.
	PlatformValidator func(string) error
	// ServerValidator is a validator for the "server" field. It is called by the builders before save.
	ServerValidator func(string) error
)

// OrderOption defines the ordering options for the UserDefaultBinding queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImID orders the results by the im_id field.
func ByImID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImID, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByServer orders the results by the server field.
func ByServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServer, opts...).ToFunc()
}

// ByBindingID orders the results by the binding_id field.
func ByBindingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBindingID, opts...).ToFunc()
}

// ByBindingField orders the results by binding field.
func ByBindingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBindingStep(), sql.OrderByField(field, opts...))
	}
}
func newBindingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BindingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BindingTable, BindingColumn),
	)
}
