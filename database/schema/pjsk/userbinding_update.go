// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/pjsk/predicate"
	"haruki-database/database/schema/pjsk/userbinding"
	"haruki-database/database/schema/pjsk/userdefaultbinding"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBindingUpdate is the builder for updating UserBinding entities.
type UserBindingUpdate struct {
	config
	hooks    []Hook
	mutation *UserBindingMutation
}

// Where appends a list predicates to the UserBindingUpdate builder.
func (_u *UserBindingUpdate) Where(ps ...predicate.UserBinding) *UserBindingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *UserBindingUpdate) SetPlatform(v string) *UserBindingUpdate {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *UserBindingUpdate) SetNillablePlatform(v *string) *UserBindingUpdate {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetImID sets the "im_id" field.
func (_u *UserBindingUpdate) SetImID(v string) *UserBindingUpdate {
	_u.mutation.SetImID(v)
	return _u
}

// SetNillableImID sets the "im_id" field if the given value is not nil.
func (_u *UserBindingUpdate) SetNillableImID(v *string) *UserBindingUpdate {
	if v != nil {
		_u.SetImID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserBindingUpdate) SetUserID(v string) *UserBindingUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserBindingUpdate) SetNillableUserID(v *string) *UserBindingUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetServer sets the "server" field.
func (_u *UserBindingUpdate) SetServer(v string) *UserBindingUpdate {
	_u.mutation.SetServer(v)
	return _u
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (_u *UserBindingUpdate) SetNillableServer(v *string) *UserBindingUpdate {
	if v != nil {
		_u.SetServer(*v)
	}
	return _u
}

// SetVisible sets the "visible" field.
func (_u *UserBindingUpdate) SetVisible(v bool) *UserBindingUpdate {
	_u.mutation.SetVisible(v)
	return _u
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (_u *UserBindingUpdate) SetNillableVisible(v *bool) *UserBindingUpdate {
	if v != nil {
		_u.SetVisible(*v)
	}
	return _u
}

// AddDefaultRefIDs adds the "default_refs" edge to the UserDefaultBinding entity by IDs.
func (_u *UserBindingUpdate) AddDefaultRefIDs(ids ...int) *UserBindingUpdate {
	_u.mutation.AddDefaultRefIDs(ids...)
	return _u
}

// AddDefaultRefs adds the "default_refs" edges to the UserDefaultBinding entity.
func (_u *UserBindingUpdate) AddDefaultRefs(v ...*UserDefaultBinding) *UserBindingUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDefaultRefIDs(ids...)
}

// Mutation returns the UserBindingMutation object of the builder.
func (_u *UserBindingUpdate) Mutation() *UserBindingMutation {
	return _u.mutation
}

// ClearDefaultRefs clears all "default_refs" edges to the UserDefaultBinding entity.
func (_u *UserBindingUpdate) ClearDefaultRefs() *UserBindingUpdate {
	_u.mutation.ClearDefaultRefs()
	return _u
}

// RemoveDefaultRefIDs removes the "default_refs" edge to UserDefaultBinding entities by IDs.
func (_u *UserBindingUpdate) RemoveDefaultRefIDs(ids ...int) *UserBindingUpdate {
	_u.mutation.RemoveDefaultRefIDs(ids...)
	return _u
}

// RemoveDefaultRefs removes "default_refs" edges to UserDefaultBinding entities.
func (_u *UserBindingUpdate) RemoveDefaultRefs(v ...*UserDefaultBinding) *UserBindingUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDefaultRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserBindingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserBindingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserBindingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserBindingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserBindingUpdate) check() error {
	if v, ok := _u.mutation.Platform(); ok {
		if err := userbinding.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ImID(); ok {
		if err := userbinding.ImIDValidator(v); err != nil {
			return &ValidationError{Name: "im_id", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.im_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserID(); ok {
		if err := userbinding.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Server(); ok {
		if err := userbinding.ServerValidator(v); err != nil {
			return &ValidationError{Name: "server", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.server": %w`, err)}
		}
	}
	return nil
}

func (_u *UserBindingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbinding.Table, userbinding.Columns, sqlgraph.NewFieldSpec(userbinding.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(userbinding.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.ImID(); ok {
		_spec.SetField(userbinding.FieldImID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(userbinding.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Server(); ok {
		_spec.SetField(userbinding.FieldServer, field.TypeString, value)
	}
	if value, ok := _u.mutation.Visible(); ok {
		_spec.SetField(userbinding.FieldVisible, field.TypeBool, value)
	}
	if _u.mutation.DefaultRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userbinding.DefaultRefsTable,
			Columns: []string{userbinding.DefaultRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDefaultRefsIDs(); len(nodes) > 0 && !_u.mutation.DefaultRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userbinding.DefaultRefsTable,
			Columns: []string{userbinding.DefaultRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DefaultRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userbinding.DefaultRefsTable,
			Columns: []string{userbinding.DefaultRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserBindingUpdateOne is the builder for updating a single UserBinding entity.
type UserBindingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBindingMutation
}

// SetPlatform sets the "platform" field.
func (_u *UserBindingUpdateOne) SetPlatform(v string) *UserBindingUpdateOne {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *UserBindingUpdateOne) SetNillablePlatform(v *string) *UserBindingUpdateOne {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetImID sets the "im_id" field.
func (_u *UserBindingUpdateOne) SetImID(v string) *UserBindingUpdateOne {
	_u.mutation.SetImID(v)
	return _u
}

// SetNillableImID sets the "im_id" field if the given value is not nil.
func (_u *UserBindingUpdateOne) SetNillableImID(v *string) *UserBindingUpdateOne {
	if v != nil {
		_u.SetImID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserBindingUpdateOne) SetUserID(v string) *UserBindingUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserBindingUpdateOne) SetNillableUserID(v *string) *UserBindingUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetServer sets the "server" field.
func (_u *UserBindingUpdateOne) SetServer(v string) *UserBindingUpdateOne {
	_u.mutation.SetServer(v)
	return _u
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (_u *UserBindingUpdateOne) SetNillableServer(v *string) *UserBindingUpdateOne {
	if v != nil {
		_u.SetServer(*v)
	}
	return _u
}

// SetVisible sets the "visible" field.
func (_u *UserBindingUpdateOne) SetVisible(v bool) *UserBindingUpdateOne {
	_u.mutation.SetVisible(v)
	return _u
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (_u *UserBindingUpdateOne) SetNillableVisible(v *bool) *UserBindingUpdateOne {
	if v != nil {
		_u.SetVisible(*v)
	}
	return _u
}

// AddDefaultRefIDs adds the "default_refs" edge to the UserDefaultBinding entity by IDs.
func (_u *UserBindingUpdateOne) AddDefaultRefIDs(ids ...int) *UserBindingUpdateOne {
	_u.mutation.AddDefaultRefIDs(ids...)
	return _u
}

// AddDefaultRefs adds the "default_refs" edges to the UserDefaultBinding entity.
func (_u *UserBindingUpdateOne) AddDefaultRefs(v ...*UserDefaultBinding) *UserBindingUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDefaultRefIDs(ids...)
}

// Mutation returns the UserBindingMutation object of the builder.
func (_u *UserBindingUpdateOne) Mutation() *UserBindingMutation {
	return _u.mutation
}

// ClearDefaultRefs clears all "default_refs" edges to the UserDefaultBinding entity.
func (_u *UserBindingUpdateOne) ClearDefaultRefs() *UserBindingUpdateOne {
	_u.mutation.ClearDefaultRefs()
	return _u
}

// RemoveDefaultRefIDs removes the "default_refs" edge to UserDefaultBinding entities by IDs.
func (_u *UserBindingUpdateOne) RemoveDefaultRefIDs(ids ...int) *UserBindingUpdateOne {
	_u.mutation.RemoveDefaultRefIDs(ids...)
	return _u
}

// RemoveDefaultRefs removes "default_refs" edges to UserDefaultBinding entities.
func (_u *UserBindingUpdateOne) RemoveDefaultRefs(v ...*UserDefaultBinding) *UserBindingUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDefaultRefIDs(ids...)
}

// Where appends a list predicates to the UserBindingUpdate builder.
func (_u *UserBindingUpdateOne) Where(ps ...predicate.UserBinding) *UserBindingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserBindingUpdateOne) Select(field string, fields ...string) *UserBindingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserBinding entity.
func (_u *UserBindingUpdateOne) Save(ctx context.Context) (*UserBinding, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserBindingUpdateOne) SaveX(ctx context.Context) *UserBinding {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserBindingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserBindingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserBindingUpdateOne) check() error {
	if v, ok := _u.mutation.Platform(); ok {
		if err := userbinding.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ImID(); ok {
		if err := userbinding.ImIDValidator(v); err != nil {
			return &ValidationError{Name: "im_id", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.im_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserID(); ok {
		if err := userbinding.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Server(); ok {
		if err := userbinding.ServerValidator(v); err != nil {
			return &ValidationError{Name: "server", err: fmt.Errorf(`pjsk: validator failed for field "UserBinding.server": %w`, err)}
		}
	}
	return nil
}

func (_u *UserBindingUpdateOne) sqlSave(ctx context.Context) (_node *UserBinding, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbinding.Table, userbinding.Columns, sqlgraph.NewFieldSpec(userbinding.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`pjsk: missing "UserBinding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbinding.FieldID)
		for _, f := range fields {
			if !userbinding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("pjsk: invalid field %q for query", f)}
			}
			if f != userbinding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(userbinding.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.ImID(); ok {
		_spec.SetField(userbinding.FieldImID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(userbinding.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Server(); ok {
		_spec.SetField(userbinding.FieldServer, field.TypeString, value)
	}
	if value, ok := _u.mutation.Visible(); ok {
		_spec.SetField(userbinding.FieldVisible, field.TypeBool, value)
	}
	if _u.mutation.DefaultRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userbinding.DefaultRefsTable,
			Columns: []string{userbinding.DefaultRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDefaultRefsIDs(); len(nodes) > 0 && !_u.mutation.DefaultRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userbinding.DefaultRefsTable,
			Columns: []string{userbinding.DefaultRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DefaultRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userbinding.DefaultRefsTable,
			Columns: []string{userbinding.DefaultRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserBinding{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
