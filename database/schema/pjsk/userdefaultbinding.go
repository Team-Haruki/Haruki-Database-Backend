// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"fmt"
	"haruki-database/database/schema/pjsk/userbinding"
	"haruki-database/database/schema/pjsk/userdefaultbinding"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserDefaultBinding is the model entity for the UserDefaultBinding schema.
type UserDefaultBinding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ImID holds the value of the "im_id" field.
	ImID string `json:"im_id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Server holds the value of the "server" field.
	Server string `json:"server,omitempty"`
	// BindingID holds the value of the "binding_id" field.
	BindingID int `json:"binding_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserDefaultBindingQuery when eager-loading is set.
	Edges        UserDefaultBindingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserDefaultBindingEdges holds the relations/edges for other nodes in the graph.
type UserDefaultBindingEdges struct {
	// Binding holds the value of the binding edge.
	Binding *UserBinding `json:"binding,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BindingOrErr returns the Binding value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDefaultBindingEdges) BindingOrErr() (*UserBinding, error) {
	if e.Binding != nil {
		return e.Binding, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: userbinding.Label}
	}
	return nil, &NotLoadedError{edge: "binding"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDefaultBinding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdefaultbinding.FieldID, userdefaultbinding.FieldBindingID:
			values[i] = new(sql.NullInt64)
		case userdefaultbinding.FieldImID, userdefaultbinding.FieldPlatform, userdefaultbinding.FieldServer:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDefaultBinding fields.
func (_m *UserDefaultBinding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdefaultbinding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case userdefaultbinding.FieldImID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field im_id", values[i])
			} else if value.Valid {
				_m.ImID = value.String
			}
		case userdefaultbinding.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				_m.Platform = value.String
			}
		case userdefaultbinding.FieldServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server", values[i])
			} else if value.Valid {
				_m.Server = value.String
			}
		case userdefaultbinding.FieldBindingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field binding_id", values[i])
			} else if value.Valid {
				_m.BindingID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserDefaultBinding.
// This includes values selected through modifiers, order, etc.
func (_m *UserDefaultBinding) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBinding queries the "binding" edge of the UserDefaultBinding entity.
func (_m *UserDefaultBinding) QueryBinding() *UserBindingQuery {
	return NewUserDefaultBindingClient(_m.config).QueryBinding(_m)
}

// Update returns a builder for updating this UserDefaultBinding.
// Note that you need to call UserDefaultBinding.Unwrap() before calling this method if this UserDefaultBinding
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserDefaultBinding) Update() *UserDefaultBindingUpdateOne {
	return NewUserDefaultBindingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserDefaultBinding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserDefaultBinding) Unwrap() *UserDefaultBinding {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("pjsk: UserDefaultBinding is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserDefaultBinding) String() string {
	var builder strings.Builder
	builder.WriteString("UserDefaultBinding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("im_id=")
	builder.WriteString(_m.ImID)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(_m.Platform)
	builder.WriteString(", ")
	builder.WriteString("server=")
	builder.WriteString(_m.Server)
	builder.WriteString(", ")
	builder.WriteString("binding_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.BindingID))
	builder.WriteByte(')')
	return builder.String()
}

// UserDefaultBindings is a parsable slice of UserDefaultBinding.
type UserDefaultBindings []*UserDefaultBinding
