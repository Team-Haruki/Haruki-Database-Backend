// Code generated by ent, DO NOT EDIT.

package music

import (
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmchartdata"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChunithmChartData is the model entity for the ChunithmChartData schema.
type ChunithmChartData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MusicID holds the value of the "music_id" field.
	MusicID int `json:"music_id,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty int `json:"difficulty,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator *string `json:"creator,omitempty"`
	// Bpm holds the value of the "bpm" field.
	Bpm *float64 `json:"bpm,omitempty"`
	// TapCount holds the value of the "tap_count" field.
	TapCount *int `json:"tap_count,omitempty"`
	// HoldCount holds the value of the "hold_count" field.
	HoldCount *int `json:"hold_count,omitempty"`
	// SlideCount holds the value of the "slide_count" field.
	SlideCount *int `json:"slide_count,omitempty"`
	// AirCount holds the value of the "air_count" field.
	AirCount *int `json:"air_count,omitempty"`
	// FlickCount holds the value of the "flick_count" field.
	FlickCount *int `json:"flick_count,omitempty"`
	// TotalCount holds the value of the "total_count" field.
	TotalCount   *int `json:"total_count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChunithmChartData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunithmchartdata.FieldBpm:
			values[i] = new(sql.NullFloat64)
		case chunithmchartdata.FieldID, chunithmchartdata.FieldMusicID, chunithmchartdata.FieldDifficulty, chunithmchartdata.FieldTapCount, chunithmchartdata.FieldHoldCount, chunithmchartdata.FieldSlideCount, chunithmchartdata.FieldAirCount, chunithmchartdata.FieldFlickCount, chunithmchartdata.FieldTotalCount:
			values[i] = new(sql.NullInt64)
		case chunithmchartdata.FieldCreator:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChunithmChartData fields.
func (_m *ChunithmChartData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunithmchartdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case chunithmchartdata.FieldMusicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field music_id", values[i])
			} else if value.Valid {
				_m.MusicID = int(value.Int64)
			}
		case chunithmchartdata.FieldDifficulty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				_m.Difficulty = int(value.Int64)
			}
		case chunithmchartdata.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				_m.Creator = new(string)
				*_m.Creator = value.String
			}
		case chunithmchartdata.FieldBpm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bpm", values[i])
			} else if value.Valid {
				_m.Bpm = new(float64)
				*_m.Bpm = value.Float64
			}
		case chunithmchartdata.FieldTapCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tap_count", values[i])
			} else if value.Valid {
				_m.TapCount = new(int)
				*_m.TapCount = int(value.Int64)
			}
		case chunithmchartdata.FieldHoldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hold_count", values[i])
			} else if value.Valid {
				_m.HoldCount = new(int)
				*_m.HoldCount = int(value.Int64)
			}
		case chunithmchartdata.FieldSlideCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field slide_count", values[i])
			} else if value.Valid {
				_m.SlideCount = new(int)
				*_m.SlideCount = int(value.Int64)
			}
		case chunithmchartdata.FieldAirCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field air_count", values[i])
			} else if value.Valid {
				_m.AirCount = new(int)
				*_m.AirCount = int(value.Int64)
			}
		case chunithmchartdata.FieldFlickCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field flick_count", values[i])
			} else if value.Valid {
				_m.FlickCount = new(int)
				*_m.FlickCount = int(value.Int64)
			}
		case chunithmchartdata.FieldTotalCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_count", values[i])
			} else if value.Valid {
				_m.TotalCount = new(int)
				*_m.TotalCount = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChunithmChartData.
// This includes values selected through modifiers, order, etc.
func (_m *ChunithmChartData) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ChunithmChartData.
// Note that you need to call ChunithmChartData.Unwrap() before calling this method if this ChunithmChartData
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ChunithmChartData) Update() *ChunithmChartDataUpdateOne {
	return NewChunithmChartDataClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ChunithmChartData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ChunithmChartData) Unwrap() *ChunithmChartData {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("music: ChunithmChartData is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ChunithmChartData) String() string {
	var builder strings.Builder
	builder.WriteString("ChunithmChartData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("music_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.MusicID))
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", _m.Difficulty))
	builder.WriteString(", ")
	if v := _m.Creator; v != nil {
		builder.WriteString("creator=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Bpm; v != nil {
		builder.WriteString("bpm=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.TapCount; v != nil {
		builder.WriteString("tap_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.HoldCount; v != nil {
		builder.WriteString("hold_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.SlideCount; v != nil {
		builder.WriteString("slide_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.AirCount; v != nil {
		builder.WriteString("air_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.FlickCount; v != nil {
		builder.WriteString("flick_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.TotalCount; v != nil {
		builder.WriteString("total_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ChunithmChartDataSlice is a parsable slice of ChunithmChartData.
type ChunithmChartDataSlice []*ChunithmChartData
