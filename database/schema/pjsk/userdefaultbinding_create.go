// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/pjsk/userbinding"
	"haruki-database/database/schema/pjsk/userdefaultbinding"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDefaultBindingCreate is the builder for creating a UserDefaultBinding entity.
type UserDefaultBindingCreate struct {
	config
	mutation *UserDefaultBindingMutation
	hooks    []Hook
}

// SetImID sets the "im_id" field.
func (_c *UserDefaultBindingCreate) SetImID(v string) *UserDefaultBindingCreate {
	_c.mutation.SetImID(v)
	return _c
}

// SetPlatform sets the "platform" field.
func (_c *UserDefaultBindingCreate) SetPlatform(v string) *UserDefaultBindingCreate {
	_c.mutation.SetPlatform(v)
	return _c
}

// SetServer sets the "server" field.
func (_c *UserDefaultBindingCreate) SetServer(v string) *UserDefaultBindingCreate {
	_c.mutation.SetServer(v)
	return _c
}

// SetBindingID sets the "binding_id" field.
func (_c *UserDefaultBindingCreate) SetBindingID(v int) *UserDefaultBindingCreate {
	_c.mutation.SetBindingID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *UserDefaultBindingCreate) SetID(v int) *UserDefaultBindingCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetBinding sets the "binding" edge to the UserBinding entity.
func (_c *UserDefaultBindingCreate) SetBinding(v *UserBinding) *UserDefaultBindingCreate {
	return _c.SetBindingID(v.ID)
}

// Mutation returns the UserDefaultBindingMutation object of the builder.
func (_c *UserDefaultBindingCreate) Mutation() *UserDefaultBindingMutation {
	return _c.mutation
}

// Save creates the UserDefaultBinding in the database.
func (_c *UserDefaultBindingCreate) Save(ctx context.Context) (*UserDefaultBinding, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserDefaultBindingCreate) SaveX(ctx context.Context) *UserDefaultBinding {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserDefaultBindingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserDefaultBindingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserDefaultBindingCreate) check() error {
	if _, ok := _c.mutation.ImID(); !ok {
		return &ValidationError{Name: "im_id", err: errors.New(`pjsk: missing required field "UserDefaultBinding.im_id"`)}
	}
	if v, ok := _c.mutation.ImID(); ok {
		if err := userdefaultbinding.ImIDValidator(v); err != nil {
			return &ValidationError{Name: "im_id", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.im_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`pjsk: missing required field "UserDefaultBinding.platform"`)}
	}
	if v, ok := _c.mutation.Platform(); ok {
		if err := userdefaultbinding.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.platform": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Server(); !ok {
		return &ValidationError{Name: "server", err: errors.New(`pjsk: missing required field "UserDefaultBinding.server"`)}
	}
	if v, ok := _c.mutation.Server(); ok {
		if err := userdefaultbinding.ServerValidator(v); err != nil {
			return &ValidationError{Name: "server", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.server": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BindingID(); !ok {
		return &ValidationError{Name: "binding_id", err: errors.New(`pjsk: missing required field "UserDefaultBinding.binding_id"`)}
	}
	if len(_c.mutation.BindingIDs()) == 0 {
		return &ValidationError{Name: "binding", err: errors.New(`pjsk: missing required edge "UserDefaultBinding.binding"`)}
	}
	return nil
}

func (_c *UserDefaultBindingCreate) sqlSave(ctx context.Context) (*UserDefaultBinding, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserDefaultBindingCreate) createSpec() (*UserDefaultBinding, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDefaultBinding{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(userdefaultbinding.Table, sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.ImID(); ok {
		_spec.SetField(userdefaultbinding.FieldImID, field.TypeString, value)
		_node.ImID = value
	}
	if value, ok := _c.mutation.Platform(); ok {
		_spec.SetField(userdefaultbinding.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := _c.mutation.Server(); ok {
		_spec.SetField(userdefaultbinding.FieldServer, field.TypeString, value)
		_node.Server = value
	}
	if nodes := _c.mutation.BindingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdefaultbinding.BindingTable,
			Columns: []string{userdefaultbinding.BindingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BindingID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserDefaultBindingCreateBulk is the builder for creating many UserDefaultBinding entities in bulk.
type UserDefaultBindingCreateBulk struct {
	config
	err      error
	builders []*UserDefaultBindingCreate
}

// Save creates the UserDefaultBinding entities in the database.
func (_c *UserDefaultBindingCreateBulk) Save(ctx context.Context) ([]*UserDefaultBinding, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserDefaultBinding, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDefaultBindingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserDefaultBindingCreateBulk) SaveX(ctx context.Context) []*UserDefaultBinding {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserDefaultBindingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserDefaultBindingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
