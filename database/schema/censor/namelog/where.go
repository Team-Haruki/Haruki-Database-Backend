// Code generated by ent, DO NOT EDIT.

package namelog

import (
	"haruki-database/database/schema/censor/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NameLog {
	return predicate.NameLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NameLog {
	return predicate.NameLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NameLog {
	return predicate.NameLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NameLog {
	return predicate.NameLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NameLog {
	return predicate.NameLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NameLog {
	return predicate.NameLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NameLog {
	return predicate.NameLog(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldUserID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldName, v))
}

// ImUserID applies equality check predicate on the "im_user_id" field. It's identical to ImUserIDEQ.
func ImUserID(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldImUserID, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldTime, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldResult, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContainsFold(FieldUserID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContainsFold(FieldName, v))
}

// ImUserIDEQ applies the EQ predicate on the "im_user_id" field.
func ImUserIDEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldImUserID, v))
}

// ImUserIDNEQ applies the NEQ predicate on the "im_user_id" field.
func ImUserIDNEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNEQ(FieldImUserID, v))
}

// ImUserIDIn applies the In predicate on the "im_user_id" field.
func ImUserIDIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldIn(FieldImUserID, vs...))
}

// ImUserIDNotIn applies the NotIn predicate on the "im_user_id" field.
func ImUserIDNotIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNotIn(FieldImUserID, vs...))
}

// ImUserIDGT applies the GT predicate on the "im_user_id" field.
func ImUserIDGT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGT(FieldImUserID, v))
}

// ImUserIDGTE applies the GTE predicate on the "im_user_id" field.
func ImUserIDGTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGTE(FieldImUserID, v))
}

// ImUserIDLT applies the LT predicate on the "im_user_id" field.
func ImUserIDLT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLT(FieldImUserID, v))
}

// ImUserIDLTE applies the LTE predicate on the "im_user_id" field.
func ImUserIDLTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLTE(FieldImUserID, v))
}

// ImUserIDContains applies the Contains predicate on the "im_user_id" field.
func ImUserIDContains(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContains(FieldImUserID, v))
}

// ImUserIDHasPrefix applies the HasPrefix predicate on the "im_user_id" field.
func ImUserIDHasPrefix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasPrefix(FieldImUserID, v))
}

// ImUserIDHasSuffix applies the HasSuffix predicate on the "im_user_id" field.
func ImUserIDHasSuffix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasSuffix(FieldImUserID, v))
}

// ImUserIDIsNil applies the IsNil predicate on the "im_user_id" field.
func ImUserIDIsNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldIsNull(FieldImUserID))
}

// ImUserIDNotNil applies the NotNil predicate on the "im_user_id" field.
func ImUserIDNotNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldNotNull(FieldImUserID))
}

// ImUserIDEqualFold applies the EqualFold predicate on the "im_user_id" field.
func ImUserIDEqualFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEqualFold(FieldImUserID, v))
}

// ImUserIDContainsFold applies the ContainsFold predicate on the "im_user_id" field.
func ImUserIDContainsFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContainsFold(FieldImUserID, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.NameLog {
	return predicate.NameLog(sql.FieldLTE(FieldTime, v))
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldIsNull(FieldTime))
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldNotNull(FieldTime))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.NameLog {
	return predicate.NameLog(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldLTE(FieldResult, v))
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContains(FieldResult, v))
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasPrefix(FieldResult, v))
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldHasSuffix(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.NameLog {
	return predicate.NameLog(sql.FieldNotNull(FieldResult))
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldEqualFold(FieldResult, v))
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.NameLog {
	return predicate.NameLog(sql.FieldContainsFold(FieldResult, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NameLog) predicate.NameLog {
	return predicate.NameLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NameLog) predicate.NameLog {
	return predicate.NameLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NameLog) predicate.NameLog {
	return predicate.NameLog(sql.NotPredicates(p))
}
