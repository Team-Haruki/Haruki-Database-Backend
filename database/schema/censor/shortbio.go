// Code generated by ent, DO NOT EDIT.

package censor

import (
	"fmt"
	"haruki-database/database/schema/censor/shortbio"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShortBio is the model entity for the ShortBio schema.
type ShortBio struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *string `json:"user_id,omitempty"`
	// Content holds the value of the "content" field.
	Content *string `json:"content,omitempty"`
	// ImUserID holds the value of the "im_user_id" field.
	ImUserID *string `json:"im_user_id,omitempty"`
	// Result holds the value of the "result" field.
	Result       *string `json:"result,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShortBio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shortbio.FieldID:
			values[i] = new(sql.NullInt64)
		case shortbio.FieldUserID, shortbio.FieldContent, shortbio.FieldImUserID, shortbio.FieldResult:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShortBio fields.
func (_m *ShortBio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shortbio.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case shortbio.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = new(string)
				*_m.UserID = value.String
			}
		case shortbio.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = new(string)
				*_m.Content = value.String
			}
		case shortbio.FieldImUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field im_user_id", values[i])
			} else if value.Valid {
				_m.ImUserID = new(string)
				*_m.ImUserID = value.String
			}
		case shortbio.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				_m.Result = new(string)
				*_m.Result = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShortBio.
// This includes values selected through modifiers, order, etc.
func (_m *ShortBio) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ShortBio.
// Note that you need to call ShortBio.Unwrap() before calling this method if this ShortBio
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ShortBio) Update() *ShortBioUpdateOne {
	return NewShortBioClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ShortBio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ShortBio) Unwrap() *ShortBio {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("censor: ShortBio is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ShortBio) String() string {
	var builder strings.Builder
	builder.WriteString("ShortBio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Content; v != nil {
		builder.WriteString("content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ImUserID; v != nil {
		builder.WriteString("im_user_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Result; v != nil {
		builder.WriteString("result=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ShortBios is a parsable slice of ShortBio.
type ShortBios []*ShortBio
