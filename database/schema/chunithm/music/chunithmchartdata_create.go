// Code generated by ent, DO NOT EDIT.

package music

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmchartdata"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunithmChartDataCreate is the builder for creating a ChunithmChartData entity.
type ChunithmChartDataCreate struct {
	config
	mutation *ChunithmChartDataMutation
	hooks    []Hook
}

// SetMusicID sets the "music_id" field.
func (_c *ChunithmChartDataCreate) SetMusicID(v int) *ChunithmChartDataCreate {
	_c.mutation.SetMusicID(v)
	return _c
}

// SetDifficulty sets the "difficulty" field.
func (_c *ChunithmChartDataCreate) SetDifficulty(v int) *ChunithmChartDataCreate {
	_c.mutation.SetDifficulty(v)
	return _c
}

// SetCreator sets the "creator" field.
func (_c *ChunithmChartDataCreate) SetCreator(v string) *ChunithmChartDataCreate {
	_c.mutation.SetCreator(v)
	return _c
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableCreator(v *string) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetCreator(*v)
	}
	return _c
}

// SetBpm sets the "bpm" field.
func (_c *ChunithmChartDataCreate) SetBpm(v float64) *ChunithmChartDataCreate {
	_c.mutation.SetBpm(v)
	return _c
}

// SetNillableBpm sets the "bpm" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableBpm(v *float64) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetBpm(*v)
	}
	return _c
}

// SetTapCount sets the "tap_count" field.
func (_c *ChunithmChartDataCreate) SetTapCount(v int) *ChunithmChartDataCreate {
	_c.mutation.SetTapCount(v)
	return _c
}

// SetNillableTapCount sets the "tap_count" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableTapCount(v *int) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetTapCount(*v)
	}
	return _c
}

// SetHoldCount sets the "hold_count" field.
func (_c *ChunithmChartDataCreate) SetHoldCount(v int) *ChunithmChartDataCreate {
	_c.mutation.SetHoldCount(v)
	return _c
}

// SetNillableHoldCount sets the "hold_count" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableHoldCount(v *int) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetHoldCount(*v)
	}
	return _c
}

// SetSlideCount sets the "slide_count" field.
func (_c *ChunithmChartDataCreate) SetSlideCount(v int) *ChunithmChartDataCreate {
	_c.mutation.SetSlideCount(v)
	return _c
}

// SetNillableSlideCount sets the "slide_count" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableSlideCount(v *int) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetSlideCount(*v)
	}
	return _c
}

// SetAirCount sets the "air_count" field.
func (_c *ChunithmChartDataCreate) SetAirCount(v int) *ChunithmChartDataCreate {
	_c.mutation.SetAirCount(v)
	return _c
}

// SetNillableAirCount sets the "air_count" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableAirCount(v *int) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetAirCount(*v)
	}
	return _c
}

// SetFlickCount sets the "flick_count" field.
func (_c *ChunithmChartDataCreate) SetFlickCount(v int) *ChunithmChartDataCreate {
	_c.mutation.SetFlickCount(v)
	return _c
}

// SetNillableFlickCount sets the "flick_count" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableFlickCount(v *int) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetFlickCount(*v)
	}
	return _c
}

// SetTotalCount sets the "total_count" field.
func (_c *ChunithmChartDataCreate) SetTotalCount(v int) *ChunithmChartDataCreate {
	_c.mutation.SetTotalCount(v)
	return _c
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (_c *ChunithmChartDataCreate) SetNillableTotalCount(v *int) *ChunithmChartDataCreate {
	if v != nil {
		_c.SetTotalCount(*v)
	}
	return _c
}

// Mutation returns the ChunithmChartDataMutation object of the builder.
func (_c *ChunithmChartDataCreate) Mutation() *ChunithmChartDataMutation {
	return _c.mutation
}

// Save creates the ChunithmChartData in the database.
func (_c *ChunithmChartDataCreate) Save(ctx context.Context) (*ChunithmChartData, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ChunithmChartDataCreate) SaveX(ctx context.Context) *ChunithmChartData {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunithmChartDataCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunithmChartDataCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ChunithmChartDataCreate) check() error {
	if _, ok := _c.mutation.MusicID(); !ok {
		return &ValidationError{Name: "music_id", err: errors.New(`music: missing required field "ChunithmChartData.music_id"`)}
	}
	if _, ok := _c.mutation.Difficulty(); !ok {
		return &ValidationError{Name: "difficulty", err: errors.New(`music: missing required field "ChunithmChartData.difficulty"`)}
	}
	if v, ok := _c.mutation.Creator(); ok {
		if err := chunithmchartdata.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`music: validator failed for field "ChunithmChartData.creator": %w`, err)}
		}
	}
	return nil
}

func (_c *ChunithmChartDataCreate) sqlSave(ctx context.Context) (*ChunithmChartData, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ChunithmChartDataCreate) createSpec() (*ChunithmChartData, *sqlgraph.CreateSpec) {
	var (
		_node = &ChunithmChartData{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(chunithmchartdata.Table, sqlgraph.NewFieldSpec(chunithmchartdata.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.MusicID(); ok {
		_spec.SetField(chunithmchartdata.FieldMusicID, field.TypeInt, value)
		_node.MusicID = value
	}
	if value, ok := _c.mutation.Difficulty(); ok {
		_spec.SetField(chunithmchartdata.FieldDifficulty, field.TypeInt, value)
		_node.Difficulty = value
	}
	if value, ok := _c.mutation.Creator(); ok {
		_spec.SetField(chunithmchartdata.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if value, ok := _c.mutation.Bpm(); ok {
		_spec.SetField(chunithmchartdata.FieldBpm, field.TypeFloat64, value)
		_node.Bpm = &value
	}
	if value, ok := _c.mutation.TapCount(); ok {
		_spec.SetField(chunithmchartdata.FieldTapCount, field.TypeInt, value)
		_node.TapCount = &value
	}
	if value, ok := _c.mutation.HoldCount(); ok {
		_spec.SetField(chunithmchartdata.FieldHoldCount, field.TypeInt, value)
		_node.HoldCount = &value
	}
	if value, ok := _c.mutation.SlideCount(); ok {
		_spec.SetField(chunithmchartdata.FieldSlideCount, field.TypeInt, value)
		_node.SlideCount = &value
	}
	if value, ok := _c.mutation.AirCount(); ok {
		_spec.SetField(chunithmchartdata.FieldAirCount, field.TypeInt, value)
		_node.AirCount = &value
	}
	if value, ok := _c.mutation.FlickCount(); ok {
		_spec.SetField(chunithmchartdata.FieldFlickCount, field.TypeInt, value)
		_node.FlickCount = &value
	}
	if value, ok := _c.mutation.TotalCount(); ok {
		_spec.SetField(chunithmchartdata.FieldTotalCount, field.TypeInt, value)
		_node.TotalCount = &value
	}
	return _node, _spec
}

// ChunithmChartDataCreateBulk is the builder for creating many ChunithmChartData entities in bulk.
type ChunithmChartDataCreateBulk struct {
	config
	err      error
	builders []*ChunithmChartDataCreate
}

// Save creates the ChunithmChartData entities in the database.
func (_c *ChunithmChartDataCreateBulk) Save(ctx context.Context) ([]*ChunithmChartData, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ChunithmChartData, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChunithmChartDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ChunithmChartDataCreateBulk) SaveX(ctx context.Context) []*ChunithmChartData {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunithmChartDataCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunithmChartDataCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
