// Code generated by ent, DO NOT EDIT.

package maindb

import (
	"fmt"
	"haruki-database/database/schema/chunithm/maindb/chunithmmusicalias"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChunithmMusicAlias is the model entity for the ChunithmMusicAlias schema.
type ChunithmMusicAlias struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// MusicID holds the value of the "music_id" field.
	MusicID int `json:"music_id,omitempty"`
	// Alias holds the value of the "alias" field.
	Alias        string `json:"alias,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChunithmMusicAlias) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunithmmusicalias.FieldID, chunithmmusicalias.FieldMusicID:
			values[i] = new(sql.NullInt64)
		case chunithmmusicalias.FieldAlias:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChunithmMusicAlias fields.
func (_m *ChunithmMusicAlias) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunithmmusicalias.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case chunithmmusicalias.FieldMusicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field music_id", values[i])
			} else if value.Valid {
				_m.MusicID = int(value.Int64)
			}
		case chunithmmusicalias.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				_m.Alias = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChunithmMusicAlias.
// This includes values selected through modifiers, order, etc.
func (_m *ChunithmMusicAlias) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ChunithmMusicAlias.
// Note that you need to call ChunithmMusicAlias.Unwrap() before calling this method if this ChunithmMusicAlias
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ChunithmMusicAlias) Update() *ChunithmMusicAliasUpdateOne {
	return NewChunithmMusicAliasClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ChunithmMusicAlias entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ChunithmMusicAlias) Unwrap() *ChunithmMusicAlias {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("maindb: ChunithmMusicAlias is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ChunithmMusicAlias) String() string {
	var builder strings.Builder
	builder.WriteString("ChunithmMusicAlias(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("music_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.MusicID))
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(_m.Alias)
	builder.WriteByte(')')
	return builder.String()
}

// ChunithmMusicAliasSlice is a parsable slice of ChunithmMusicAlias.
type ChunithmMusicAliasSlice []*ChunithmMusicAlias
