// Code generated by ent, DO NOT EDIT.

package censor

import (
	"context"
	"fmt"
	"haruki-database/database/schema/censor/namelog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NameLogCreate is the builder for creating a NameLog entity.
type NameLogCreate struct {
	config
	mutation *NameLogMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (_c *NameLogCreate) SetUserID(v string) *NameLogCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_c *NameLogCreate) SetNillableUserID(v *string) *NameLogCreate {
	if v != nil {
		_c.SetUserID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *NameLogCreate) SetName(v string) *NameLogCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *NameLogCreate) SetNillableName(v *string) *NameLogCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetImUserID sets the "im_user_id" field.
func (_c *NameLogCreate) SetImUserID(v string) *NameLogCreate {
	_c.mutation.SetImUserID(v)
	return _c
}

// SetNillableImUserID sets the "im_user_id" field if the given value is not nil.
func (_c *NameLogCreate) SetNillableImUserID(v *string) *NameLogCreate {
	if v != nil {
		_c.SetImUserID(*v)
	}
	return _c
}

// SetTime sets the "time" field.
func (_c *NameLogCreate) SetTime(v time.Time) *NameLogCreate {
	_c.mutation.SetTime(v)
	return _c
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_c *NameLogCreate) SetNillableTime(v *time.Time) *NameLogCreate {
	if v != nil {
		_c.SetTime(*v)
	}
	return _c
}

// SetResult sets the "result" field.
func (_c *NameLogCreate) SetResult(v string) *NameLogCreate {
	_c.mutation.SetResult(v)
	return _c
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_c *NameLogCreate) SetNillableResult(v *string) *NameLogCreate {
	if v != nil {
		_c.SetResult(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *NameLogCreate) SetID(v int) *NameLogCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the NameLogMutation object of the builder.
func (_c *NameLogCreate) Mutation() *NameLogMutation {
	return _c.mutation
}

// Save creates the NameLog in the database.
func (_c *NameLogCreate) Save(ctx context.Context) (*NameLog, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NameLogCreate) SaveX(ctx context.Context) *NameLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NameLogCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NameLogCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NameLogCreate) check() error {
	if v, ok := _c.mutation.UserID(); ok {
		if err := namelog.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`censor: validator failed for field "NameLog.user_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := namelog.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`censor: validator failed for field "NameLog.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ImUserID(); ok {
		if err := namelog.ImUserIDValidator(v); err != nil {
			return &ValidationError{Name: "im_user_id", err: fmt.Errorf(`censor: validator failed for field "NameLog.im_user_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Result(); ok {
		if err := namelog.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`censor: validator failed for field "NameLog.result": %w`, err)}
		}
	}
	return nil
}

func (_c *NameLogCreate) sqlSave(ctx context.Context) (*NameLog, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NameLogCreate) createSpec() (*NameLog, *sqlgraph.CreateSpec) {
	var (
		_node = &NameLog{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(namelog.Table, sqlgraph.NewFieldSpec(namelog.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(namelog.FieldUserID, field.TypeString, value)
		_node.UserID = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(namelog.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.ImUserID(); ok {
		_spec.SetField(namelog.FieldImUserID, field.TypeString, value)
		_node.ImUserID = &value
	}
	if value, ok := _c.mutation.Time(); ok {
		_spec.SetField(namelog.FieldTime, field.TypeTime, value)
		_node.Time = &value
	}
	if value, ok := _c.mutation.Result(); ok {
		_spec.SetField(namelog.FieldResult, field.TypeString, value)
		_node.Result = &value
	}
	return _node, _spec
}

// NameLogCreateBulk is the builder for creating many NameLog entities in bulk.
type NameLogCreateBulk struct {
	config
	err      error
	builders []*NameLogCreate
}

// Save creates the NameLog entities in the database.
func (_c *NameLogCreateBulk) Save(ctx context.Context) ([]*NameLog, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NameLog, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NameLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NameLogCreateBulk) SaveX(ctx context.Context) []*NameLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NameLogCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NameLogCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
