// Code generated by ent, DO NOT EDIT.

package censor

import (
	"haruki-database/database/schema/censor/namelog"
	"haruki-database/database/schema/censor/result"
	"haruki-database/database/schema/censor/shortbio"
	"haruki-database/ent/schema/censor"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	namelogFields := censor.NameLog{}.Fields()
	_ = namelogFields
	// namelogDescUserID is the schema descriptor for user_id field.
	namelogDescUserID := namelogFields[1].Descriptor()
	// namelog.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	namelog.UserIDValidator = namelogDescUserID.Validators[0].(func(string) error)
	// namelogDescName is the schema descriptor for name field.
	namelogDescName := namelogFields[2].Descriptor()
	// namelog.NameValidator is a validator for the "name" field. It is called by the builders before save.
	namelog.NameValidator = namelogDescName.Validators[0].(func(string) error)
	// namelogDescImUserID is the schema descriptor for im_user_id field.
	namelogDescImUserID := namelogFields[3].Descriptor()
	// namelog.ImUserIDValidator is a validator for the "im_user_id" field. It is called by the builders before save.
	namelog.ImUserIDValidator = namelogDescImUserID.Validators[0].(func(string) error)
	// namelogDescResult is the schema descriptor for result field.
	namelogDescResult := namelogFields[5].Descriptor()
	// namelog.ResultValidator is a validator for the "result" field. It is called by the builders before save.
	namelog.ResultValidator = namelogDescResult.Validators[0].(func(string) error)
	resultFields := censor.Result{}.Fields()
	_ = resultFields
	// resultDescName is the schema descriptor for name field.
	resultDescName := resultFields[1].Descriptor()
	// result.NameValidator is a validator for the "name" field. It is called by the builders before save.
	result.NameValidator = func() func(string) error {
		validators := resultDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	shortbioFields := censor.ShortBio{}.Fields()
	_ = shortbioFields
	// shortbioDescUserID is the schema descriptor for user_id field.
	shortbioDescUserID := shortbioFields[1].Descriptor()
	// shortbio.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	shortbio.UserIDValidator = shortbioDescUserID.Validators[0].(func(string) error)
	// shortbioDescContent is the schema descriptor for content field.
	shortbioDescContent := shortbioFields[2].Descriptor()
	// shortbio.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	shortbio.ContentValidator = shortbioDescContent.Validators[0].(func(string) error)
	// shortbioDescImUserID is the schema descriptor for im_user_id field.
	shortbioDescImUserID := shortbioFields[3].Descriptor()
	// shortbio.ImUserIDValidator is a validator for the "im_user_id" field. It is called by the builders before save.
	shortbio.ImUserIDValidator = shortbioDescImUserID.Validators[0].(func(string) error)
	// shortbioDescResult is the schema descriptor for result field.
	shortbioDescResult := shortbioFields[4].Descriptor()
	// shortbio.ResultValidator is a validator for the "result" field. It is called by the builders before save.
	shortbio.ResultValidator = shortbioDescResult.Validators[0].(func(string) error)
}
