// Code generated by ent, DO NOT EDIT.

package music

import (
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmmusic"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChunithmMusic is the model entity for the ChunithmMusic schema.
type ChunithmMusic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MusicID holds the value of the "music_id" field.
	MusicID int `json:"music_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Artist holds the value of the "artist" field.
	Artist string `json:"artist,omitempty"`
	// Category holds the value of the "category" field.
	Category *string `json:"category,omitempty"`
	// Version holds the value of the "version" field.
	Version *string `json:"version,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate *time.Time `json:"release_date,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// DeletedVersion holds the value of the "deleted_version" field.
	DeletedVersion *string `json:"deleted_version,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChunithmMusic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunithmmusic.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case chunithmmusic.FieldID, chunithmmusic.FieldMusicID:
			values[i] = new(sql.NullInt64)
		case chunithmmusic.FieldTitle, chunithmmusic.FieldArtist, chunithmmusic.FieldCategory, chunithmmusic.FieldVersion, chunithmmusic.FieldDeletedVersion:
			values[i] = new(sql.NullString)
		case chunithmmusic.FieldReleaseDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChunithmMusic fields.
func (_m *ChunithmMusic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunithmmusic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case chunithmmusic.FieldMusicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field music_id", values[i])
			} else if value.Valid {
				_m.MusicID = int(value.Int64)
			}
		case chunithmmusic.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case chunithmmusic.FieldArtist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist", values[i])
			} else if value.Valid {
				_m.Artist = value.String
			}
		case chunithmmusic.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = new(string)
				*_m.Category = value.String
			}
		case chunithmmusic.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = new(string)
				*_m.Version = value.String
			}
		case chunithmmusic.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				_m.ReleaseDate = new(time.Time)
				*_m.ReleaseDate = value.Time
			}
		case chunithmmusic.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				_m.IsDeleted = value.Bool
			}
		case chunithmmusic.FieldDeletedVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_version", values[i])
			} else if value.Valid {
				_m.DeletedVersion = new(string)
				*_m.DeletedVersion = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChunithmMusic.
// This includes values selected through modifiers, order, etc.
func (_m *ChunithmMusic) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ChunithmMusic.
// Note that you need to call ChunithmMusic.Unwrap() before calling this method if this ChunithmMusic
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ChunithmMusic) Update() *ChunithmMusicUpdateOne {
	return NewChunithmMusicClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ChunithmMusic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ChunithmMusic) Unwrap() *ChunithmMusic {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("music: ChunithmMusic is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ChunithmMusic) String() string {
	var builder strings.Builder
	builder.WriteString("ChunithmMusic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("music_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.MusicID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("artist=")
	builder.WriteString(_m.Artist)
	builder.WriteString(", ")
	if v := _m.Category; v != nil {
		builder.WriteString("category=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Version; v != nil {
		builder.WriteString("version=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ReleaseDate; v != nil {
		builder.WriteString("release_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDeleted))
	builder.WriteString(", ")
	if v := _m.DeletedVersion; v != nil {
		builder.WriteString("deleted_version=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ChunithmMusics is a parsable slice of ChunithmMusic.
type ChunithmMusics []*ChunithmMusic
