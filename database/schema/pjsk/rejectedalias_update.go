// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/pjsk/predicate"
	"haruki-database/database/schema/pjsk/rejectedalias"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RejectedAliasUpdate is the builder for updating RejectedAlias entities.
type RejectedAliasUpdate struct {
	config
	hooks    []Hook
	mutation *RejectedAliasMutation
}

// Where appends a list predicates to the RejectedAliasUpdate builder.
func (_u *RejectedAliasUpdate) Where(ps ...predicate.RejectedAlias) *RejectedAliasUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAliasType sets the "alias_type" field.
func (_u *RejectedAliasUpdate) SetAliasType(v string) *RejectedAliasUpdate {
	_u.mutation.SetAliasType(v)
	return _u
}

// SetNillableAliasType sets the "alias_type" field if the given value is not nil.
func (_u *RejectedAliasUpdate) SetNillableAliasType(v *string) *RejectedAliasUpdate {
	if v != nil {
		_u.SetAliasType(*v)
	}
	return _u
}

// SetAliasTypeID sets the "alias_type_id" field.
func (_u *RejectedAliasUpdate) SetAliasTypeID(v int) *RejectedAliasUpdate {
	_u.mutation.ResetAliasTypeID()
	_u.mutation.SetAliasTypeID(v)
	return _u
}

// SetNillableAliasTypeID sets the "alias_type_id" field if the given value is not nil.
func (_u *RejectedAliasUpdate) SetNillableAliasTypeID(v *int) *RejectedAliasUpdate {
	if v != nil {
		_u.SetAliasTypeID(*v)
	}
	return _u
}

// AddAliasTypeID adds value to the "alias_type_id" field.
func (_u *RejectedAliasUpdate) AddAliasTypeID(v int) *RejectedAliasUpdate {
	_u.mutation.AddAliasTypeID(v)
	return _u
}

// SetAlias sets the "alias" field.
func (_u *RejectedAliasUpdate) SetAlias(v string) *RejectedAliasUpdate {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *RejectedAliasUpdate) SetNillableAlias(v *string) *RejectedAliasUpdate {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// SetReviewedBy sets the "reviewed_by" field.
func (_u *RejectedAliasUpdate) SetReviewedBy(v string) *RejectedAliasUpdate {
	_u.mutation.SetReviewedBy(v)
	return _u
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_u *RejectedAliasUpdate) SetNillableReviewedBy(v *string) *RejectedAliasUpdate {
	if v != nil {
		_u.SetReviewedBy(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *RejectedAliasUpdate) SetReason(v string) *RejectedAliasUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *RejectedAliasUpdate) SetNillableReason(v *string) *RejectedAliasUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// SetReviewedAt sets the "reviewed_at" field.
func (_u *RejectedAliasUpdate) SetReviewedAt(v time.Time) *RejectedAliasUpdate {
	_u.mutation.SetReviewedAt(v)
	return _u
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_u *RejectedAliasUpdate) SetNillableReviewedAt(v *time.Time) *RejectedAliasUpdate {
	if v != nil {
		_u.SetReviewedAt(*v)
	}
	return _u
}

// Mutation returns the RejectedAliasMutation object of the builder.
func (_u *RejectedAliasUpdate) Mutation() *RejectedAliasMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RejectedAliasUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RejectedAliasUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RejectedAliasUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RejectedAliasUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RejectedAliasUpdate) check() error {
	if v, ok := _u.mutation.AliasType(); ok {
		if err := rejectedalias.AliasTypeValidator(v); err != nil {
			return &ValidationError{Name: "alias_type", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.alias_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Alias(); ok {
		if err := rejectedalias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.alias": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewedBy(); ok {
		if err := rejectedalias.ReviewedByValidator(v); err != nil {
			return &ValidationError{Name: "reviewed_by", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.reviewed_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Reason(); ok {
		if err := rejectedalias.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.reason": %w`, err)}
		}
	}
	return nil
}

func (_u *RejectedAliasUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rejectedalias.Table, rejectedalias.Columns, sqlgraph.NewFieldSpec(rejectedalias.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AliasType(); ok {
		_spec.SetField(rejectedalias.FieldAliasType, field.TypeString, value)
	}
	if value, ok := _u.mutation.AliasTypeID(); ok {
		_spec.SetField(rejectedalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAliasTypeID(); ok {
		_spec.AddField(rejectedalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(rejectedalias.FieldAlias, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReviewedBy(); ok {
		_spec.SetField(rejectedalias.FieldReviewedBy, field.TypeString, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(rejectedalias.FieldReason, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReviewedAt(); ok {
		_spec.SetField(rejectedalias.FieldReviewedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rejectedalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RejectedAliasUpdateOne is the builder for updating a single RejectedAlias entity.
type RejectedAliasUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RejectedAliasMutation
}

// SetAliasType sets the "alias_type" field.
func (_u *RejectedAliasUpdateOne) SetAliasType(v string) *RejectedAliasUpdateOne {
	_u.mutation.SetAliasType(v)
	return _u
}

// SetNillableAliasType sets the "alias_type" field if the given value is not nil.
func (_u *RejectedAliasUpdateOne) SetNillableAliasType(v *string) *RejectedAliasUpdateOne {
	if v != nil {
		_u.SetAliasType(*v)
	}
	return _u
}

// SetAliasTypeID sets the "alias_type_id" field.
func (_u *RejectedAliasUpdateOne) SetAliasTypeID(v int) *RejectedAliasUpdateOne {
	_u.mutation.ResetAliasTypeID()
	_u.mutation.SetAliasTypeID(v)
	return _u
}

// SetNillableAliasTypeID sets the "alias_type_id" field if the given value is not nil.
func (_u *RejectedAliasUpdateOne) SetNillableAliasTypeID(v *int) *RejectedAliasUpdateOne {
	if v != nil {
		_u.SetAliasTypeID(*v)
	}
	return _u
}

// AddAliasTypeID adds value to the "alias_type_id" field.
func (_u *RejectedAliasUpdateOne) AddAliasTypeID(v int) *RejectedAliasUpdateOne {
	_u.mutation.AddAliasTypeID(v)
	return _u
}

// SetAlias sets the "alias" field.
func (_u *RejectedAliasUpdateOne) SetAlias(v string) *RejectedAliasUpdateOne {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *RejectedAliasUpdateOne) SetNillableAlias(v *string) *RejectedAliasUpdateOne {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// SetReviewedBy sets the "reviewed_by" field.
func (_u *RejectedAliasUpdateOne) SetReviewedBy(v string) *RejectedAliasUpdateOne {
	_u.mutation.SetReviewedBy(v)
	return _u
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_u *RejectedAliasUpdateOne) SetNillableReviewedBy(v *string) *RejectedAliasUpdateOne {
	if v != nil {
		_u.SetReviewedBy(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *RejectedAliasUpdateOne) SetReason(v string) *RejectedAliasUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *RejectedAliasUpdateOne) SetNillableReason(v *string) *RejectedAliasUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// SetReviewedAt sets the "reviewed_at" field.
func (_u *RejectedAliasUpdateOne) SetReviewedAt(v time.Time) *RejectedAliasUpdateOne {
	_u.mutation.SetReviewedAt(v)
	return _u
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_u *RejectedAliasUpdateOne) SetNillableReviewedAt(v *time.Time) *RejectedAliasUpdateOne {
	if v != nil {
		_u.SetReviewedAt(*v)
	}
	return _u
}

// Mutation returns the RejectedAliasMutation object of the builder.
func (_u *RejectedAliasUpdateOne) Mutation() *RejectedAliasMutation {
	return _u.mutation
}

// Where appends a list predicates to the RejectedAliasUpdate builder.
func (_u *RejectedAliasUpdateOne) Where(ps ...predicate.RejectedAlias) *RejectedAliasUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RejectedAliasUpdateOne) Select(field string, fields ...string) *RejectedAliasUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RejectedAlias entity.
func (_u *RejectedAliasUpdateOne) Save(ctx context.Context) (*RejectedAlias, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RejectedAliasUpdateOne) SaveX(ctx context.Context) *RejectedAlias {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RejectedAliasUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RejectedAliasUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RejectedAliasUpdateOne) check() error {
	if v, ok := _u.mutation.AliasType(); ok {
		if err := rejectedalias.AliasTypeValidator(v); err != nil {
			return &ValidationError{Name: "alias_type", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.alias_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Alias(); ok {
		if err := rejectedalias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.alias": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewedBy(); ok {
		if err := rejectedalias.ReviewedByValidator(v); err != nil {
			return &ValidationError{Name: "reviewed_by", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.reviewed_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Reason(); ok {
		if err := rejectedalias.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`pjsk: validator failed for field "RejectedAlias.reason": %w`, err)}
		}
	}
	return nil
}

func (_u *RejectedAliasUpdateOne) sqlSave(ctx context.Context) (_node *RejectedAlias, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rejectedalias.Table, rejectedalias.Columns, sqlgraph.NewFieldSpec(rejectedalias.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`pjsk: missing "RejectedAlias.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rejectedalias.FieldID)
		for _, f := range fields {
			if !rejectedalias.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("pjsk: invalid field %q for query", f)}
			}
			if f != rejectedalias.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AliasType(); ok {
		_spec.SetField(rejectedalias.FieldAliasType, field.TypeString, value)
	}
	if value, ok := _u.mutation.AliasTypeID(); ok {
		_spec.SetField(rejectedalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAliasTypeID(); ok {
		_spec.AddField(rejectedalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(rejectedalias.FieldAlias, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReviewedBy(); ok {
		_spec.SetField(rejectedalias.FieldReviewedBy, field.TypeString, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(rejectedalias.FieldReason, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReviewedAt(); ok {
		_spec.SetField(rejectedalias.FieldReviewedAt, field.TypeTime, value)
	}
	_node = &RejectedAlias{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rejectedalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
