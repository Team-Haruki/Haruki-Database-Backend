// Code generated by ent, DO NOT EDIT.

package chunithmmusicdifficulty

import (
	"haruki-database/database/schema/chunithm/music/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldID, id))
}

// MusicID applies equality check predicate on the "music_id" field. It's identical to MusicIDEQ.
func MusicID(v int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldMusicID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldVersion, v))
}

// Diff0Const applies equality check predicate on the "diff0_const" field. It's identical to Diff0ConstEQ.
func Diff0Const(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff0Const, v))
}

// Diff1Const applies equality check predicate on the "diff1_const" field. It's identical to Diff1ConstEQ.
func Diff1Const(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff1Const, v))
}

// Diff2Const applies equality check predicate on the "diff2_const" field. It's identical to Diff2ConstEQ.
func Diff2Const(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff2Const, v))
}

// Diff3Const applies equality check predicate on the "diff3_const" field. It's identical to Diff3ConstEQ.
func Diff3Const(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff3Const, v))
}

// Diff4Const applies equality check predicate on the "diff4_const" field. It's identical to Diff4ConstEQ.
func Diff4Const(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff4Const, v))
}

// MusicIDEQ applies the EQ predicate on the "music_id" field.
func MusicIDEQ(v int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldMusicID, v))
}

// MusicIDNEQ applies the NEQ predicate on the "music_id" field.
func MusicIDNEQ(v int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldMusicID, v))
}

// MusicIDIn applies the In predicate on the "music_id" field.
func MusicIDIn(vs ...int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldMusicID, vs...))
}

// MusicIDNotIn applies the NotIn predicate on the "music_id" field.
func MusicIDNotIn(vs ...int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldMusicID, vs...))
}

// MusicIDGT applies the GT predicate on the "music_id" field.
func MusicIDGT(v int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldMusicID, v))
}

// MusicIDGTE applies the GTE predicate on the "music_id" field.
func MusicIDGTE(v int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldMusicID, v))
}

// MusicIDLT applies the LT predicate on the "music_id" field.
func MusicIDLT(v int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldMusicID, v))
}

// MusicIDLTE applies the LTE predicate on the "music_id" field.
func MusicIDLTE(v int) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldMusicID, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldContainsFold(FieldVersion, v))
}

// Diff0ConstEQ applies the EQ predicate on the "diff0_const" field.
func Diff0ConstEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff0Const, v))
}

// Diff0ConstNEQ applies the NEQ predicate on the "diff0_const" field.
func Diff0ConstNEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldDiff0Const, v))
}

// Diff0ConstIn applies the In predicate on the "diff0_const" field.
func Diff0ConstIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldDiff0Const, vs...))
}

// Diff0ConstNotIn applies the NotIn predicate on the "diff0_const" field.
func Diff0ConstNotIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldDiff0Const, vs...))
}

// Diff0ConstGT applies the GT predicate on the "diff0_const" field.
func Diff0ConstGT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldDiff0Const, v))
}

// Diff0ConstGTE applies the GTE predicate on the "diff0_const" field.
func Diff0ConstGTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldDiff0Const, v))
}

// Diff0ConstLT applies the LT predicate on the "diff0_const" field.
func Diff0ConstLT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldDiff0Const, v))
}

// Diff0ConstLTE applies the LTE predicate on the "diff0_const" field.
func Diff0ConstLTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldDiff0Const, v))
}

// Diff0ConstIsNil applies the IsNil predicate on the "diff0_const" field.
func Diff0ConstIsNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIsNull(FieldDiff0Const))
}

// Diff0ConstNotNil applies the NotNil predicate on the "diff0_const" field.
func Diff0ConstNotNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotNull(FieldDiff0Const))
}

// Diff1ConstEQ applies the EQ predicate on the "diff1_const" field.
func Diff1ConstEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff1Const, v))
}

// Diff1ConstNEQ applies the NEQ predicate on the "diff1_const" field.
func Diff1ConstNEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldDiff1Const, v))
}

// Diff1ConstIn applies the In predicate on the "diff1_const" field.
func Diff1ConstIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldDiff1Const, vs...))
}

// Diff1ConstNotIn applies the NotIn predicate on the "diff1_const" field.
func Diff1ConstNotIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldDiff1Const, vs...))
}

// Diff1ConstGT applies the GT predicate on the "diff1_const" field.
func Diff1ConstGT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldDiff1Const, v))
}

// Diff1ConstGTE applies the GTE predicate on the "diff1_const" field.
func Diff1ConstGTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldDiff1Const, v))
}

// Diff1ConstLT applies the LT predicate on the "diff1_const" field.
func Diff1ConstLT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldDiff1Const, v))
}

// Diff1ConstLTE applies the LTE predicate on the "diff1_const" field.
func Diff1ConstLTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldDiff1Const, v))
}

// Diff1ConstIsNil applies the IsNil predicate on the "diff1_const" field.
func Diff1ConstIsNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIsNull(FieldDiff1Const))
}

// Diff1ConstNotNil applies the NotNil predicate on the "diff1_const" field.
func Diff1ConstNotNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotNull(FieldDiff1Const))
}

// Diff2ConstEQ applies the EQ predicate on the "diff2_const" field.
func Diff2ConstEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff2Const, v))
}

// Diff2ConstNEQ applies the NEQ predicate on the "diff2_const" field.
func Diff2ConstNEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldDiff2Const, v))
}

// Diff2ConstIn applies the In predicate on the "diff2_const" field.
func Diff2ConstIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldDiff2Const, vs...))
}

// Diff2ConstNotIn applies the NotIn predicate on the "diff2_const" field.
func Diff2ConstNotIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldDiff2Const, vs...))
}

// Diff2ConstGT applies the GT predicate on the "diff2_const" field.
func Diff2ConstGT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldDiff2Const, v))
}

// Diff2ConstGTE applies the GTE predicate on the "diff2_const" field.
func Diff2ConstGTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldDiff2Const, v))
}

// Diff2ConstLT applies the LT predicate on the "diff2_const" field.
func Diff2ConstLT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldDiff2Const, v))
}

// Diff2ConstLTE applies the LTE predicate on the "diff2_const" field.
func Diff2ConstLTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldDiff2Const, v))
}

// Diff2ConstIsNil applies the IsNil predicate on the "diff2_const" field.
func Diff2ConstIsNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIsNull(FieldDiff2Const))
}

// Diff2ConstNotNil applies the NotNil predicate on the "diff2_const" field.
func Diff2ConstNotNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotNull(FieldDiff2Const))
}

// Diff3ConstEQ applies the EQ predicate on the "diff3_const" field.
func Diff3ConstEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff3Const, v))
}

// Diff3ConstNEQ applies the NEQ predicate on the "diff3_const" field.
func Diff3ConstNEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldDiff3Const, v))
}

// Diff3ConstIn applies the In predicate on the "diff3_const" field.
func Diff3ConstIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldDiff3Const, vs...))
}

// Diff3ConstNotIn applies the NotIn predicate on the "diff3_const" field.
func Diff3ConstNotIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldDiff3Const, vs...))
}

// Diff3ConstGT applies the GT predicate on the "diff3_const" field.
func Diff3ConstGT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldDiff3Const, v))
}

// Diff3ConstGTE applies the GTE predicate on the "diff3_const" field.
func Diff3ConstGTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldDiff3Const, v))
}

// Diff3ConstLT applies the LT predicate on the "diff3_const" field.
func Diff3ConstLT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldDiff3Const, v))
}

// Diff3ConstLTE applies the LTE predicate on the "diff3_const" field.
func Diff3ConstLTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldDiff3Const, v))
}

// Diff3ConstIsNil applies the IsNil predicate on the "diff3_const" field.
func Diff3ConstIsNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIsNull(FieldDiff3Const))
}

// Diff3ConstNotNil applies the NotNil predicate on the "diff3_const" field.
func Diff3ConstNotNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotNull(FieldDiff3Const))
}

// Diff4ConstEQ applies the EQ predicate on the "diff4_const" field.
func Diff4ConstEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldEQ(FieldDiff4Const, v))
}

// Diff4ConstNEQ applies the NEQ predicate on the "diff4_const" field.
func Diff4ConstNEQ(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNEQ(FieldDiff4Const, v))
}

// Diff4ConstIn applies the In predicate on the "diff4_const" field.
func Diff4ConstIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIn(FieldDiff4Const, vs...))
}

// Diff4ConstNotIn applies the NotIn predicate on the "diff4_const" field.
func Diff4ConstNotIn(vs ...float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotIn(FieldDiff4Const, vs...))
}

// Diff4ConstGT applies the GT predicate on the "diff4_const" field.
func Diff4ConstGT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGT(FieldDiff4Const, v))
}

// Diff4ConstGTE applies the GTE predicate on the "diff4_const" field.
func Diff4ConstGTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldGTE(FieldDiff4Const, v))
}

// Diff4ConstLT applies the LT predicate on the "diff4_const" field.
func Diff4ConstLT(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLT(FieldDiff4Const, v))
}

// Diff4ConstLTE applies the LTE predicate on the "diff4_const" field.
func Diff4ConstLTE(v float64) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldLTE(FieldDiff4Const, v))
}

// Diff4ConstIsNil applies the IsNil predicate on the "diff4_const" field.
func Diff4ConstIsNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldIsNull(FieldDiff4Const))
}

// Diff4ConstNotNil applies the NotNil predicate on the "diff4_const" field.
func Diff4ConstNotNil() predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.FieldNotNull(FieldDiff4Const))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChunithmMusicDifficulty) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChunithmMusicDifficulty) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChunithmMusicDifficulty) predicate.ChunithmMusicDifficulty {
	return predicate.ChunithmMusicDifficulty(sql.NotPredicates(p))
}
