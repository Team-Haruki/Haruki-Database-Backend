// Code generated by ent, DO NOT EDIT.

package rejectedalias

import (
	"haruki-database/database/schema/pjsk/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLTE(FieldID, id))
}

// AliasType applies equality check predicate on the "alias_type" field. It's identical to AliasTypeEQ.
func AliasType(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldAliasType, v))
}

// AliasTypeID applies equality check predicate on the "alias_type_id" field. It's identical to AliasTypeIDEQ.
func AliasTypeID(v int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldAliasTypeID, v))
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldAlias, v))
}

// ReviewedBy applies equality check predicate on the "reviewed_by" field. It's identical to ReviewedByEQ.
func ReviewedBy(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldReviewedBy, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldReason, v))
}

// ReviewedAt applies equality check predicate on the "reviewed_at" field. It's identical to ReviewedAtEQ.
func ReviewedAt(v time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldReviewedAt, v))
}

// AliasTypeEQ applies the EQ predicate on the "alias_type" field.
func AliasTypeEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldAliasType, v))
}

// AliasTypeNEQ applies the NEQ predicate on the "alias_type" field.
func AliasTypeNEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNEQ(FieldAliasType, v))
}

// AliasTypeIn applies the In predicate on the "alias_type" field.
func AliasTypeIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldIn(FieldAliasType, vs...))
}

// AliasTypeNotIn applies the NotIn predicate on the "alias_type" field.
func AliasTypeNotIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNotIn(FieldAliasType, vs...))
}

// AliasTypeGT applies the GT predicate on the "alias_type" field.
func AliasTypeGT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGT(FieldAliasType, v))
}

// AliasTypeGTE applies the GTE predicate on the "alias_type" field.
func AliasTypeGTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGTE(FieldAliasType, v))
}

// AliasTypeLT applies the LT predicate on the "alias_type" field.
func AliasTypeLT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLT(FieldAliasType, v))
}

// AliasTypeLTE applies the LTE predicate on the "alias_type" field.
func AliasTypeLTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLTE(FieldAliasType, v))
}

// AliasTypeContains applies the Contains predicate on the "alias_type" field.
func AliasTypeContains(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContains(FieldAliasType, v))
}

// AliasTypeHasPrefix applies the HasPrefix predicate on the "alias_type" field.
func AliasTypeHasPrefix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasPrefix(FieldAliasType, v))
}

// AliasTypeHasSuffix applies the HasSuffix predicate on the "alias_type" field.
func AliasTypeHasSuffix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasSuffix(FieldAliasType, v))
}

// AliasTypeEqualFold applies the EqualFold predicate on the "alias_type" field.
func AliasTypeEqualFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEqualFold(FieldAliasType, v))
}

// AliasTypeContainsFold applies the ContainsFold predicate on the "alias_type" field.
func AliasTypeContainsFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContainsFold(FieldAliasType, v))
}

// AliasTypeIDEQ applies the EQ predicate on the "alias_type_id" field.
func AliasTypeIDEQ(v int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldAliasTypeID, v))
}

// AliasTypeIDNEQ applies the NEQ predicate on the "alias_type_id" field.
func AliasTypeIDNEQ(v int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNEQ(FieldAliasTypeID, v))
}

// AliasTypeIDIn applies the In predicate on the "alias_type_id" field.
func AliasTypeIDIn(vs ...int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldIn(FieldAliasTypeID, vs...))
}

// AliasTypeIDNotIn applies the NotIn predicate on the "alias_type_id" field.
func AliasTypeIDNotIn(vs ...int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNotIn(FieldAliasTypeID, vs...))
}

// AliasTypeIDGT applies the GT predicate on the "alias_type_id" field.
func AliasTypeIDGT(v int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGT(FieldAliasTypeID, v))
}

// AliasTypeIDGTE applies the GTE predicate on the "alias_type_id" field.
func AliasTypeIDGTE(v int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGTE(FieldAliasTypeID, v))
}

// AliasTypeIDLT applies the LT predicate on the "alias_type_id" field.
func AliasTypeIDLT(v int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLT(FieldAliasTypeID, v))
}

// AliasTypeIDLTE applies the LTE predicate on the "alias_type_id" field.
func AliasTypeIDLTE(v int) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLTE(FieldAliasTypeID, v))
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldAlias, v))
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNEQ(FieldAlias, v))
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldIn(FieldAlias, vs...))
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNotIn(FieldAlias, vs...))
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGT(FieldAlias, v))
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGTE(FieldAlias, v))
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLT(FieldAlias, v))
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLTE(FieldAlias, v))
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContains(FieldAlias, v))
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasPrefix(FieldAlias, v))
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasSuffix(FieldAlias, v))
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEqualFold(FieldAlias, v))
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContainsFold(FieldAlias, v))
}

// ReviewedByEQ applies the EQ predicate on the "reviewed_by" field.
func ReviewedByEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldReviewedBy, v))
}

// ReviewedByNEQ applies the NEQ predicate on the "reviewed_by" field.
func ReviewedByNEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNEQ(FieldReviewedBy, v))
}

// ReviewedByIn applies the In predicate on the "reviewed_by" field.
func ReviewedByIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldIn(FieldReviewedBy, vs...))
}

// ReviewedByNotIn applies the NotIn predicate on the "reviewed_by" field.
func ReviewedByNotIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNotIn(FieldReviewedBy, vs...))
}

// ReviewedByGT applies the GT predicate on the "reviewed_by" field.
func ReviewedByGT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGT(FieldReviewedBy, v))
}

// ReviewedByGTE applies the GTE predicate on the "reviewed_by" field.
func ReviewedByGTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGTE(FieldReviewedBy, v))
}

// ReviewedByLT applies the LT predicate on the "reviewed_by" field.
func ReviewedByLT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLT(FieldReviewedBy, v))
}

// ReviewedByLTE applies the LTE predicate on the "reviewed_by" field.
func ReviewedByLTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLTE(FieldReviewedBy, v))
}

// ReviewedByContains applies the Contains predicate on the "reviewed_by" field.
func ReviewedByContains(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContains(FieldReviewedBy, v))
}

// ReviewedByHasPrefix applies the HasPrefix predicate on the "reviewed_by" field.
func ReviewedByHasPrefix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasPrefix(FieldReviewedBy, v))
}

// ReviewedByHasSuffix applies the HasSuffix predicate on the "reviewed_by" field.
func ReviewedByHasSuffix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasSuffix(FieldReviewedBy, v))
}

// ReviewedByEqualFold applies the EqualFold predicate on the "reviewed_by" field.
func ReviewedByEqualFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEqualFold(FieldReviewedBy, v))
}

// ReviewedByContainsFold applies the ContainsFold predicate on the "reviewed_by" field.
func ReviewedByContainsFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContainsFold(FieldReviewedBy, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldContainsFold(FieldReason, v))
}

// ReviewedAtEQ applies the EQ predicate on the "reviewed_at" field.
func ReviewedAtEQ(v time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldEQ(FieldReviewedAt, v))
}

// ReviewedAtNEQ applies the NEQ predicate on the "reviewed_at" field.
func ReviewedAtNEQ(v time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNEQ(FieldReviewedAt, v))
}

// ReviewedAtIn applies the In predicate on the "reviewed_at" field.
func ReviewedAtIn(vs ...time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldIn(FieldReviewedAt, vs...))
}

// ReviewedAtNotIn applies the NotIn predicate on the "reviewed_at" field.
func ReviewedAtNotIn(vs ...time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldNotIn(FieldReviewedAt, vs...))
}

// ReviewedAtGT applies the GT predicate on the "reviewed_at" field.
func ReviewedAtGT(v time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGT(FieldReviewedAt, v))
}

// ReviewedAtGTE applies the GTE predicate on the "reviewed_at" field.
func ReviewedAtGTE(v time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldGTE(FieldReviewedAt, v))
}

// ReviewedAtLT applies the LT predicate on the "reviewed_at" field.
func ReviewedAtLT(v time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLT(FieldReviewedAt, v))
}

// ReviewedAtLTE applies the LTE predicate on the "reviewed_at" field.
func ReviewedAtLTE(v time.Time) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.FieldLTE(FieldReviewedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RejectedAlias) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RejectedAlias) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RejectedAlias) predicate.RejectedAlias {
	return predicate.RejectedAlias(sql.NotPredicates(p))
}
