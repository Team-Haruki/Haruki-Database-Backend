// Code generated by ent, DO NOT EDIT.

package maindb

import (
	"fmt"
	"haruki-database/database/schema/chunithm/maindb/chunithmdefaultserver"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChunithmDefaultServer is the model entity for the ChunithmDefaultServer schema.
type ChunithmDefaultServer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ImID holds the value of the "im_id" field.
	ImID string `json:"im_id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Server holds the value of the "server" field.
	Server       string `json:"server,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChunithmDefaultServer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunithmdefaultserver.FieldID:
			values[i] = new(sql.NullInt64)
		case chunithmdefaultserver.FieldImID, chunithmdefaultserver.FieldPlatform, chunithmdefaultserver.FieldServer:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChunithmDefaultServer fields.
func (_m *ChunithmDefaultServer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunithmdefaultserver.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case chunithmdefaultserver.FieldImID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field im_id", values[i])
			} else if value.Valid {
				_m.ImID = value.String
			}
		case chunithmdefaultserver.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				_m.Platform = value.String
			}
		case chunithmdefaultserver.FieldServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server", values[i])
			} else if value.Valid {
				_m.Server = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChunithmDefaultServer.
// This includes values selected through modifiers, order, etc.
func (_m *ChunithmDefaultServer) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ChunithmDefaultServer.
// Note that you need to call ChunithmDefaultServer.Unwrap() before calling this method if this ChunithmDefaultServer
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ChunithmDefaultServer) Update() *ChunithmDefaultServerUpdateOne {
	return NewChunithmDefaultServerClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ChunithmDefaultServer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ChunithmDefaultServer) Unwrap() *ChunithmDefaultServer {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("maindb: ChunithmDefaultServer is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ChunithmDefaultServer) String() string {
	var builder strings.Builder
	builder.WriteString("ChunithmDefaultServer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("im_id=")
	builder.WriteString(_m.ImID)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(_m.Platform)
	builder.WriteString(", ")
	builder.WriteString("server=")
	builder.WriteString(_m.Server)
	builder.WriteByte(')')
	return builder.String()
}

// ChunithmDefaultServers is a parsable slice of ChunithmDefaultServer.
type ChunithmDefaultServers []*ChunithmDefaultServer
