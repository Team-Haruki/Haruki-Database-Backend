// Code generated by ent, DO NOT EDIT.

package music

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmmusic"
	"haruki-database/database/schema/chunithm/music/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunithmMusicUpdate is the builder for updating ChunithmMusic entities.
type ChunithmMusicUpdate struct {
	config
	hooks    []Hook
	mutation *ChunithmMusicMutation
}

// Where appends a list predicates to the ChunithmMusicUpdate builder.
func (_u *ChunithmMusicUpdate) Where(ps ...predicate.ChunithmMusic) *ChunithmMusicUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmMusicUpdate) SetMusicID(v int) *ChunithmMusicUpdate {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableMusicID(v *int) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmMusicUpdate) AddMusicID(v int) *ChunithmMusicUpdate {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ChunithmMusicUpdate) SetTitle(v string) *ChunithmMusicUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableTitle(v *string) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetArtist sets the "artist" field.
func (_u *ChunithmMusicUpdate) SetArtist(v string) *ChunithmMusicUpdate {
	_u.mutation.SetArtist(v)
	return _u
}

// SetNillableArtist sets the "artist" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableArtist(v *string) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetArtist(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *ChunithmMusicUpdate) SetCategory(v string) *ChunithmMusicUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableCategory(v *string) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ChunithmMusicUpdate) ClearCategory() *ChunithmMusicUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetVersion sets the "version" field.
func (_u *ChunithmMusicUpdate) SetVersion(v string) *ChunithmMusicUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableVersion(v *string) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *ChunithmMusicUpdate) ClearVersion() *ChunithmMusicUpdate {
	_u.mutation.ClearVersion()
	return _u
}

// SetReleaseDate sets the "release_date" field.
func (_u *ChunithmMusicUpdate) SetReleaseDate(v time.Time) *ChunithmMusicUpdate {
	_u.mutation.SetReleaseDate(v)
	return _u
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableReleaseDate(v *time.Time) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetReleaseDate(*v)
	}
	return _u
}

// ClearReleaseDate clears the value of the "release_date" field.
func (_u *ChunithmMusicUpdate) ClearReleaseDate() *ChunithmMusicUpdate {
	_u.mutation.ClearReleaseDate()
	return _u
}

// SetIsDeleted sets the "is_deleted" field.
func (_u *ChunithmMusicUpdate) SetIsDeleted(v int) *ChunithmMusicUpdate {
	_u.mutation.ResetIsDeleted()
	_u.mutation.SetIsDeleted(v)
	return _u
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableIsDeleted(v *int) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetIsDeleted(*v)
	}
	return _u
}

// AddIsDeleted adds value to the "is_deleted" field.
func (_u *ChunithmMusicUpdate) AddIsDeleted(v int) *ChunithmMusicUpdate {
	_u.mutation.AddIsDeleted(v)
	return _u
}

// SetDeletedVersion sets the "deleted_version" field.
func (_u *ChunithmMusicUpdate) SetDeletedVersion(v string) *ChunithmMusicUpdate {
	_u.mutation.SetDeletedVersion(v)
	return _u
}

// SetNillableDeletedVersion sets the "deleted_version" field if the given value is not nil.
func (_u *ChunithmMusicUpdate) SetNillableDeletedVersion(v *string) *ChunithmMusicUpdate {
	if v != nil {
		_u.SetDeletedVersion(*v)
	}
	return _u
}

// ClearDeletedVersion clears the value of the "deleted_version" field.
func (_u *ChunithmMusicUpdate) ClearDeletedVersion() *ChunithmMusicUpdate {
	_u.mutation.ClearDeletedVersion()
	return _u
}

// Mutation returns the ChunithmMusicMutation object of the builder.
func (_u *ChunithmMusicUpdate) Mutation() *ChunithmMusicMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChunithmMusicUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmMusicUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChunithmMusicUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmMusicUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmMusicUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := chunithmmusic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Artist(); ok {
		if err := chunithmmusic.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.artist": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := chunithmmusic.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Version(); ok {
		if err := chunithmmusic.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.version": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeletedVersion(); ok {
		if err := chunithmmusic.DeletedVersionValidator(v); err != nil {
			return &ValidationError{Name: "deleted_version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.deleted_version": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmMusicUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmmusic.Table, chunithmmusic.Columns, sqlgraph.NewFieldSpec(chunithmmusic.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusic.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmmusic.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(chunithmmusic.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Artist(); ok {
		_spec.SetField(chunithmmusic.FieldArtist, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(chunithmmusic.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(chunithmmusic.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(chunithmmusic.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(chunithmmusic.FieldVersion, field.TypeString)
	}
	if value, ok := _u.mutation.ReleaseDate(); ok {
		_spec.SetField(chunithmmusic.FieldReleaseDate, field.TypeTime, value)
	}
	if _u.mutation.ReleaseDateCleared() {
		_spec.ClearField(chunithmmusic.FieldReleaseDate, field.TypeTime)
	}
	if value, ok := _u.mutation.IsDeleted(); ok {
		_spec.SetField(chunithmmusic.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIsDeleted(); ok {
		_spec.AddField(chunithmmusic.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DeletedVersion(); ok {
		_spec.SetField(chunithmmusic.FieldDeletedVersion, field.TypeString, value)
	}
	if _u.mutation.DeletedVersionCleared() {
		_spec.ClearField(chunithmmusic.FieldDeletedVersion, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmmusic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChunithmMusicUpdateOne is the builder for updating a single ChunithmMusic entity.
type ChunithmMusicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChunithmMusicMutation
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmMusicUpdateOne) SetMusicID(v int) *ChunithmMusicUpdateOne {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableMusicID(v *int) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmMusicUpdateOne) AddMusicID(v int) *ChunithmMusicUpdateOne {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ChunithmMusicUpdateOne) SetTitle(v string) *ChunithmMusicUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableTitle(v *string) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetArtist sets the "artist" field.
func (_u *ChunithmMusicUpdateOne) SetArtist(v string) *ChunithmMusicUpdateOne {
	_u.mutation.SetArtist(v)
	return _u
}

// SetNillableArtist sets the "artist" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableArtist(v *string) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetArtist(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *ChunithmMusicUpdateOne) SetCategory(v string) *ChunithmMusicUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableCategory(v *string) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ChunithmMusicUpdateOne) ClearCategory() *ChunithmMusicUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetVersion sets the "version" field.
func (_u *ChunithmMusicUpdateOne) SetVersion(v string) *ChunithmMusicUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableVersion(v *string) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *ChunithmMusicUpdateOne) ClearVersion() *ChunithmMusicUpdateOne {
	_u.mutation.ClearVersion()
	return _u
}

// SetReleaseDate sets the "release_date" field.
func (_u *ChunithmMusicUpdateOne) SetReleaseDate(v time.Time) *ChunithmMusicUpdateOne {
	_u.mutation.SetReleaseDate(v)
	return _u
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableReleaseDate(v *time.Time) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetReleaseDate(*v)
	}
	return _u
}

// ClearReleaseDate clears the value of the "release_date" field.
func (_u *ChunithmMusicUpdateOne) ClearReleaseDate() *ChunithmMusicUpdateOne {
	_u.mutation.ClearReleaseDate()
	return _u
}

// SetIsDeleted sets the "is_deleted" field.
func (_u *ChunithmMusicUpdateOne) SetIsDeleted(v int) *ChunithmMusicUpdateOne {
	_u.mutation.ResetIsDeleted()
	_u.mutation.SetIsDeleted(v)
	return _u
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableIsDeleted(v *int) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetIsDeleted(*v)
	}
	return _u
}

// AddIsDeleted adds value to the "is_deleted" field.
func (_u *ChunithmMusicUpdateOne) AddIsDeleted(v int) *ChunithmMusicUpdateOne {
	_u.mutation.AddIsDeleted(v)
	return _u
}

// SetDeletedVersion sets the "deleted_version" field.
func (_u *ChunithmMusicUpdateOne) SetDeletedVersion(v string) *ChunithmMusicUpdateOne {
	_u.mutation.SetDeletedVersion(v)
	return _u
}

// SetNillableDeletedVersion sets the "deleted_version" field if the given value is not nil.
func (_u *ChunithmMusicUpdateOne) SetNillableDeletedVersion(v *string) *ChunithmMusicUpdateOne {
	if v != nil {
		_u.SetDeletedVersion(*v)
	}
	return _u
}

// ClearDeletedVersion clears the value of the "deleted_version" field.
func (_u *ChunithmMusicUpdateOne) ClearDeletedVersion() *ChunithmMusicUpdateOne {
	_u.mutation.ClearDeletedVersion()
	return _u
}

// Mutation returns the ChunithmMusicMutation object of the builder.
func (_u *ChunithmMusicUpdateOne) Mutation() *ChunithmMusicMutation {
	return _u.mutation
}

// Where appends a list predicates to the ChunithmMusicUpdate builder.
func (_u *ChunithmMusicUpdateOne) Where(ps ...predicate.ChunithmMusic) *ChunithmMusicUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChunithmMusicUpdateOne) Select(field string, fields ...string) *ChunithmMusicUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ChunithmMusic entity.
func (_u *ChunithmMusicUpdateOne) Save(ctx context.Context) (*ChunithmMusic, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmMusicUpdateOne) SaveX(ctx context.Context) *ChunithmMusic {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChunithmMusicUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmMusicUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmMusicUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := chunithmmusic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Artist(); ok {
		if err := chunithmmusic.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.artist": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := chunithmmusic.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Version(); ok {
		if err := chunithmmusic.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.version": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeletedVersion(); ok {
		if err := chunithmmusic.DeletedVersionValidator(v); err != nil {
			return &ValidationError{Name: "deleted_version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.deleted_version": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmMusicUpdateOne) sqlSave(ctx context.Context) (_node *ChunithmMusic, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmmusic.Table, chunithmmusic.Columns, sqlgraph.NewFieldSpec(chunithmmusic.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`music: missing "ChunithmMusic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chunithmmusic.FieldID)
		for _, f := range fields {
			if !chunithmmusic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("music: invalid field %q for query", f)}
			}
			if f != chunithmmusic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusic.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmmusic.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(chunithmmusic.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Artist(); ok {
		_spec.SetField(chunithmmusic.FieldArtist, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(chunithmmusic.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(chunithmmusic.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(chunithmmusic.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(chunithmmusic.FieldVersion, field.TypeString)
	}
	if value, ok := _u.mutation.ReleaseDate(); ok {
		_spec.SetField(chunithmmusic.FieldReleaseDate, field.TypeTime, value)
	}
	if _u.mutation.ReleaseDateCleared() {
		_spec.ClearField(chunithmmusic.FieldReleaseDate, field.TypeTime)
	}
	if value, ok := _u.mutation.IsDeleted(); ok {
		_spec.SetField(chunithmmusic.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIsDeleted(); ok {
		_spec.AddField(chunithmmusic.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DeletedVersion(); ok {
		_spec.SetField(chunithmmusic.FieldDeletedVersion, field.TypeString, value)
	}
	if _u.mutation.DeletedVersionCleared() {
		_spec.ClearField(chunithmmusic.FieldDeletedVersion, field.TypeString)
	}
	_node = &ChunithmMusic{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmmusic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
