// Code generated by ent, DO NOT EDIT.

package userbinding

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userbinding type in the database.
	Label = "user_binding"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldImID holds the string denoting the im_id field in the database.
	FieldImID = "im_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldServer holds the string denoting the server field in the database.
	FieldServer = "server"
	// FieldVisible holds the string denoting the visible field in the database.
	FieldVisible = "visible"
	// EdgeDefaultRefs holds the string denoting the default_refs edge name in mutations.
	EdgeDefaultRefs = "default_refs"
	// Table holds the table name of the userbinding in the database.
	Table = "user_bindings"
	// DefaultRefsTable is the table that holds the default_refs relation/edge.
	DefaultRefsTable = "user_default_bindings"
	// DefaultRefsInverseTable is the table name for the UserDefaultBinding entity.
	// It exists in this package in order to avoid circular dependency with the "userdefaultbinding" package.
	DefaultRefsInverseTable = "user_default_bindings"
	// DefaultRefsColumn is the table column denoting the default_refs relation/edge.
	DefaultRefsColumn = "binding_id"
)

// Columns holds all SQL columns for userbinding fields.
var Columns = []string{
	FieldID,
	FieldPlatform,
	FieldImID,
	FieldUserID,
	FieldServer,
	FieldVisible,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PlatformValidator is a validator for the "platform" field. It is called by the builders before save.
	PlatformValidator func(string) error
	// ImIDValidator is a validator for the "im_id" field. It is called by the builders before save.
	ImIDValidator func(string) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// ServerValidator is a validator for the "server" field. It is called by the builders before save.
	ServerValidator func(string) error
	// DefaultVisible holds the default value on creation for the "visible" field.
	DefaultVisible bool
)

// OrderOption defines the ordering options for the UserBinding queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByImID orders the results by the im_id field.
func ByImID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByServer orders the results by the server field.
func ByServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServer, opts...).ToFunc()
}

// ByVisible orders the results by the visible field.
func ByVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisible, opts...).ToFunc()
}

// ByDefaultRefsCount orders the results by default_refs count.
func ByDefaultRefsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDefaultRefsStep(), opts...)
	}
}

// ByDefaultRefs orders the results by default_refs terms.
func ByDefaultRefs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefaultRefsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDefaultRefsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefaultRefsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DefaultRefsTable, DefaultRefsColumn),
	)
}
