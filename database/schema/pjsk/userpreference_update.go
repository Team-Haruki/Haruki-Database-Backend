// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/pjsk/predicate"
	"haruki-database/database/schema/pjsk/userpreference"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPreferenceUpdate is the builder for updating UserPreference entities.
type UserPreferenceUpdate struct {
	config
	hooks    []Hook
	mutation *UserPreferenceMutation
}

// Where appends a list predicates to the UserPreferenceUpdate builder.
func (_u *UserPreferenceUpdate) Where(ps ...predicate.UserPreference) *UserPreferenceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetImID sets the "im_id" field.
func (_u *UserPreferenceUpdate) SetImID(v string) *UserPreferenceUpdate {
	_u.mutation.SetImID(v)
	return _u
}

// SetNillableImID sets the "im_id" field if the given value is not nil.
func (_u *UserPreferenceUpdate) SetNillableImID(v *string) *UserPreferenceUpdate {
	if v != nil {
		_u.SetImID(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *UserPreferenceUpdate) SetPlatform(v string) *UserPreferenceUpdate {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *UserPreferenceUpdate) SetNillablePlatform(v *string) *UserPreferenceUpdate {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetOption sets the "option" field.
func (_u *UserPreferenceUpdate) SetOption(v string) *UserPreferenceUpdate {
	_u.mutation.SetOption(v)
	return _u
}

// SetNillableOption sets the "option" field if the given value is not nil.
func (_u *UserPreferenceUpdate) SetNillableOption(v *string) *UserPreferenceUpdate {
	if v != nil {
		_u.SetOption(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *UserPreferenceUpdate) SetValue(v string) *UserPreferenceUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *UserPreferenceUpdate) SetNillableValue(v *string) *UserPreferenceUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// Mutation returns the UserPreferenceMutation object of the builder.
func (_u *UserPreferenceUpdate) Mutation() *UserPreferenceMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserPreferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserPreferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserPreferenceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserPreferenceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserPreferenceUpdate) check() error {
	if v, ok := _u.mutation.ImID(); ok {
		if err := userpreference.ImIDValidator(v); err != nil {
			return &ValidationError{Name: "im_id", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.im_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Platform(); ok {
		if err := userpreference.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Option(); ok {
		if err := userpreference.OptionValidator(v); err != nil {
			return &ValidationError{Name: "option", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.option": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Value(); ok {
		if err := userpreference.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.value": %w`, err)}
		}
	}
	return nil
}

func (_u *UserPreferenceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpreference.Table, userpreference.Columns, sqlgraph.NewFieldSpec(userpreference.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ImID(); ok {
		_spec.SetField(userpreference.FieldImID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(userpreference.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.Option(); ok {
		_spec.SetField(userpreference.FieldOption, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(userpreference.FieldValue, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserPreferenceUpdateOne is the builder for updating a single UserPreference entity.
type UserPreferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPreferenceMutation
}

// SetImID sets the "im_id" field.
func (_u *UserPreferenceUpdateOne) SetImID(v string) *UserPreferenceUpdateOne {
	_u.mutation.SetImID(v)
	return _u
}

// SetNillableImID sets the "im_id" field if the given value is not nil.
func (_u *UserPreferenceUpdateOne) SetNillableImID(v *string) *UserPreferenceUpdateOne {
	if v != nil {
		_u.SetImID(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *UserPreferenceUpdateOne) SetPlatform(v string) *UserPreferenceUpdateOne {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *UserPreferenceUpdateOne) SetNillablePlatform(v *string) *UserPreferenceUpdateOne {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetOption sets the "option" field.
func (_u *UserPreferenceUpdateOne) SetOption(v string) *UserPreferenceUpdateOne {
	_u.mutation.SetOption(v)
	return _u
}

// SetNillableOption sets the "option" field if the given value is not nil.
func (_u *UserPreferenceUpdateOne) SetNillableOption(v *string) *UserPreferenceUpdateOne {
	if v != nil {
		_u.SetOption(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *UserPreferenceUpdateOne) SetValue(v string) *UserPreferenceUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *UserPreferenceUpdateOne) SetNillableValue(v *string) *UserPreferenceUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// Mutation returns the UserPreferenceMutation object of the builder.
func (_u *UserPreferenceUpdateOne) Mutation() *UserPreferenceMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserPreferenceUpdate builder.
func (_u *UserPreferenceUpdateOne) Where(ps ...predicate.UserPreference) *UserPreferenceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserPreferenceUpdateOne) Select(field string, fields ...string) *UserPreferenceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserPreference entity.
func (_u *UserPreferenceUpdateOne) Save(ctx context.Context) (*UserPreference, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserPreferenceUpdateOne) SaveX(ctx context.Context) *UserPreference {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserPreferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserPreferenceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserPreferenceUpdateOne) check() error {
	if v, ok := _u.mutation.ImID(); ok {
		if err := userpreference.ImIDValidator(v); err != nil {
			return &ValidationError{Name: "im_id", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.im_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Platform(); ok {
		if err := userpreference.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Option(); ok {
		if err := userpreference.OptionValidator(v); err != nil {
			return &ValidationError{Name: "option", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.option": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Value(); ok {
		if err := userpreference.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`pjsk: validator failed for field "UserPreference.value": %w`, err)}
		}
	}
	return nil
}

func (_u *UserPreferenceUpdateOne) sqlSave(ctx context.Context) (_node *UserPreference, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpreference.Table, userpreference.Columns, sqlgraph.NewFieldSpec(userpreference.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`pjsk: missing "UserPreference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpreference.FieldID)
		for _, f := range fields {
			if !userpreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("pjsk: invalid field %q for query", f)}
			}
			if f != userpreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ImID(); ok {
		_spec.SetField(userpreference.FieldImID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(userpreference.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.Option(); ok {
		_spec.SetField(userpreference.FieldOption, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(userpreference.FieldValue, field.TypeString, value)
	}
	_node = &UserPreference{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
