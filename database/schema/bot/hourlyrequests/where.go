// Code generated by ent, DO NOT EDIT.

package hourlyrequests

import (
	"haruki-database/database/schema/bot/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldLTE(FieldID, id))
}

// HourKey applies equality check predicate on the "hour_key" field. It's identical to HourKeyEQ.
func HourKey(v time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldEQ(FieldHourKey, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldEQ(FieldCount, v))
}

// HourKeyEQ applies the EQ predicate on the "hour_key" field.
func HourKeyEQ(v time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldEQ(FieldHourKey, v))
}

// HourKeyNEQ applies the NEQ predicate on the "hour_key" field.
func HourKeyNEQ(v time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldNEQ(FieldHourKey, v))
}

// HourKeyIn applies the In predicate on the "hour_key" field.
func HourKeyIn(vs ...time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldIn(FieldHourKey, vs...))
}

// HourKeyNotIn applies the NotIn predicate on the "hour_key" field.
func HourKeyNotIn(vs ...time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldNotIn(FieldHourKey, vs...))
}

// HourKeyGT applies the GT predicate on the "hour_key" field.
func HourKeyGT(v time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldGT(FieldHourKey, v))
}

// HourKeyGTE applies the GTE predicate on the "hour_key" field.
func HourKeyGTE(v time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldGTE(FieldHourKey, v))
}

// HourKeyLT applies the LT predicate on the "hour_key" field.
func HourKeyLT(v time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldLT(FieldHourKey, v))
}

// HourKeyLTE applies the LTE predicate on the "hour_key" field.
func HourKeyLTE(v time.Time) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldLTE(FieldHourKey, v))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.FieldLTE(FieldCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HourlyRequests) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HourlyRequests) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HourlyRequests) predicate.HourlyRequests {
	return predicate.HourlyRequests(sql.NotPredicates(p))
}
