// Code generated by ent, DO NOT EDIT.

package requestsranking

import (
	"haruki-database/database/schema/bot/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldLTE(FieldID, id))
}

// BotID applies equality check predicate on the "bot_id" field. It's identical to BotIDEQ.
func BotID(v int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldEQ(FieldBotID, v))
}

// Counts applies equality check predicate on the "counts" field. It's identical to CountsEQ.
func Counts(v int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldEQ(FieldCounts, v))
}

// BotIDEQ applies the EQ predicate on the "bot_id" field.
func BotIDEQ(v int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldEQ(FieldBotID, v))
}

// BotIDNEQ applies the NEQ predicate on the "bot_id" field.
func BotIDNEQ(v int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldNEQ(FieldBotID, v))
}

// BotIDIn applies the In predicate on the "bot_id" field.
func BotIDIn(vs ...int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldIn(FieldBotID, vs...))
}

// BotIDNotIn applies the NotIn predicate on the "bot_id" field.
func BotIDNotIn(vs ...int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldNotIn(FieldBotID, vs...))
}

// BotIDGT applies the GT predicate on the "bot_id" field.
func BotIDGT(v int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldGT(FieldBotID, v))
}

// BotIDGTE applies the GTE predicate on the "bot_id" field.
func BotIDGTE(v int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldGTE(FieldBotID, v))
}

// BotIDLT applies the LT predicate on the "bot_id" field.
func BotIDLT(v int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldLT(FieldBotID, v))
}

// BotIDLTE applies the LTE predicate on the "bot_id" field.
func BotIDLTE(v int) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldLTE(FieldBotID, v))
}

// CountsEQ applies the EQ predicate on the "counts" field.
func CountsEQ(v int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldEQ(FieldCounts, v))
}

// CountsNEQ applies the NEQ predicate on the "counts" field.
func CountsNEQ(v int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldNEQ(FieldCounts, v))
}

// CountsIn applies the In predicate on the "counts" field.
func CountsIn(vs ...int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldIn(FieldCounts, vs...))
}

// CountsNotIn applies the NotIn predicate on the "counts" field.
func CountsNotIn(vs ...int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldNotIn(FieldCounts, vs...))
}

// CountsGT applies the GT predicate on the "counts" field.
func CountsGT(v int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldGT(FieldCounts, v))
}

// CountsGTE applies the GTE predicate on the "counts" field.
func CountsGTE(v int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldGTE(FieldCounts, v))
}

// CountsLT applies the LT predicate on the "counts" field.
func CountsLT(v int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldLT(FieldCounts, v))
}

// CountsLTE applies the LTE predicate on the "counts" field.
func CountsLTE(v int64) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldLTE(FieldCounts, v))
}

// CountsIsNil applies the IsNil predicate on the "counts" field.
func CountsIsNil() predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldIsNull(FieldCounts))
}

// CountsNotNil applies the NotNil predicate on the "counts" field.
func CountsNotNil() predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.FieldNotNull(FieldCounts))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RequestsRanking) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RequestsRanking) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RequestsRanking) predicate.RequestsRanking {
	return predicate.RequestsRanking(sql.NotPredicates(p))
}
