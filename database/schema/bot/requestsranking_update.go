// Code generated by ent, DO NOT EDIT.

package bot

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/bot/predicate"
	"haruki-database/database/schema/bot/requestsranking"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RequestsRankingUpdate is the builder for updating RequestsRanking entities.
type RequestsRankingUpdate struct {
	config
	hooks    []Hook
	mutation *RequestsRankingMutation
}

// Where appends a list predicates to the RequestsRankingUpdate builder.
func (_u *RequestsRankingUpdate) Where(ps ...predicate.RequestsRanking) *RequestsRankingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetBotID sets the "bot_id" field.
func (_u *RequestsRankingUpdate) SetBotID(v int) *RequestsRankingUpdate {
	_u.mutation.ResetBotID()
	_u.mutation.SetBotID(v)
	return _u
}

// SetNillableBotID sets the "bot_id" field if the given value is not nil.
func (_u *RequestsRankingUpdate) SetNillableBotID(v *int) *RequestsRankingUpdate {
	if v != nil {
		_u.SetBotID(*v)
	}
	return _u
}

// AddBotID adds value to the "bot_id" field.
func (_u *RequestsRankingUpdate) AddBotID(v int) *RequestsRankingUpdate {
	_u.mutation.AddBotID(v)
	return _u
}

// SetCounts sets the "counts" field.
func (_u *RequestsRankingUpdate) SetCounts(v int64) *RequestsRankingUpdate {
	_u.mutation.ResetCounts()
	_u.mutation.SetCounts(v)
	return _u
}

// SetNillableCounts sets the "counts" field if the given value is not nil.
func (_u *RequestsRankingUpdate) SetNillableCounts(v *int64) *RequestsRankingUpdate {
	if v != nil {
		_u.SetCounts(*v)
	}
	return _u
}

// AddCounts adds value to the "counts" field.
func (_u *RequestsRankingUpdate) AddCounts(v int64) *RequestsRankingUpdate {
	_u.mutation.AddCounts(v)
	return _u
}

// ClearCounts clears the value of the "counts" field.
func (_u *RequestsRankingUpdate) ClearCounts() *RequestsRankingUpdate {
	_u.mutation.ClearCounts()
	return _u
}

// Mutation returns the RequestsRankingMutation object of the builder.
func (_u *RequestsRankingUpdate) Mutation() *RequestsRankingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RequestsRankingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RequestsRankingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RequestsRankingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RequestsRankingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *RequestsRankingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(requestsranking.Table, requestsranking.Columns, sqlgraph.NewFieldSpec(requestsranking.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BotID(); ok {
		_spec.SetField(requestsranking.FieldBotID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBotID(); ok {
		_spec.AddField(requestsranking.FieldBotID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Counts(); ok {
		_spec.SetField(requestsranking.FieldCounts, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCounts(); ok {
		_spec.AddField(requestsranking.FieldCounts, field.TypeInt64, value)
	}
	if _u.mutation.CountsCleared() {
		_spec.ClearField(requestsranking.FieldCounts, field.TypeInt64)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestsranking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RequestsRankingUpdateOne is the builder for updating a single RequestsRanking entity.
type RequestsRankingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestsRankingMutation
}

// SetBotID sets the "bot_id" field.
func (_u *RequestsRankingUpdateOne) SetBotID(v int) *RequestsRankingUpdateOne {
	_u.mutation.ResetBotID()
	_u.mutation.SetBotID(v)
	return _u
}

// SetNillableBotID sets the "bot_id" field if the given value is not nil.
func (_u *RequestsRankingUpdateOne) SetNillableBotID(v *int) *RequestsRankingUpdateOne {
	if v != nil {
		_u.SetBotID(*v)
	}
	return _u
}

// AddBotID adds value to the "bot_id" field.
func (_u *RequestsRankingUpdateOne) AddBotID(v int) *RequestsRankingUpdateOne {
	_u.mutation.AddBotID(v)
	return _u
}

// SetCounts sets the "counts" field.
func (_u *RequestsRankingUpdateOne) SetCounts(v int64) *RequestsRankingUpdateOne {
	_u.mutation.ResetCounts()
	_u.mutation.SetCounts(v)
	return _u
}

// SetNillableCounts sets the "counts" field if the given value is not nil.
func (_u *RequestsRankingUpdateOne) SetNillableCounts(v *int64) *RequestsRankingUpdateOne {
	if v != nil {
		_u.SetCounts(*v)
	}
	return _u
}

// AddCounts adds value to the "counts" field.
func (_u *RequestsRankingUpdateOne) AddCounts(v int64) *RequestsRankingUpdateOne {
	_u.mutation.AddCounts(v)
	return _u
}

// ClearCounts clears the value of the "counts" field.
func (_u *RequestsRankingUpdateOne) ClearCounts() *RequestsRankingUpdateOne {
	_u.mutation.ClearCounts()
	return _u
}

// Mutation returns the RequestsRankingMutation object of the builder.
func (_u *RequestsRankingUpdateOne) Mutation() *RequestsRankingMutation {
	return _u.mutation
}

// Where appends a list predicates to the RequestsRankingUpdate builder.
func (_u *RequestsRankingUpdateOne) Where(ps ...predicate.RequestsRanking) *RequestsRankingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RequestsRankingUpdateOne) Select(field string, fields ...string) *RequestsRankingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RequestsRanking entity.
func (_u *RequestsRankingUpdateOne) Save(ctx context.Context) (*RequestsRanking, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RequestsRankingUpdateOne) SaveX(ctx context.Context) *RequestsRanking {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RequestsRankingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RequestsRankingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *RequestsRankingUpdateOne) sqlSave(ctx context.Context) (_node *RequestsRanking, err error) {
	_spec := sqlgraph.NewUpdateSpec(requestsranking.Table, requestsranking.Columns, sqlgraph.NewFieldSpec(requestsranking.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`bot: missing "RequestsRanking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requestsranking.FieldID)
		for _, f := range fields {
			if !requestsranking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("bot: invalid field %q for query", f)}
			}
			if f != requestsranking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BotID(); ok {
		_spec.SetField(requestsranking.FieldBotID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBotID(); ok {
		_spec.AddField(requestsranking.FieldBotID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Counts(); ok {
		_spec.SetField(requestsranking.FieldCounts, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCounts(); ok {
		_spec.AddField(requestsranking.FieldCounts, field.TypeInt64, value)
	}
	if _u.mutation.CountsCleared() {
		_spec.ClearField(requestsranking.FieldCounts, field.TypeInt64)
	}
	_node = &RequestsRanking{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestsranking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
