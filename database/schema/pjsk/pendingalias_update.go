// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/pjsk/pendingalias"
	"haruki-database/database/schema/pjsk/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingAliasUpdate is the builder for updating PendingAlias entities.
type PendingAliasUpdate struct {
	config
	hooks    []Hook
	mutation *PendingAliasMutation
}

// Where appends a list predicates to the PendingAliasUpdate builder.
func (_u *PendingAliasUpdate) Where(ps ...predicate.PendingAlias) *PendingAliasUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAliasType sets the "alias_type" field.
func (_u *PendingAliasUpdate) SetAliasType(v string) *PendingAliasUpdate {
	_u.mutation.SetAliasType(v)
	return _u
}

// SetNillableAliasType sets the "alias_type" field if the given value is not nil.
func (_u *PendingAliasUpdate) SetNillableAliasType(v *string) *PendingAliasUpdate {
	if v != nil {
		_u.SetAliasType(*v)
	}
	return _u
}

// SetAliasTypeID sets the "alias_type_id" field.
func (_u *PendingAliasUpdate) SetAliasTypeID(v int) *PendingAliasUpdate {
	_u.mutation.ResetAliasTypeID()
	_u.mutation.SetAliasTypeID(v)
	return _u
}

// SetNillableAliasTypeID sets the "alias_type_id" field if the given value is not nil.
func (_u *PendingAliasUpdate) SetNillableAliasTypeID(v *int) *PendingAliasUpdate {
	if v != nil {
		_u.SetAliasTypeID(*v)
	}
	return _u
}

// AddAliasTypeID adds value to the "alias_type_id" field.
func (_u *PendingAliasUpdate) AddAliasTypeID(v int) *PendingAliasUpdate {
	_u.mutation.AddAliasTypeID(v)
	return _u
}

// SetAlias sets the "alias" field.
func (_u *PendingAliasUpdate) SetAlias(v string) *PendingAliasUpdate {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *PendingAliasUpdate) SetNillableAlias(v *string) *PendingAliasUpdate {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// SetSubmittedBy sets the "submitted_by" field.
func (_u *PendingAliasUpdate) SetSubmittedBy(v string) *PendingAliasUpdate {
	_u.mutation.SetSubmittedBy(v)
	return _u
}

// SetNillableSubmittedBy sets the "submitted_by" field if the given value is not nil.
func (_u *PendingAliasUpdate) SetNillableSubmittedBy(v *string) *PendingAliasUpdate {
	if v != nil {
		_u.SetSubmittedBy(*v)
	}
	return _u
}

// SetSubmittedAt sets the "submitted_at" field.
func (_u *PendingAliasUpdate) SetSubmittedAt(v time.Time) *PendingAliasUpdate {
	_u.mutation.SetSubmittedAt(v)
	return _u
}

// SetNillableSubmittedAt sets the "submitted_at" field if the given value is not nil.
func (_u *PendingAliasUpdate) SetNillableSubmittedAt(v *time.Time) *PendingAliasUpdate {
	if v != nil {
		_u.SetSubmittedAt(*v)
	}
	return _u
}

// Mutation returns the PendingAliasMutation object of the builder.
func (_u *PendingAliasUpdate) Mutation() *PendingAliasMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PendingAliasUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PendingAliasUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PendingAliasUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PendingAliasUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PendingAliasUpdate) check() error {
	if v, ok := _u.mutation.AliasType(); ok {
		if err := pendingalias.AliasTypeValidator(v); err != nil {
			return &ValidationError{Name: "alias_type", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.alias_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Alias(); ok {
		if err := pendingalias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.alias": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SubmittedBy(); ok {
		if err := pendingalias.SubmittedByValidator(v); err != nil {
			return &ValidationError{Name: "submitted_by", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.submitted_by": %w`, err)}
		}
	}
	return nil
}

func (_u *PendingAliasUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pendingalias.Table, pendingalias.Columns, sqlgraph.NewFieldSpec(pendingalias.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AliasType(); ok {
		_spec.SetField(pendingalias.FieldAliasType, field.TypeString, value)
	}
	if value, ok := _u.mutation.AliasTypeID(); ok {
		_spec.SetField(pendingalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAliasTypeID(); ok {
		_spec.AddField(pendingalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(pendingalias.FieldAlias, field.TypeString, value)
	}
	if value, ok := _u.mutation.SubmittedBy(); ok {
		_spec.SetField(pendingalias.FieldSubmittedBy, field.TypeString, value)
	}
	if value, ok := _u.mutation.SubmittedAt(); ok {
		_spec.SetField(pendingalias.FieldSubmittedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PendingAliasUpdateOne is the builder for updating a single PendingAlias entity.
type PendingAliasUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PendingAliasMutation
}

// SetAliasType sets the "alias_type" field.
func (_u *PendingAliasUpdateOne) SetAliasType(v string) *PendingAliasUpdateOne {
	_u.mutation.SetAliasType(v)
	return _u
}

// SetNillableAliasType sets the "alias_type" field if the given value is not nil.
func (_u *PendingAliasUpdateOne) SetNillableAliasType(v *string) *PendingAliasUpdateOne {
	if v != nil {
		_u.SetAliasType(*v)
	}
	return _u
}

// SetAliasTypeID sets the "alias_type_id" field.
func (_u *PendingAliasUpdateOne) SetAliasTypeID(v int) *PendingAliasUpdateOne {
	_u.mutation.ResetAliasTypeID()
	_u.mutation.SetAliasTypeID(v)
	return _u
}

// SetNillableAliasTypeID sets the "alias_type_id" field if the given value is not nil.
func (_u *PendingAliasUpdateOne) SetNillableAliasTypeID(v *int) *PendingAliasUpdateOne {
	if v != nil {
		_u.SetAliasTypeID(*v)
	}
	return _u
}

// AddAliasTypeID adds value to the "alias_type_id" field.
func (_u *PendingAliasUpdateOne) AddAliasTypeID(v int) *PendingAliasUpdateOne {
	_u.mutation.AddAliasTypeID(v)
	return _u
}

// SetAlias sets the "alias" field.
func (_u *PendingAliasUpdateOne) SetAlias(v string) *PendingAliasUpdateOne {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *PendingAliasUpdateOne) SetNillableAlias(v *string) *PendingAliasUpdateOne {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// SetSubmittedBy sets the "submitted_by" field.
func (_u *PendingAliasUpdateOne) SetSubmittedBy(v string) *PendingAliasUpdateOne {
	_u.mutation.SetSubmittedBy(v)
	return _u
}

// SetNillableSubmittedBy sets the "submitted_by" field if the given value is not nil.
func (_u *PendingAliasUpdateOne) SetNillableSubmittedBy(v *string) *PendingAliasUpdateOne {
	if v != nil {
		_u.SetSubmittedBy(*v)
	}
	return _u
}

// SetSubmittedAt sets the "submitted_at" field.
func (_u *PendingAliasUpdateOne) SetSubmittedAt(v time.Time) *PendingAliasUpdateOne {
	_u.mutation.SetSubmittedAt(v)
	return _u
}

// SetNillableSubmittedAt sets the "submitted_at" field if the given value is not nil.
func (_u *PendingAliasUpdateOne) SetNillableSubmittedAt(v *time.Time) *PendingAliasUpdateOne {
	if v != nil {
		_u.SetSubmittedAt(*v)
	}
	return _u
}

// Mutation returns the PendingAliasMutation object of the builder.
func (_u *PendingAliasUpdateOne) Mutation() *PendingAliasMutation {
	return _u.mutation
}

// Where appends a list predicates to the PendingAliasUpdate builder.
func (_u *PendingAliasUpdateOne) Where(ps ...predicate.PendingAlias) *PendingAliasUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PendingAliasUpdateOne) Select(field string, fields ...string) *PendingAliasUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PendingAlias entity.
func (_u *PendingAliasUpdateOne) Save(ctx context.Context) (*PendingAlias, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PendingAliasUpdateOne) SaveX(ctx context.Context) *PendingAlias {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PendingAliasUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PendingAliasUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PendingAliasUpdateOne) check() error {
	if v, ok := _u.mutation.AliasType(); ok {
		if err := pendingalias.AliasTypeValidator(v); err != nil {
			return &ValidationError{Name: "alias_type", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.alias_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Alias(); ok {
		if err := pendingalias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.alias": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SubmittedBy(); ok {
		if err := pendingalias.SubmittedByValidator(v); err != nil {
			return &ValidationError{Name: "submitted_by", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.submitted_by": %w`, err)}
		}
	}
	return nil
}

func (_u *PendingAliasUpdateOne) sqlSave(ctx context.Context) (_node *PendingAlias, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pendingalias.Table, pendingalias.Columns, sqlgraph.NewFieldSpec(pendingalias.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`pjsk: missing "PendingAlias.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pendingalias.FieldID)
		for _, f := range fields {
			if !pendingalias.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("pjsk: invalid field %q for query", f)}
			}
			if f != pendingalias.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AliasType(); ok {
		_spec.SetField(pendingalias.FieldAliasType, field.TypeString, value)
	}
	if value, ok := _u.mutation.AliasTypeID(); ok {
		_spec.SetField(pendingalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAliasTypeID(); ok {
		_spec.AddField(pendingalias.FieldAliasTypeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(pendingalias.FieldAlias, field.TypeString, value)
	}
	if value, ok := _u.mutation.SubmittedBy(); ok {
		_spec.SetField(pendingalias.FieldSubmittedBy, field.TypeString, value)
	}
	if value, ok := _u.mutation.SubmittedAt(); ok {
		_spec.SetField(pendingalias.FieldSubmittedAt, field.TypeTime, value)
	}
	_node = &PendingAlias{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
