// Code generated by ent, DO NOT EDIT.

package chunithmchartdata

import (
	"haruki-database/database/schema/chunithm/music/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldID, id))
}

// MusicID applies equality check predicate on the "music_id" field. It's identical to MusicIDEQ.
func MusicID(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldMusicID, v))
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldDifficulty, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldCreator, v))
}

// Bpm applies equality check predicate on the "bpm" field. It's identical to BpmEQ.
func Bpm(v float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldBpm, v))
}

// TapCount applies equality check predicate on the "tap_count" field. It's identical to TapCountEQ.
func TapCount(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldTapCount, v))
}

// HoldCount applies equality check predicate on the "hold_count" field. It's identical to HoldCountEQ.
func HoldCount(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldHoldCount, v))
}

// SlideCount applies equality check predicate on the "slide_count" field. It's identical to SlideCountEQ.
func SlideCount(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldSlideCount, v))
}

// AirCount applies equality check predicate on the "air_count" field. It's identical to AirCountEQ.
func AirCount(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldAirCount, v))
}

// FlickCount applies equality check predicate on the "flick_count" field. It's identical to FlickCountEQ.
func FlickCount(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldFlickCount, v))
}

// TotalCount applies equality check predicate on the "total_count" field. It's identical to TotalCountEQ.
func TotalCount(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldTotalCount, v))
}

// MusicIDEQ applies the EQ predicate on the "music_id" field.
func MusicIDEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldMusicID, v))
}

// MusicIDNEQ applies the NEQ predicate on the "music_id" field.
func MusicIDNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldMusicID, v))
}

// MusicIDIn applies the In predicate on the "music_id" field.
func MusicIDIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldMusicID, vs...))
}

// MusicIDNotIn applies the NotIn predicate on the "music_id" field.
func MusicIDNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldMusicID, vs...))
}

// MusicIDGT applies the GT predicate on the "music_id" field.
func MusicIDGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldMusicID, v))
}

// MusicIDGTE applies the GTE predicate on the "music_id" field.
func MusicIDGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldMusicID, v))
}

// MusicIDLT applies the LT predicate on the "music_id" field.
func MusicIDLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldMusicID, v))
}

// MusicIDLTE applies the LTE predicate on the "music_id" field.
func MusicIDLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldMusicID, v))
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldDifficulty, v))
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldDifficulty, v))
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldDifficulty, vs...))
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldDifficulty, vs...))
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldDifficulty, v))
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldDifficulty, v))
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldDifficulty, v))
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldDifficulty, v))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldCreator))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldContainsFold(FieldCreator, v))
}

// BpmEQ applies the EQ predicate on the "bpm" field.
func BpmEQ(v float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldBpm, v))
}

// BpmNEQ applies the NEQ predicate on the "bpm" field.
func BpmNEQ(v float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldBpm, v))
}

// BpmIn applies the In predicate on the "bpm" field.
func BpmIn(vs ...float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldBpm, vs...))
}

// BpmNotIn applies the NotIn predicate on the "bpm" field.
func BpmNotIn(vs ...float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldBpm, vs...))
}

// BpmGT applies the GT predicate on the "bpm" field.
func BpmGT(v float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldBpm, v))
}

// BpmGTE applies the GTE predicate on the "bpm" field.
func BpmGTE(v float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldBpm, v))
}

// BpmLT applies the LT predicate on the "bpm" field.
func BpmLT(v float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldBpm, v))
}

// BpmLTE applies the LTE predicate on the "bpm" field.
func BpmLTE(v float64) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldBpm, v))
}

// BpmIsNil applies the IsNil predicate on the "bpm" field.
func BpmIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldBpm))
}

// BpmNotNil applies the NotNil predicate on the "bpm" field.
func BpmNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldBpm))
}

// TapCountEQ applies the EQ predicate on the "tap_count" field.
func TapCountEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldTapCount, v))
}

// TapCountNEQ applies the NEQ predicate on the "tap_count" field.
func TapCountNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldTapCount, v))
}

// TapCountIn applies the In predicate on the "tap_count" field.
func TapCountIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldTapCount, vs...))
}

// TapCountNotIn applies the NotIn predicate on the "tap_count" field.
func TapCountNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldTapCount, vs...))
}

// TapCountGT applies the GT predicate on the "tap_count" field.
func TapCountGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldTapCount, v))
}

// TapCountGTE applies the GTE predicate on the "tap_count" field.
func TapCountGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldTapCount, v))
}

// TapCountLT applies the LT predicate on the "tap_count" field.
func TapCountLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldTapCount, v))
}

// TapCountLTE applies the LTE predicate on the "tap_count" field.
func TapCountLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldTapCount, v))
}

// TapCountIsNil applies the IsNil predicate on the "tap_count" field.
func TapCountIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldTapCount))
}

// TapCountNotNil applies the NotNil predicate on the "tap_count" field.
func TapCountNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldTapCount))
}

// HoldCountEQ applies the EQ predicate on the "hold_count" field.
func HoldCountEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldHoldCount, v))
}

// HoldCountNEQ applies the NEQ predicate on the "hold_count" field.
func HoldCountNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldHoldCount, v))
}

// HoldCountIn applies the In predicate on the "hold_count" field.
func HoldCountIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldHoldCount, vs...))
}

// HoldCountNotIn applies the NotIn predicate on the "hold_count" field.
func HoldCountNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldHoldCount, vs...))
}

// HoldCountGT applies the GT predicate on the "hold_count" field.
func HoldCountGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldHoldCount, v))
}

// HoldCountGTE applies the GTE predicate on the "hold_count" field.
func HoldCountGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldHoldCount, v))
}

// HoldCountLT applies the LT predicate on the "hold_count" field.
func HoldCountLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldHoldCount, v))
}

// HoldCountLTE applies the LTE predicate on the "hold_count" field.
func HoldCountLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldHoldCount, v))
}

// HoldCountIsNil applies the IsNil predicate on the "hold_count" field.
func HoldCountIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldHoldCount))
}

// HoldCountNotNil applies the NotNil predicate on the "hold_count" field.
func HoldCountNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldHoldCount))
}

// SlideCountEQ applies the EQ predicate on the "slide_count" field.
func SlideCountEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldSlideCount, v))
}

// SlideCountNEQ applies the NEQ predicate on the "slide_count" field.
func SlideCountNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldSlideCount, v))
}

// SlideCountIn applies the In predicate on the "slide_count" field.
func SlideCountIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldSlideCount, vs...))
}

// SlideCountNotIn applies the NotIn predicate on the "slide_count" field.
func SlideCountNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldSlideCount, vs...))
}

// SlideCountGT applies the GT predicate on the "slide_count" field.
func SlideCountGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldSlideCount, v))
}

// SlideCountGTE applies the GTE predicate on the "slide_count" field.
func SlideCountGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldSlideCount, v))
}

// SlideCountLT applies the LT predicate on the "slide_count" field.
func SlideCountLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldSlideCount, v))
}

// SlideCountLTE applies the LTE predicate on the "slide_count" field.
func SlideCountLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldSlideCount, v))
}

// SlideCountIsNil applies the IsNil predicate on the "slide_count" field.
func SlideCountIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldSlideCount))
}

// SlideCountNotNil applies the NotNil predicate on the "slide_count" field.
func SlideCountNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldSlideCount))
}

// AirCountEQ applies the EQ predicate on the "air_count" field.
func AirCountEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldAirCount, v))
}

// AirCountNEQ applies the NEQ predicate on the "air_count" field.
func AirCountNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldAirCount, v))
}

// AirCountIn applies the In predicate on the "air_count" field.
func AirCountIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldAirCount, vs...))
}

// AirCountNotIn applies the NotIn predicate on the "air_count" field.
func AirCountNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldAirCount, vs...))
}

// AirCountGT applies the GT predicate on the "air_count" field.
func AirCountGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldAirCount, v))
}

// AirCountGTE applies the GTE predicate on the "air_count" field.
func AirCountGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldAirCount, v))
}

// AirCountLT applies the LT predicate on the "air_count" field.
func AirCountLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldAirCount, v))
}

// AirCountLTE applies the LTE predicate on the "air_count" field.
func AirCountLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldAirCount, v))
}

// AirCountIsNil applies the IsNil predicate on the "air_count" field.
func AirCountIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldAirCount))
}

// AirCountNotNil applies the NotNil predicate on the "air_count" field.
func AirCountNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldAirCount))
}

// FlickCountEQ applies the EQ predicate on the "flick_count" field.
func FlickCountEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldFlickCount, v))
}

// FlickCountNEQ applies the NEQ predicate on the "flick_count" field.
func FlickCountNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldFlickCount, v))
}

// FlickCountIn applies the In predicate on the "flick_count" field.
func FlickCountIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldFlickCount, vs...))
}

// FlickCountNotIn applies the NotIn predicate on the "flick_count" field.
func FlickCountNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldFlickCount, vs...))
}

// FlickCountGT applies the GT predicate on the "flick_count" field.
func FlickCountGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldFlickCount, v))
}

// FlickCountGTE applies the GTE predicate on the "flick_count" field.
func FlickCountGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldFlickCount, v))
}

// FlickCountLT applies the LT predicate on the "flick_count" field.
func FlickCountLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldFlickCount, v))
}

// FlickCountLTE applies the LTE predicate on the "flick_count" field.
func FlickCountLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldFlickCount, v))
}

// FlickCountIsNil applies the IsNil predicate on the "flick_count" field.
func FlickCountIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldFlickCount))
}

// FlickCountNotNil applies the NotNil predicate on the "flick_count" field.
func FlickCountNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldFlickCount))
}

// TotalCountEQ applies the EQ predicate on the "total_count" field.
func TotalCountEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldEQ(FieldTotalCount, v))
}

// TotalCountNEQ applies the NEQ predicate on the "total_count" field.
func TotalCountNEQ(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNEQ(FieldTotalCount, v))
}

// TotalCountIn applies the In predicate on the "total_count" field.
func TotalCountIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIn(FieldTotalCount, vs...))
}

// TotalCountNotIn applies the NotIn predicate on the "total_count" field.
func TotalCountNotIn(vs ...int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotIn(FieldTotalCount, vs...))
}

// TotalCountGT applies the GT predicate on the "total_count" field.
func TotalCountGT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGT(FieldTotalCount, v))
}

// TotalCountGTE applies the GTE predicate on the "total_count" field.
func TotalCountGTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldGTE(FieldTotalCount, v))
}

// TotalCountLT applies the LT predicate on the "total_count" field.
func TotalCountLT(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLT(FieldTotalCount, v))
}

// TotalCountLTE applies the LTE predicate on the "total_count" field.
func TotalCountLTE(v int) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldLTE(FieldTotalCount, v))
}

// TotalCountIsNil applies the IsNil predicate on the "total_count" field.
func TotalCountIsNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldIsNull(FieldTotalCount))
}

// TotalCountNotNil applies the NotNil predicate on the "total_count" field.
func TotalCountNotNil() predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.FieldNotNull(FieldTotalCount))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChunithmChartData) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChunithmChartData) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChunithmChartData) predicate.ChunithmChartData {
	return predicate.ChunithmChartData(sql.NotPredicates(p))
}
