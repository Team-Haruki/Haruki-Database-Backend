// Code generated by ent, DO NOT EDIT.

package rejectedalias

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the rejectedalias type in the database.
	Label = "rejected_alias"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAliasType holds the string denoting the alias_type field in the database.
	FieldAliasType = "alias_type"
	// FieldAliasTypeID holds the string denoting the alias_type_id field in the database.
	FieldAliasTypeID = "alias_type_id"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// FieldReviewedBy holds the string denoting the reviewed_by field in the database.
	FieldReviewedBy = "reviewed_by"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldReviewedAt holds the string denoting the reviewed_at field in the database.
	FieldReviewedAt = "reviewed_at"
	// Table holds the table name of the rejectedalias in the database.
	Table = "rejected_alias"
)

// Columns holds all SQL columns for rejectedalias fields.
var Columns = []string{
	FieldID,
	FieldAliasType,
	FieldAliasTypeID,
	FieldAlias,
	FieldReviewedBy,
	FieldReason,
	FieldReviewedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AliasTypeValidator is a validator for the "alias_type" field. It is called by the builders before save.
	AliasTypeValidator func(string) error
	// AliasValidator is a validator for the "alias" field. It is called by the builders before save.
	AliasValidator func(string) error
	// ReviewedByValidator is a validator for the "reviewed_by" field. It is called by the builders before save.
	ReviewedByValidator func(string) error
	// ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	ReasonValidator func(string) error
)

// OrderOption defines the ordering options for the RejectedAlias queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAliasType orders the results by the alias_type field.
func ByAliasType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAliasType, opts...).ToFunc()
}

// ByAliasTypeID orders the results by the alias_type_id field.
func ByAliasTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAliasTypeID, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}

// ByReviewedBy orders the results by the reviewed_by field.
func ByReviewedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewedBy, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByReviewedAt orders the results by the reviewed_at field.
func ByReviewedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewedAt, opts...).ToFunc()
}
