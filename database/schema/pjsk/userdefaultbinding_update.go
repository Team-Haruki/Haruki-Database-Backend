// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/pjsk/predicate"
	"haruki-database/database/schema/pjsk/userbinding"
	"haruki-database/database/schema/pjsk/userdefaultbinding"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDefaultBindingUpdate is the builder for updating UserDefaultBinding entities.
type UserDefaultBindingUpdate struct {
	config
	hooks    []Hook
	mutation *UserDefaultBindingMutation
}

// Where appends a list predicates to the UserDefaultBindingUpdate builder.
func (_u *UserDefaultBindingUpdate) Where(ps ...predicate.UserDefaultBinding) *UserDefaultBindingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetImID sets the "im_id" field.
func (_u *UserDefaultBindingUpdate) SetImID(v string) *UserDefaultBindingUpdate {
	_u.mutation.SetImID(v)
	return _u
}

// SetNillableImID sets the "im_id" field if the given value is not nil.
func (_u *UserDefaultBindingUpdate) SetNillableImID(v *string) *UserDefaultBindingUpdate {
	if v != nil {
		_u.SetImID(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *UserDefaultBindingUpdate) SetPlatform(v string) *UserDefaultBindingUpdate {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *UserDefaultBindingUpdate) SetNillablePlatform(v *string) *UserDefaultBindingUpdate {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetServer sets the "server" field.
func (_u *UserDefaultBindingUpdate) SetServer(v string) *UserDefaultBindingUpdate {
	_u.mutation.SetServer(v)
	return _u
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (_u *UserDefaultBindingUpdate) SetNillableServer(v *string) *UserDefaultBindingUpdate {
	if v != nil {
		_u.SetServer(*v)
	}
	return _u
}

// SetBindingID sets the "binding_id" field.
func (_u *UserDefaultBindingUpdate) SetBindingID(v int) *UserDefaultBindingUpdate {
	_u.mutation.SetBindingID(v)
	return _u
}

// SetNillableBindingID sets the "binding_id" field if the given value is not nil.
func (_u *UserDefaultBindingUpdate) SetNillableBindingID(v *int) *UserDefaultBindingUpdate {
	if v != nil {
		_u.SetBindingID(*v)
	}
	return _u
}

// SetBinding sets the "binding" edge to the UserBinding entity.
func (_u *UserDefaultBindingUpdate) SetBinding(v *UserBinding) *UserDefaultBindingUpdate {
	return _u.SetBindingID(v.ID)
}

// Mutation returns the UserDefaultBindingMutation object of the builder.
func (_u *UserDefaultBindingUpdate) Mutation() *UserDefaultBindingMutation {
	return _u.mutation
}

// ClearBinding clears the "binding" edge to the UserBinding entity.
func (_u *UserDefaultBindingUpdate) ClearBinding() *UserDefaultBindingUpdate {
	_u.mutation.ClearBinding()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserDefaultBindingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserDefaultBindingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserDefaultBindingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserDefaultBindingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserDefaultBindingUpdate) check() error {
	if v, ok := _u.mutation.ImID(); ok {
		if err := userdefaultbinding.ImIDValidator(v); err != nil {
			return &ValidationError{Name: "im_id", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.im_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Platform(); ok {
		if err := userdefaultbinding.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Server(); ok {
		if err := userdefaultbinding.ServerValidator(v); err != nil {
			return &ValidationError{Name: "server", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.server": %w`, err)}
		}
	}
	if _u.mutation.BindingCleared() && len(_u.mutation.BindingIDs()) > 0 {
		return errors.New(`pjsk: clearing a required unique edge "UserDefaultBinding.binding"`)
	}
	return nil
}

func (_u *UserDefaultBindingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdefaultbinding.Table, userdefaultbinding.Columns, sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ImID(); ok {
		_spec.SetField(userdefaultbinding.FieldImID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(userdefaultbinding.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.Server(); ok {
		_spec.SetField(userdefaultbinding.FieldServer, field.TypeString, value)
	}
	if _u.mutation.BindingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdefaultbinding.BindingTable,
			Columns: []string{userdefaultbinding.BindingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbinding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BindingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdefaultbinding.BindingTable,
			Columns: []string{userdefaultbinding.BindingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdefaultbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserDefaultBindingUpdateOne is the builder for updating a single UserDefaultBinding entity.
type UserDefaultBindingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDefaultBindingMutation
}

// SetImID sets the "im_id" field.
func (_u *UserDefaultBindingUpdateOne) SetImID(v string) *UserDefaultBindingUpdateOne {
	_u.mutation.SetImID(v)
	return _u
}

// SetNillableImID sets the "im_id" field if the given value is not nil.
func (_u *UserDefaultBindingUpdateOne) SetNillableImID(v *string) *UserDefaultBindingUpdateOne {
	if v != nil {
		_u.SetImID(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *UserDefaultBindingUpdateOne) SetPlatform(v string) *UserDefaultBindingUpdateOne {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *UserDefaultBindingUpdateOne) SetNillablePlatform(v *string) *UserDefaultBindingUpdateOne {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetServer sets the "server" field.
func (_u *UserDefaultBindingUpdateOne) SetServer(v string) *UserDefaultBindingUpdateOne {
	_u.mutation.SetServer(v)
	return _u
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (_u *UserDefaultBindingUpdateOne) SetNillableServer(v *string) *UserDefaultBindingUpdateOne {
	if v != nil {
		_u.SetServer(*v)
	}
	return _u
}

// SetBindingID sets the "binding_id" field.
func (_u *UserDefaultBindingUpdateOne) SetBindingID(v int) *UserDefaultBindingUpdateOne {
	_u.mutation.SetBindingID(v)
	return _u
}

// SetNillableBindingID sets the "binding_id" field if the given value is not nil.
func (_u *UserDefaultBindingUpdateOne) SetNillableBindingID(v *int) *UserDefaultBindingUpdateOne {
	if v != nil {
		_u.SetBindingID(*v)
	}
	return _u
}

// SetBinding sets the "binding" edge to the UserBinding entity.
func (_u *UserDefaultBindingUpdateOne) SetBinding(v *UserBinding) *UserDefaultBindingUpdateOne {
	return _u.SetBindingID(v.ID)
}

// Mutation returns the UserDefaultBindingMutation object of the builder.
func (_u *UserDefaultBindingUpdateOne) Mutation() *UserDefaultBindingMutation {
	return _u.mutation
}

// ClearBinding clears the "binding" edge to the UserBinding entity.
func (_u *UserDefaultBindingUpdateOne) ClearBinding() *UserDefaultBindingUpdateOne {
	_u.mutation.ClearBinding()
	return _u
}

// Where appends a list predicates to the UserDefaultBindingUpdate builder.
func (_u *UserDefaultBindingUpdateOne) Where(ps ...predicate.UserDefaultBinding) *UserDefaultBindingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserDefaultBindingUpdateOne) Select(field string, fields ...string) *UserDefaultBindingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserDefaultBinding entity.
func (_u *UserDefaultBindingUpdateOne) Save(ctx context.Context) (*UserDefaultBinding, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserDefaultBindingUpdateOne) SaveX(ctx context.Context) *UserDefaultBinding {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserDefaultBindingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserDefaultBindingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserDefaultBindingUpdateOne) check() error {
	if v, ok := _u.mutation.ImID(); ok {
		if err := userdefaultbinding.ImIDValidator(v); err != nil {
			return &ValidationError{Name: "im_id", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.im_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Platform(); ok {
		if err := userdefaultbinding.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Server(); ok {
		if err := userdefaultbinding.ServerValidator(v); err != nil {
			return &ValidationError{Name: "server", err: fmt.Errorf(`pjsk: validator failed for field "UserDefaultBinding.server": %w`, err)}
		}
	}
	if _u.mutation.BindingCleared() && len(_u.mutation.BindingIDs()) > 0 {
		return errors.New(`pjsk: clearing a required unique edge "UserDefaultBinding.binding"`)
	}
	return nil
}

func (_u *UserDefaultBindingUpdateOne) sqlSave(ctx context.Context) (_node *UserDefaultBinding, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdefaultbinding.Table, userdefaultbinding.Columns, sqlgraph.NewFieldSpec(userdefaultbinding.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`pjsk: missing "UserDefaultBinding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdefaultbinding.FieldID)
		for _, f := range fields {
			if !userdefaultbinding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("pjsk: invalid field %q for query", f)}
			}
			if f != userdefaultbinding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ImID(); ok {
		_spec.SetField(userdefaultbinding.FieldImID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(userdefaultbinding.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.Server(); ok {
		_spec.SetField(userdefaultbinding.FieldServer, field.TypeString, value)
	}
	if _u.mutation.BindingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdefaultbinding.BindingTable,
			Columns: []string{userdefaultbinding.BindingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbinding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BindingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdefaultbinding.BindingTable,
			Columns: []string{userdefaultbinding.BindingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserDefaultBinding{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdefaultbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
