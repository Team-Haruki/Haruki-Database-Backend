// Code generated by ent, DO NOT EDIT.

package music

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmmusic"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunithmMusicCreate is the builder for creating a ChunithmMusic entity.
type ChunithmMusicCreate struct {
	config
	mutation *ChunithmMusicMutation
	hooks    []Hook
}

// SetMusicID sets the "music_id" field.
func (_c *ChunithmMusicCreate) SetMusicID(v int) *ChunithmMusicCreate {
	_c.mutation.SetMusicID(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *ChunithmMusicCreate) SetTitle(v string) *ChunithmMusicCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetArtist sets the "artist" field.
func (_c *ChunithmMusicCreate) SetArtist(v string) *ChunithmMusicCreate {
	_c.mutation.SetArtist(v)
	return _c
}

// SetCategory sets the "category" field.
func (_c *ChunithmMusicCreate) SetCategory(v string) *ChunithmMusicCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *ChunithmMusicCreate) SetNillableCategory(v *string) *ChunithmMusicCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetVersion sets the "version" field.
func (_c *ChunithmMusicCreate) SetVersion(v string) *ChunithmMusicCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_c *ChunithmMusicCreate) SetNillableVersion(v *string) *ChunithmMusicCreate {
	if v != nil {
		_c.SetVersion(*v)
	}
	return _c
}

// SetReleaseDate sets the "release_date" field.
func (_c *ChunithmMusicCreate) SetReleaseDate(v time.Time) *ChunithmMusicCreate {
	_c.mutation.SetReleaseDate(v)
	return _c
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (_c *ChunithmMusicCreate) SetNillableReleaseDate(v *time.Time) *ChunithmMusicCreate {
	if v != nil {
		_c.SetReleaseDate(*v)
	}
	return _c
}

// SetIsDeleted sets the "is_deleted" field.
func (_c *ChunithmMusicCreate) SetIsDeleted(v int) *ChunithmMusicCreate {
	_c.mutation.SetIsDeleted(v)
	return _c
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (_c *ChunithmMusicCreate) SetNillableIsDeleted(v *int) *ChunithmMusicCreate {
	if v != nil {
		_c.SetIsDeleted(*v)
	}
	return _c
}

// SetDeletedVersion sets the "deleted_version" field.
func (_c *ChunithmMusicCreate) SetDeletedVersion(v string) *ChunithmMusicCreate {
	_c.mutation.SetDeletedVersion(v)
	return _c
}

// SetNillableDeletedVersion sets the "deleted_version" field if the given value is not nil.
func (_c *ChunithmMusicCreate) SetNillableDeletedVersion(v *string) *ChunithmMusicCreate {
	if v != nil {
		_c.SetDeletedVersion(*v)
	}
	return _c
}

// Mutation returns the ChunithmMusicMutation object of the builder.
func (_c *ChunithmMusicCreate) Mutation() *ChunithmMusicMutation {
	return _c.mutation
}

// Save creates the ChunithmMusic in the database.
func (_c *ChunithmMusicCreate) Save(ctx context.Context) (*ChunithmMusic, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ChunithmMusicCreate) SaveX(ctx context.Context) *ChunithmMusic {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunithmMusicCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunithmMusicCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ChunithmMusicCreate) defaults() {
	if _, ok := _c.mutation.IsDeleted(); !ok {
		v := chunithmmusic.DefaultIsDeleted
		_c.mutation.SetIsDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ChunithmMusicCreate) check() error {
	if _, ok := _c.mutation.MusicID(); !ok {
		return &ValidationError{Name: "music_id", err: errors.New(`music: missing required field "ChunithmMusic.music_id"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`music: missing required field "ChunithmMusic.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := chunithmmusic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Artist(); !ok {
		return &ValidationError{Name: "artist", err: errors.New(`music: missing required field "ChunithmMusic.artist"`)}
	}
	if v, ok := _c.mutation.Artist(); ok {
		if err := chunithmmusic.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.artist": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Category(); ok {
		if err := chunithmmusic.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.category": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Version(); ok {
		if err := chunithmmusic.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.version": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`music: missing required field "ChunithmMusic.is_deleted"`)}
	}
	if v, ok := _c.mutation.DeletedVersion(); ok {
		if err := chunithmmusic.DeletedVersionValidator(v); err != nil {
			return &ValidationError{Name: "deleted_version", err: fmt.Errorf(`music: validator failed for field "ChunithmMusic.deleted_version": %w`, err)}
		}
	}
	return nil
}

func (_c *ChunithmMusicCreate) sqlSave(ctx context.Context) (*ChunithmMusic, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ChunithmMusicCreate) createSpec() (*ChunithmMusic, *sqlgraph.CreateSpec) {
	var (
		_node = &ChunithmMusic{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(chunithmmusic.Table, sqlgraph.NewFieldSpec(chunithmmusic.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.MusicID(); ok {
		_spec.SetField(chunithmmusic.FieldMusicID, field.TypeInt, value)
		_node.MusicID = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(chunithmmusic.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Artist(); ok {
		_spec.SetField(chunithmmusic.FieldArtist, field.TypeString, value)
		_node.Artist = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(chunithmmusic.FieldCategory, field.TypeString, value)
		_node.Category = &value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(chunithmmusic.FieldVersion, field.TypeString, value)
		_node.Version = &value
	}
	if value, ok := _c.mutation.ReleaseDate(); ok {
		_spec.SetField(chunithmmusic.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = &value
	}
	if value, ok := _c.mutation.IsDeleted(); ok {
		_spec.SetField(chunithmmusic.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	if value, ok := _c.mutation.DeletedVersion(); ok {
		_spec.SetField(chunithmmusic.FieldDeletedVersion, field.TypeString, value)
		_node.DeletedVersion = &value
	}
	return _node, _spec
}

// ChunithmMusicCreateBulk is the builder for creating many ChunithmMusic entities in bulk.
type ChunithmMusicCreateBulk struct {
	config
	err      error
	builders []*ChunithmMusicCreate
}

// Save creates the ChunithmMusic entities in the database.
func (_c *ChunithmMusicCreateBulk) Save(ctx context.Context) ([]*ChunithmMusic, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ChunithmMusic, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChunithmMusicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ChunithmMusicCreateBulk) SaveX(ctx context.Context) []*ChunithmMusic {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunithmMusicCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunithmMusicCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
