// Code generated by ent, DO NOT EDIT.

package shortbio

import (
	"haruki-database/database/schema/censor/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldUserID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldContent, v))
}

// ImUserID applies equality check predicate on the "im_user_id" field. It's identical to ImUserIDEQ.
func ImUserID(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldImUserID, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldResult, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContainsFold(FieldUserID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContainsFold(FieldContent, v))
}

// ImUserIDEQ applies the EQ predicate on the "im_user_id" field.
func ImUserIDEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldImUserID, v))
}

// ImUserIDNEQ applies the NEQ predicate on the "im_user_id" field.
func ImUserIDNEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNEQ(FieldImUserID, v))
}

// ImUserIDIn applies the In predicate on the "im_user_id" field.
func ImUserIDIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIn(FieldImUserID, vs...))
}

// ImUserIDNotIn applies the NotIn predicate on the "im_user_id" field.
func ImUserIDNotIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotIn(FieldImUserID, vs...))
}

// ImUserIDGT applies the GT predicate on the "im_user_id" field.
func ImUserIDGT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGT(FieldImUserID, v))
}

// ImUserIDGTE applies the GTE predicate on the "im_user_id" field.
func ImUserIDGTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGTE(FieldImUserID, v))
}

// ImUserIDLT applies the LT predicate on the "im_user_id" field.
func ImUserIDLT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLT(FieldImUserID, v))
}

// ImUserIDLTE applies the LTE predicate on the "im_user_id" field.
func ImUserIDLTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLTE(FieldImUserID, v))
}

// ImUserIDContains applies the Contains predicate on the "im_user_id" field.
func ImUserIDContains(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContains(FieldImUserID, v))
}

// ImUserIDHasPrefix applies the HasPrefix predicate on the "im_user_id" field.
func ImUserIDHasPrefix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasPrefix(FieldImUserID, v))
}

// ImUserIDHasSuffix applies the HasSuffix predicate on the "im_user_id" field.
func ImUserIDHasSuffix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasSuffix(FieldImUserID, v))
}

// ImUserIDIsNil applies the IsNil predicate on the "im_user_id" field.
func ImUserIDIsNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIsNull(FieldImUserID))
}

// ImUserIDNotNil applies the NotNil predicate on the "im_user_id" field.
func ImUserIDNotNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotNull(FieldImUserID))
}

// ImUserIDEqualFold applies the EqualFold predicate on the "im_user_id" field.
func ImUserIDEqualFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEqualFold(FieldImUserID, v))
}

// ImUserIDContainsFold applies the ContainsFold predicate on the "im_user_id" field.
func ImUserIDContainsFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContainsFold(FieldImUserID, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldLTE(FieldResult, v))
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContains(FieldResult, v))
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasPrefix(FieldResult, v))
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldHasSuffix(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.ShortBio {
	return predicate.ShortBio(sql.FieldNotNull(FieldResult))
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldEqualFold(FieldResult, v))
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.ShortBio {
	return predicate.ShortBio(sql.FieldContainsFold(FieldResult, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShortBio) predicate.ShortBio {
	return predicate.ShortBio(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShortBio) predicate.ShortBio {
	return predicate.ShortBio(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShortBio) predicate.ShortBio {
	return predicate.ShortBio(sql.NotPredicates(p))
}
