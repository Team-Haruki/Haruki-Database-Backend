// Code generated by ent, DO NOT EDIT.

package groupalias

import (
	"haruki-database/database/schema/pjsk/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLTE(FieldID, id))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldPlatform, v))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldGroupID, v))
}

// AliasType applies equality check predicate on the "alias_type" field. It's identical to AliasTypeEQ.
func AliasType(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldAliasType, v))
}

// AliasTypeID applies equality check predicate on the "alias_type_id" field. It's identical to AliasTypeIDEQ.
func AliasTypeID(v int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldAliasTypeID, v))
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldAlias, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContainsFold(FieldPlatform, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGT(FieldGroupID, v))
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGTE(FieldGroupID, v))
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLT(FieldGroupID, v))
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLTE(FieldGroupID, v))
}

// GroupIDContains applies the Contains predicate on the "group_id" field.
func GroupIDContains(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContains(FieldGroupID, v))
}

// GroupIDHasPrefix applies the HasPrefix predicate on the "group_id" field.
func GroupIDHasPrefix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasPrefix(FieldGroupID, v))
}

// GroupIDHasSuffix applies the HasSuffix predicate on the "group_id" field.
func GroupIDHasSuffix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasSuffix(FieldGroupID, v))
}

// GroupIDEqualFold applies the EqualFold predicate on the "group_id" field.
func GroupIDEqualFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEqualFold(FieldGroupID, v))
}

// GroupIDContainsFold applies the ContainsFold predicate on the "group_id" field.
func GroupIDContainsFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContainsFold(FieldGroupID, v))
}

// AliasTypeEQ applies the EQ predicate on the "alias_type" field.
func AliasTypeEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldAliasType, v))
}

// AliasTypeNEQ applies the NEQ predicate on the "alias_type" field.
func AliasTypeNEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNEQ(FieldAliasType, v))
}

// AliasTypeIn applies the In predicate on the "alias_type" field.
func AliasTypeIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldIn(FieldAliasType, vs...))
}

// AliasTypeNotIn applies the NotIn predicate on the "alias_type" field.
func AliasTypeNotIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNotIn(FieldAliasType, vs...))
}

// AliasTypeGT applies the GT predicate on the "alias_type" field.
func AliasTypeGT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGT(FieldAliasType, v))
}

// AliasTypeGTE applies the GTE predicate on the "alias_type" field.
func AliasTypeGTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGTE(FieldAliasType, v))
}

// AliasTypeLT applies the LT predicate on the "alias_type" field.
func AliasTypeLT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLT(FieldAliasType, v))
}

// AliasTypeLTE applies the LTE predicate on the "alias_type" field.
func AliasTypeLTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLTE(FieldAliasType, v))
}

// AliasTypeContains applies the Contains predicate on the "alias_type" field.
func AliasTypeContains(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContains(FieldAliasType, v))
}

// AliasTypeHasPrefix applies the HasPrefix predicate on the "alias_type" field.
func AliasTypeHasPrefix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasPrefix(FieldAliasType, v))
}

// AliasTypeHasSuffix applies the HasSuffix predicate on the "alias_type" field.
func AliasTypeHasSuffix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasSuffix(FieldAliasType, v))
}

// AliasTypeEqualFold applies the EqualFold predicate on the "alias_type" field.
func AliasTypeEqualFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEqualFold(FieldAliasType, v))
}

// AliasTypeContainsFold applies the ContainsFold predicate on the "alias_type" field.
func AliasTypeContainsFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContainsFold(FieldAliasType, v))
}

// AliasTypeIDEQ applies the EQ predicate on the "alias_type_id" field.
func AliasTypeIDEQ(v int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldAliasTypeID, v))
}

// AliasTypeIDNEQ applies the NEQ predicate on the "alias_type_id" field.
func AliasTypeIDNEQ(v int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNEQ(FieldAliasTypeID, v))
}

// AliasTypeIDIn applies the In predicate on the "alias_type_id" field.
func AliasTypeIDIn(vs ...int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldIn(FieldAliasTypeID, vs...))
}

// AliasTypeIDNotIn applies the NotIn predicate on the "alias_type_id" field.
func AliasTypeIDNotIn(vs ...int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNotIn(FieldAliasTypeID, vs...))
}

// AliasTypeIDGT applies the GT predicate on the "alias_type_id" field.
func AliasTypeIDGT(v int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGT(FieldAliasTypeID, v))
}

// AliasTypeIDGTE applies the GTE predicate on the "alias_type_id" field.
func AliasTypeIDGTE(v int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGTE(FieldAliasTypeID, v))
}

// AliasTypeIDLT applies the LT predicate on the "alias_type_id" field.
func AliasTypeIDLT(v int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLT(FieldAliasTypeID, v))
}

// AliasTypeIDLTE applies the LTE predicate on the "alias_type_id" field.
func AliasTypeIDLTE(v int) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLTE(FieldAliasTypeID, v))
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEQ(FieldAlias, v))
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNEQ(FieldAlias, v))
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldIn(FieldAlias, vs...))
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldNotIn(FieldAlias, vs...))
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGT(FieldAlias, v))
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldGTE(FieldAlias, v))
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLT(FieldAlias, v))
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldLTE(FieldAlias, v))
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContains(FieldAlias, v))
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasPrefix(FieldAlias, v))
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldHasSuffix(FieldAlias, v))
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldEqualFold(FieldAlias, v))
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.GroupAlias {
	return predicate.GroupAlias(sql.FieldContainsFold(FieldAlias, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupAlias) predicate.GroupAlias {
	return predicate.GroupAlias(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupAlias) predicate.GroupAlias {
	return predicate.GroupAlias(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupAlias) predicate.GroupAlias {
	return predicate.GroupAlias(sql.NotPredicates(p))
}
