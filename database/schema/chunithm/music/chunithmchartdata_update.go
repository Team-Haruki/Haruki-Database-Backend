// Code generated by ent, DO NOT EDIT.

package music

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/chunithm/music/chunithmchartdata"
	"haruki-database/database/schema/chunithm/music/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunithmChartDataUpdate is the builder for updating ChunithmChartData entities.
type ChunithmChartDataUpdate struct {
	config
	hooks    []Hook
	mutation *ChunithmChartDataMutation
}

// Where appends a list predicates to the ChunithmChartDataUpdate builder.
func (_u *ChunithmChartDataUpdate) Where(ps ...predicate.ChunithmChartData) *ChunithmChartDataUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmChartDataUpdate) SetMusicID(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableMusicID(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmChartDataUpdate) AddMusicID(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetDifficulty sets the "difficulty" field.
func (_u *ChunithmChartDataUpdate) SetDifficulty(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetDifficulty()
	_u.mutation.SetDifficulty(v)
	return _u
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableDifficulty(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetDifficulty(*v)
	}
	return _u
}

// AddDifficulty adds value to the "difficulty" field.
func (_u *ChunithmChartDataUpdate) AddDifficulty(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddDifficulty(v)
	return _u
}

// SetCreator sets the "creator" field.
func (_u *ChunithmChartDataUpdate) SetCreator(v string) *ChunithmChartDataUpdate {
	_u.mutation.SetCreator(v)
	return _u
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableCreator(v *string) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetCreator(*v)
	}
	return _u
}

// ClearCreator clears the value of the "creator" field.
func (_u *ChunithmChartDataUpdate) ClearCreator() *ChunithmChartDataUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// SetBpm sets the "bpm" field.
func (_u *ChunithmChartDataUpdate) SetBpm(v float64) *ChunithmChartDataUpdate {
	_u.mutation.ResetBpm()
	_u.mutation.SetBpm(v)
	return _u
}

// SetNillableBpm sets the "bpm" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableBpm(v *float64) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetBpm(*v)
	}
	return _u
}

// AddBpm adds value to the "bpm" field.
func (_u *ChunithmChartDataUpdate) AddBpm(v float64) *ChunithmChartDataUpdate {
	_u.mutation.AddBpm(v)
	return _u
}

// ClearBpm clears the value of the "bpm" field.
func (_u *ChunithmChartDataUpdate) ClearBpm() *ChunithmChartDataUpdate {
	_u.mutation.ClearBpm()
	return _u
}

// SetTapCount sets the "tap_count" field.
func (_u *ChunithmChartDataUpdate) SetTapCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetTapCount()
	_u.mutation.SetTapCount(v)
	return _u
}

// SetNillableTapCount sets the "tap_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableTapCount(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetTapCount(*v)
	}
	return _u
}

// AddTapCount adds value to the "tap_count" field.
func (_u *ChunithmChartDataUpdate) AddTapCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddTapCount(v)
	return _u
}

// ClearTapCount clears the value of the "tap_count" field.
func (_u *ChunithmChartDataUpdate) ClearTapCount() *ChunithmChartDataUpdate {
	_u.mutation.ClearTapCount()
	return _u
}

// SetHoldCount sets the "hold_count" field.
func (_u *ChunithmChartDataUpdate) SetHoldCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetHoldCount()
	_u.mutation.SetHoldCount(v)
	return _u
}

// SetNillableHoldCount sets the "hold_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableHoldCount(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetHoldCount(*v)
	}
	return _u
}

// AddHoldCount adds value to the "hold_count" field.
func (_u *ChunithmChartDataUpdate) AddHoldCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddHoldCount(v)
	return _u
}

// ClearHoldCount clears the value of the "hold_count" field.
func (_u *ChunithmChartDataUpdate) ClearHoldCount() *ChunithmChartDataUpdate {
	_u.mutation.ClearHoldCount()
	return _u
}

// SetSlideCount sets the "slide_count" field.
func (_u *ChunithmChartDataUpdate) SetSlideCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetSlideCount()
	_u.mutation.SetSlideCount(v)
	return _u
}

// SetNillableSlideCount sets the "slide_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableSlideCount(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetSlideCount(*v)
	}
	return _u
}

// AddSlideCount adds value to the "slide_count" field.
func (_u *ChunithmChartDataUpdate) AddSlideCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddSlideCount(v)
	return _u
}

// ClearSlideCount clears the value of the "slide_count" field.
func (_u *ChunithmChartDataUpdate) ClearSlideCount() *ChunithmChartDataUpdate {
	_u.mutation.ClearSlideCount()
	return _u
}

// SetAirCount sets the "air_count" field.
func (_u *ChunithmChartDataUpdate) SetAirCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetAirCount()
	_u.mutation.SetAirCount(v)
	return _u
}

// SetNillableAirCount sets the "air_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableAirCount(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetAirCount(*v)
	}
	return _u
}

// AddAirCount adds value to the "air_count" field.
func (_u *ChunithmChartDataUpdate) AddAirCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddAirCount(v)
	return _u
}

// ClearAirCount clears the value of the "air_count" field.
func (_u *ChunithmChartDataUpdate) ClearAirCount() *ChunithmChartDataUpdate {
	_u.mutation.ClearAirCount()
	return _u
}

// SetFlickCount sets the "flick_count" field.
func (_u *ChunithmChartDataUpdate) SetFlickCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetFlickCount()
	_u.mutation.SetFlickCount(v)
	return _u
}

// SetNillableFlickCount sets the "flick_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableFlickCount(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetFlickCount(*v)
	}
	return _u
}

// AddFlickCount adds value to the "flick_count" field.
func (_u *ChunithmChartDataUpdate) AddFlickCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddFlickCount(v)
	return _u
}

// ClearFlickCount clears the value of the "flick_count" field.
func (_u *ChunithmChartDataUpdate) ClearFlickCount() *ChunithmChartDataUpdate {
	_u.mutation.ClearFlickCount()
	return _u
}

// SetTotalCount sets the "total_count" field.
func (_u *ChunithmChartDataUpdate) SetTotalCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.ResetTotalCount()
	_u.mutation.SetTotalCount(v)
	return _u
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdate) SetNillableTotalCount(v *int) *ChunithmChartDataUpdate {
	if v != nil {
		_u.SetTotalCount(*v)
	}
	return _u
}

// AddTotalCount adds value to the "total_count" field.
func (_u *ChunithmChartDataUpdate) AddTotalCount(v int) *ChunithmChartDataUpdate {
	_u.mutation.AddTotalCount(v)
	return _u
}

// ClearTotalCount clears the value of the "total_count" field.
func (_u *ChunithmChartDataUpdate) ClearTotalCount() *ChunithmChartDataUpdate {
	_u.mutation.ClearTotalCount()
	return _u
}

// Mutation returns the ChunithmChartDataMutation object of the builder.
func (_u *ChunithmChartDataUpdate) Mutation() *ChunithmChartDataMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChunithmChartDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmChartDataUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChunithmChartDataUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmChartDataUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmChartDataUpdate) check() error {
	if v, ok := _u.mutation.Creator(); ok {
		if err := chunithmchartdata.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`music: validator failed for field "ChunithmChartData.creator": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmChartDataUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmchartdata.Table, chunithmchartdata.Columns, sqlgraph.NewFieldSpec(chunithmchartdata.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmchartdata.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmchartdata.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Difficulty(); ok {
		_spec.SetField(chunithmchartdata.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDifficulty(); ok {
		_spec.AddField(chunithmchartdata.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Creator(); ok {
		_spec.SetField(chunithmchartdata.FieldCreator, field.TypeString, value)
	}
	if _u.mutation.CreatorCleared() {
		_spec.ClearField(chunithmchartdata.FieldCreator, field.TypeString)
	}
	if value, ok := _u.mutation.Bpm(); ok {
		_spec.SetField(chunithmchartdata.FieldBpm, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBpm(); ok {
		_spec.AddField(chunithmchartdata.FieldBpm, field.TypeFloat64, value)
	}
	if _u.mutation.BpmCleared() {
		_spec.ClearField(chunithmchartdata.FieldBpm, field.TypeFloat64)
	}
	if value, ok := _u.mutation.TapCount(); ok {
		_spec.SetField(chunithmchartdata.FieldTapCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTapCount(); ok {
		_spec.AddField(chunithmchartdata.FieldTapCount, field.TypeInt, value)
	}
	if _u.mutation.TapCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldTapCount, field.TypeInt)
	}
	if value, ok := _u.mutation.HoldCount(); ok {
		_spec.SetField(chunithmchartdata.FieldHoldCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHoldCount(); ok {
		_spec.AddField(chunithmchartdata.FieldHoldCount, field.TypeInt, value)
	}
	if _u.mutation.HoldCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldHoldCount, field.TypeInt)
	}
	if value, ok := _u.mutation.SlideCount(); ok {
		_spec.SetField(chunithmchartdata.FieldSlideCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSlideCount(); ok {
		_spec.AddField(chunithmchartdata.FieldSlideCount, field.TypeInt, value)
	}
	if _u.mutation.SlideCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldSlideCount, field.TypeInt)
	}
	if value, ok := _u.mutation.AirCount(); ok {
		_spec.SetField(chunithmchartdata.FieldAirCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAirCount(); ok {
		_spec.AddField(chunithmchartdata.FieldAirCount, field.TypeInt, value)
	}
	if _u.mutation.AirCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldAirCount, field.TypeInt)
	}
	if value, ok := _u.mutation.FlickCount(); ok {
		_spec.SetField(chunithmchartdata.FieldFlickCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFlickCount(); ok {
		_spec.AddField(chunithmchartdata.FieldFlickCount, field.TypeInt, value)
	}
	if _u.mutation.FlickCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldFlickCount, field.TypeInt)
	}
	if value, ok := _u.mutation.TotalCount(); ok {
		_spec.SetField(chunithmchartdata.FieldTotalCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalCount(); ok {
		_spec.AddField(chunithmchartdata.FieldTotalCount, field.TypeInt, value)
	}
	if _u.mutation.TotalCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldTotalCount, field.TypeInt)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmchartdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChunithmChartDataUpdateOne is the builder for updating a single ChunithmChartData entity.
type ChunithmChartDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChunithmChartDataMutation
}

// SetMusicID sets the "music_id" field.
func (_u *ChunithmChartDataUpdateOne) SetMusicID(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetMusicID()
	_u.mutation.SetMusicID(v)
	return _u
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableMusicID(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetMusicID(*v)
	}
	return _u
}

// AddMusicID adds value to the "music_id" field.
func (_u *ChunithmChartDataUpdateOne) AddMusicID(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddMusicID(v)
	return _u
}

// SetDifficulty sets the "difficulty" field.
func (_u *ChunithmChartDataUpdateOne) SetDifficulty(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetDifficulty()
	_u.mutation.SetDifficulty(v)
	return _u
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableDifficulty(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetDifficulty(*v)
	}
	return _u
}

// AddDifficulty adds value to the "difficulty" field.
func (_u *ChunithmChartDataUpdateOne) AddDifficulty(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddDifficulty(v)
	return _u
}

// SetCreator sets the "creator" field.
func (_u *ChunithmChartDataUpdateOne) SetCreator(v string) *ChunithmChartDataUpdateOne {
	_u.mutation.SetCreator(v)
	return _u
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableCreator(v *string) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetCreator(*v)
	}
	return _u
}

// ClearCreator clears the value of the "creator" field.
func (_u *ChunithmChartDataUpdateOne) ClearCreator() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// SetBpm sets the "bpm" field.
func (_u *ChunithmChartDataUpdateOne) SetBpm(v float64) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetBpm()
	_u.mutation.SetBpm(v)
	return _u
}

// SetNillableBpm sets the "bpm" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableBpm(v *float64) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetBpm(*v)
	}
	return _u
}

// AddBpm adds value to the "bpm" field.
func (_u *ChunithmChartDataUpdateOne) AddBpm(v float64) *ChunithmChartDataUpdateOne {
	_u.mutation.AddBpm(v)
	return _u
}

// ClearBpm clears the value of the "bpm" field.
func (_u *ChunithmChartDataUpdateOne) ClearBpm() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearBpm()
	return _u
}

// SetTapCount sets the "tap_count" field.
func (_u *ChunithmChartDataUpdateOne) SetTapCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetTapCount()
	_u.mutation.SetTapCount(v)
	return _u
}

// SetNillableTapCount sets the "tap_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableTapCount(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetTapCount(*v)
	}
	return _u
}

// AddTapCount adds value to the "tap_count" field.
func (_u *ChunithmChartDataUpdateOne) AddTapCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddTapCount(v)
	return _u
}

// ClearTapCount clears the value of the "tap_count" field.
func (_u *ChunithmChartDataUpdateOne) ClearTapCount() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearTapCount()
	return _u
}

// SetHoldCount sets the "hold_count" field.
func (_u *ChunithmChartDataUpdateOne) SetHoldCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetHoldCount()
	_u.mutation.SetHoldCount(v)
	return _u
}

// SetNillableHoldCount sets the "hold_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableHoldCount(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetHoldCount(*v)
	}
	return _u
}

// AddHoldCount adds value to the "hold_count" field.
func (_u *ChunithmChartDataUpdateOne) AddHoldCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddHoldCount(v)
	return _u
}

// ClearHoldCount clears the value of the "hold_count" field.
func (_u *ChunithmChartDataUpdateOne) ClearHoldCount() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearHoldCount()
	return _u
}

// SetSlideCount sets the "slide_count" field.
func (_u *ChunithmChartDataUpdateOne) SetSlideCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetSlideCount()
	_u.mutation.SetSlideCount(v)
	return _u
}

// SetNillableSlideCount sets the "slide_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableSlideCount(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetSlideCount(*v)
	}
	return _u
}

// AddSlideCount adds value to the "slide_count" field.
func (_u *ChunithmChartDataUpdateOne) AddSlideCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddSlideCount(v)
	return _u
}

// ClearSlideCount clears the value of the "slide_count" field.
func (_u *ChunithmChartDataUpdateOne) ClearSlideCount() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearSlideCount()
	return _u
}

// SetAirCount sets the "air_count" field.
func (_u *ChunithmChartDataUpdateOne) SetAirCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetAirCount()
	_u.mutation.SetAirCount(v)
	return _u
}

// SetNillableAirCount sets the "air_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableAirCount(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetAirCount(*v)
	}
	return _u
}

// AddAirCount adds value to the "air_count" field.
func (_u *ChunithmChartDataUpdateOne) AddAirCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddAirCount(v)
	return _u
}

// ClearAirCount clears the value of the "air_count" field.
func (_u *ChunithmChartDataUpdateOne) ClearAirCount() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearAirCount()
	return _u
}

// SetFlickCount sets the "flick_count" field.
func (_u *ChunithmChartDataUpdateOne) SetFlickCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetFlickCount()
	_u.mutation.SetFlickCount(v)
	return _u
}

// SetNillableFlickCount sets the "flick_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableFlickCount(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetFlickCount(*v)
	}
	return _u
}

// AddFlickCount adds value to the "flick_count" field.
func (_u *ChunithmChartDataUpdateOne) AddFlickCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddFlickCount(v)
	return _u
}

// ClearFlickCount clears the value of the "flick_count" field.
func (_u *ChunithmChartDataUpdateOne) ClearFlickCount() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearFlickCount()
	return _u
}

// SetTotalCount sets the "total_count" field.
func (_u *ChunithmChartDataUpdateOne) SetTotalCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.ResetTotalCount()
	_u.mutation.SetTotalCount(v)
	return _u
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (_u *ChunithmChartDataUpdateOne) SetNillableTotalCount(v *int) *ChunithmChartDataUpdateOne {
	if v != nil {
		_u.SetTotalCount(*v)
	}
	return _u
}

// AddTotalCount adds value to the "total_count" field.
func (_u *ChunithmChartDataUpdateOne) AddTotalCount(v int) *ChunithmChartDataUpdateOne {
	_u.mutation.AddTotalCount(v)
	return _u
}

// ClearTotalCount clears the value of the "total_count" field.
func (_u *ChunithmChartDataUpdateOne) ClearTotalCount() *ChunithmChartDataUpdateOne {
	_u.mutation.ClearTotalCount()
	return _u
}

// Mutation returns the ChunithmChartDataMutation object of the builder.
func (_u *ChunithmChartDataUpdateOne) Mutation() *ChunithmChartDataMutation {
	return _u.mutation
}

// Where appends a list predicates to the ChunithmChartDataUpdate builder.
func (_u *ChunithmChartDataUpdateOne) Where(ps ...predicate.ChunithmChartData) *ChunithmChartDataUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChunithmChartDataUpdateOne) Select(field string, fields ...string) *ChunithmChartDataUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ChunithmChartData entity.
func (_u *ChunithmChartDataUpdateOne) Save(ctx context.Context) (*ChunithmChartData, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunithmChartDataUpdateOne) SaveX(ctx context.Context) *ChunithmChartData {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChunithmChartDataUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunithmChartDataUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChunithmChartDataUpdateOne) check() error {
	if v, ok := _u.mutation.Creator(); ok {
		if err := chunithmchartdata.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`music: validator failed for field "ChunithmChartData.creator": %w`, err)}
		}
	}
	return nil
}

func (_u *ChunithmChartDataUpdateOne) sqlSave(ctx context.Context) (_node *ChunithmChartData, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chunithmchartdata.Table, chunithmchartdata.Columns, sqlgraph.NewFieldSpec(chunithmchartdata.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`music: missing "ChunithmChartData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chunithmchartdata.FieldID)
		for _, f := range fields {
			if !chunithmchartdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("music: invalid field %q for query", f)}
			}
			if f != chunithmchartdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MusicID(); ok {
		_spec.SetField(chunithmchartdata.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMusicID(); ok {
		_spec.AddField(chunithmchartdata.FieldMusicID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Difficulty(); ok {
		_spec.SetField(chunithmchartdata.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDifficulty(); ok {
		_spec.AddField(chunithmchartdata.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Creator(); ok {
		_spec.SetField(chunithmchartdata.FieldCreator, field.TypeString, value)
	}
	if _u.mutation.CreatorCleared() {
		_spec.ClearField(chunithmchartdata.FieldCreator, field.TypeString)
	}
	if value, ok := _u.mutation.Bpm(); ok {
		_spec.SetField(chunithmchartdata.FieldBpm, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBpm(); ok {
		_spec.AddField(chunithmchartdata.FieldBpm, field.TypeFloat64, value)
	}
	if _u.mutation.BpmCleared() {
		_spec.ClearField(chunithmchartdata.FieldBpm, field.TypeFloat64)
	}
	if value, ok := _u.mutation.TapCount(); ok {
		_spec.SetField(chunithmchartdata.FieldTapCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTapCount(); ok {
		_spec.AddField(chunithmchartdata.FieldTapCount, field.TypeInt, value)
	}
	if _u.mutation.TapCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldTapCount, field.TypeInt)
	}
	if value, ok := _u.mutation.HoldCount(); ok {
		_spec.SetField(chunithmchartdata.FieldHoldCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHoldCount(); ok {
		_spec.AddField(chunithmchartdata.FieldHoldCount, field.TypeInt, value)
	}
	if _u.mutation.HoldCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldHoldCount, field.TypeInt)
	}
	if value, ok := _u.mutation.SlideCount(); ok {
		_spec.SetField(chunithmchartdata.FieldSlideCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSlideCount(); ok {
		_spec.AddField(chunithmchartdata.FieldSlideCount, field.TypeInt, value)
	}
	if _u.mutation.SlideCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldSlideCount, field.TypeInt)
	}
	if value, ok := _u.mutation.AirCount(); ok {
		_spec.SetField(chunithmchartdata.FieldAirCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAirCount(); ok {
		_spec.AddField(chunithmchartdata.FieldAirCount, field.TypeInt, value)
	}
	if _u.mutation.AirCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldAirCount, field.TypeInt)
	}
	if value, ok := _u.mutation.FlickCount(); ok {
		_spec.SetField(chunithmchartdata.FieldFlickCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFlickCount(); ok {
		_spec.AddField(chunithmchartdata.FieldFlickCount, field.TypeInt, value)
	}
	if _u.mutation.FlickCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldFlickCount, field.TypeInt)
	}
	if value, ok := _u.mutation.TotalCount(); ok {
		_spec.SetField(chunithmchartdata.FieldTotalCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalCount(); ok {
		_spec.AddField(chunithmchartdata.FieldTotalCount, field.TypeInt, value)
	}
	if _u.mutation.TotalCountCleared() {
		_spec.ClearField(chunithmchartdata.FieldTotalCount, field.TypeInt)
	}
	_node = &ChunithmChartData{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunithmchartdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
