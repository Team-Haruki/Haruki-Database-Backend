// Code generated by ent, DO NOT EDIT.

package bot

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"haruki-database/database/schema/bot/migrate"

	"haruki-database/database/schema/bot/dailyrequests"
	"haruki-database/database/schema/bot/hourlyrequests"
	"haruki-database/database/schema/bot/requestsranking"
	"haruki-database/database/schema/bot/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DailyRequests is the client for interacting with the DailyRequests builders.
	DailyRequests *DailyRequestsClient
	// HourlyRequests is the client for interacting with the HourlyRequests builders.
	HourlyRequests *HourlyRequestsClient
	// RequestsRanking is the client for interacting with the RequestsRanking builders.
	RequestsRanking *RequestsRankingClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DailyRequests = NewDailyRequestsClient(c.config)
	c.HourlyRequests = NewHourlyRequestsClient(c.config)
	c.RequestsRanking = NewRequestsRankingClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("bot: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("bot: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		DailyRequests:   NewDailyRequestsClient(cfg),
		HourlyRequests:  NewHourlyRequestsClient(cfg),
		RequestsRanking: NewRequestsRankingClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		DailyRequests:   NewDailyRequestsClient(cfg),
		HourlyRequests:  NewHourlyRequestsClient(cfg),
		RequestsRanking: NewRequestsRankingClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DailyRequests.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DailyRequests.Use(hooks...)
	c.HourlyRequests.Use(hooks...)
	c.RequestsRanking.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.DailyRequests.Intercept(interceptors...)
	c.HourlyRequests.Intercept(interceptors...)
	c.RequestsRanking.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DailyRequestsMutation:
		return c.DailyRequests.mutate(ctx, m)
	case *HourlyRequestsMutation:
		return c.HourlyRequests.mutate(ctx, m)
	case *RequestsRankingMutation:
		return c.RequestsRanking.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("bot: unknown mutation type %T", m)
	}
}

// DailyRequestsClient is a client for the DailyRequests schema.
type DailyRequestsClient struct {
	config
}

// NewDailyRequestsClient returns a client for the DailyRequests from the given config.
func NewDailyRequestsClient(c config) *DailyRequestsClient {
	return &DailyRequestsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dailyrequests.Hooks(f(g(h())))`.
func (c *DailyRequestsClient) Use(hooks ...Hook) {
	c.hooks.DailyRequests = append(c.hooks.DailyRequests, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dailyrequests.Intercept(f(g(h())))`.
func (c *DailyRequestsClient) Intercept(interceptors ...Interceptor) {
	c.inters.DailyRequests = append(c.inters.DailyRequests, interceptors...)
}

// Create returns a builder for creating a DailyRequests entity.
func (c *DailyRequestsClient) Create() *DailyRequestsCreate {
	mutation := newDailyRequestsMutation(c.config, OpCreate)
	return &DailyRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DailyRequests entities.
func (c *DailyRequestsClient) CreateBulk(builders ...*DailyRequestsCreate) *DailyRequestsCreateBulk {
	return &DailyRequestsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DailyRequestsClient) MapCreateBulk(slice any, setFunc func(*DailyRequestsCreate, int)) *DailyRequestsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DailyRequestsCreateBulk{err: fmt.Errorf("calling to DailyRequestsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DailyRequestsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DailyRequestsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DailyRequests.
func (c *DailyRequestsClient) Update() *DailyRequestsUpdate {
	mutation := newDailyRequestsMutation(c.config, OpUpdate)
	return &DailyRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DailyRequestsClient) UpdateOne(_m *DailyRequests) *DailyRequestsUpdateOne {
	mutation := newDailyRequestsMutation(c.config, OpUpdateOne, withDailyRequests(_m))
	return &DailyRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DailyRequestsClient) UpdateOneID(id int) *DailyRequestsUpdateOne {
	mutation := newDailyRequestsMutation(c.config, OpUpdateOne, withDailyRequestsID(id))
	return &DailyRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DailyRequests.
func (c *DailyRequestsClient) Delete() *DailyRequestsDelete {
	mutation := newDailyRequestsMutation(c.config, OpDelete)
	return &DailyRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DailyRequestsClient) DeleteOne(_m *DailyRequests) *DailyRequestsDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DailyRequestsClient) DeleteOneID(id int) *DailyRequestsDeleteOne {
	builder := c.Delete().Where(dailyrequests.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DailyRequestsDeleteOne{builder}
}

// Query returns a query builder for DailyRequests.
func (c *DailyRequestsClient) Query() *DailyRequestsQuery {
	return &DailyRequestsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDailyRequests},
		inters: c.Interceptors(),
	}
}

// Get returns a DailyRequests entity by its id.
func (c *DailyRequestsClient) Get(ctx context.Context, id int) (*DailyRequests, error) {
	return c.Query().Where(dailyrequests.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DailyRequestsClient) GetX(ctx context.Context, id int) *DailyRequests {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DailyRequestsClient) Hooks() []Hook {
	return c.hooks.DailyRequests
}

// Interceptors returns the client interceptors.
func (c *DailyRequestsClient) Interceptors() []Interceptor {
	return c.inters.DailyRequests
}

func (c *DailyRequestsClient) mutate(ctx context.Context, m *DailyRequestsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DailyRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DailyRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DailyRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DailyRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("bot: unknown DailyRequests mutation op: %q", m.Op())
	}
}

// HourlyRequestsClient is a client for the HourlyRequests schema.
type HourlyRequestsClient struct {
	config
}

// NewHourlyRequestsClient returns a client for the HourlyRequests from the given config.
func NewHourlyRequestsClient(c config) *HourlyRequestsClient {
	return &HourlyRequestsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hourlyrequests.Hooks(f(g(h())))`.
func (c *HourlyRequestsClient) Use(hooks ...Hook) {
	c.hooks.HourlyRequests = append(c.hooks.HourlyRequests, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hourlyrequests.Intercept(f(g(h())))`.
func (c *HourlyRequestsClient) Intercept(interceptors ...Interceptor) {
	c.inters.HourlyRequests = append(c.inters.HourlyRequests, interceptors...)
}

// Create returns a builder for creating a HourlyRequests entity.
func (c *HourlyRequestsClient) Create() *HourlyRequestsCreate {
	mutation := newHourlyRequestsMutation(c.config, OpCreate)
	return &HourlyRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HourlyRequests entities.
func (c *HourlyRequestsClient) CreateBulk(builders ...*HourlyRequestsCreate) *HourlyRequestsCreateBulk {
	return &HourlyRequestsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HourlyRequestsClient) MapCreateBulk(slice any, setFunc func(*HourlyRequestsCreate, int)) *HourlyRequestsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HourlyRequestsCreateBulk{err: fmt.Errorf("calling to HourlyRequestsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HourlyRequestsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HourlyRequestsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HourlyRequests.
func (c *HourlyRequestsClient) Update() *HourlyRequestsUpdate {
	mutation := newHourlyRequestsMutation(c.config, OpUpdate)
	return &HourlyRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HourlyRequestsClient) UpdateOne(_m *HourlyRequests) *HourlyRequestsUpdateOne {
	mutation := newHourlyRequestsMutation(c.config, OpUpdateOne, withHourlyRequests(_m))
	return &HourlyRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HourlyRequestsClient) UpdateOneID(id int) *HourlyRequestsUpdateOne {
	mutation := newHourlyRequestsMutation(c.config, OpUpdateOne, withHourlyRequestsID(id))
	return &HourlyRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HourlyRequests.
func (c *HourlyRequestsClient) Delete() *HourlyRequestsDelete {
	mutation := newHourlyRequestsMutation(c.config, OpDelete)
	return &HourlyRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HourlyRequestsClient) DeleteOne(_m *HourlyRequests) *HourlyRequestsDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HourlyRequestsClient) DeleteOneID(id int) *HourlyRequestsDeleteOne {
	builder := c.Delete().Where(hourlyrequests.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HourlyRequestsDeleteOne{builder}
}

// Query returns a query builder for HourlyRequests.
func (c *HourlyRequestsClient) Query() *HourlyRequestsQuery {
	return &HourlyRequestsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHourlyRequests},
		inters: c.Interceptors(),
	}
}

// Get returns a HourlyRequests entity by its id.
func (c *HourlyRequestsClient) Get(ctx context.Context, id int) (*HourlyRequests, error) {
	return c.Query().Where(hourlyrequests.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HourlyRequestsClient) GetX(ctx context.Context, id int) *HourlyRequests {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HourlyRequestsClient) Hooks() []Hook {
	return c.hooks.HourlyRequests
}

// Interceptors returns the client interceptors.
func (c *HourlyRequestsClient) Interceptors() []Interceptor {
	return c.inters.HourlyRequests
}

func (c *HourlyRequestsClient) mutate(ctx context.Context, m *HourlyRequestsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HourlyRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HourlyRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HourlyRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HourlyRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("bot: unknown HourlyRequests mutation op: %q", m.Op())
	}
}

// RequestsRankingClient is a client for the RequestsRanking schema.
type RequestsRankingClient struct {
	config
}

// NewRequestsRankingClient returns a client for the RequestsRanking from the given config.
func NewRequestsRankingClient(c config) *RequestsRankingClient {
	return &RequestsRankingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requestsranking.Hooks(f(g(h())))`.
func (c *RequestsRankingClient) Use(hooks ...Hook) {
	c.hooks.RequestsRanking = append(c.hooks.RequestsRanking, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `requestsranking.Intercept(f(g(h())))`.
func (c *RequestsRankingClient) Intercept(interceptors ...Interceptor) {
	c.inters.RequestsRanking = append(c.inters.RequestsRanking, interceptors...)
}

// Create returns a builder for creating a RequestsRanking entity.
func (c *RequestsRankingClient) Create() *RequestsRankingCreate {
	mutation := newRequestsRankingMutation(c.config, OpCreate)
	return &RequestsRankingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequestsRanking entities.
func (c *RequestsRankingClient) CreateBulk(builders ...*RequestsRankingCreate) *RequestsRankingCreateBulk {
	return &RequestsRankingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RequestsRankingClient) MapCreateBulk(slice any, setFunc func(*RequestsRankingCreate, int)) *RequestsRankingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RequestsRankingCreateBulk{err: fmt.Errorf("calling to RequestsRankingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RequestsRankingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RequestsRankingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequestsRanking.
func (c *RequestsRankingClient) Update() *RequestsRankingUpdate {
	mutation := newRequestsRankingMutation(c.config, OpUpdate)
	return &RequestsRankingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestsRankingClient) UpdateOne(_m *RequestsRanking) *RequestsRankingUpdateOne {
	mutation := newRequestsRankingMutation(c.config, OpUpdateOne, withRequestsRanking(_m))
	return &RequestsRankingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestsRankingClient) UpdateOneID(id int) *RequestsRankingUpdateOne {
	mutation := newRequestsRankingMutation(c.config, OpUpdateOne, withRequestsRankingID(id))
	return &RequestsRankingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequestsRanking.
func (c *RequestsRankingClient) Delete() *RequestsRankingDelete {
	mutation := newRequestsRankingMutation(c.config, OpDelete)
	return &RequestsRankingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RequestsRankingClient) DeleteOne(_m *RequestsRanking) *RequestsRankingDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RequestsRankingClient) DeleteOneID(id int) *RequestsRankingDeleteOne {
	builder := c.Delete().Where(requestsranking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestsRankingDeleteOne{builder}
}

// Query returns a query builder for RequestsRanking.
func (c *RequestsRankingClient) Query() *RequestsRankingQuery {
	return &RequestsRankingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRequestsRanking},
		inters: c.Interceptors(),
	}
}

// Get returns a RequestsRanking entity by its id.
func (c *RequestsRankingClient) Get(ctx context.Context, id int) (*RequestsRanking, error) {
	return c.Query().Where(requestsranking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestsRankingClient) GetX(ctx context.Context, id int) *RequestsRanking {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RequestsRankingClient) Hooks() []Hook {
	return c.hooks.RequestsRanking
}

// Interceptors returns the client interceptors.
func (c *RequestsRankingClient) Interceptors() []Interceptor {
	return c.inters.RequestsRanking
}

func (c *RequestsRankingClient) mutate(ctx context.Context, m *RequestsRankingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RequestsRankingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RequestsRankingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RequestsRankingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RequestsRankingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("bot: unknown RequestsRanking mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("bot: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DailyRequests, HourlyRequests, RequestsRanking, User []ent.Hook
	}
	inters struct {
		DailyRequests, HourlyRequests, RequestsRanking, User []ent.Interceptor
	}
)
