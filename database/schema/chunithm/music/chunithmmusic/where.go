// Code generated by ent, DO NOT EDIT.

package chunithmmusic

import (
	"haruki-database/database/schema/chunithm/music/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldID, id))
}

// MusicID applies equality check predicate on the "music_id" field. It's identical to MusicIDEQ.
func MusicID(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldMusicID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldTitle, v))
}

// Artist applies equality check predicate on the "artist" field. It's identical to ArtistEQ.
func Artist(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldArtist, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldCategory, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldVersion, v))
}

// ReleaseDate applies equality check predicate on the "release_date" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldReleaseDate, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldIsDeleted, v))
}

// DeletedVersion applies equality check predicate on the "deleted_version" field. It's identical to DeletedVersionEQ.
func DeletedVersion(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldDeletedVersion, v))
}

// MusicIDEQ applies the EQ predicate on the "music_id" field.
func MusicIDEQ(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldMusicID, v))
}

// MusicIDNEQ applies the NEQ predicate on the "music_id" field.
func MusicIDNEQ(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldMusicID, v))
}

// MusicIDIn applies the In predicate on the "music_id" field.
func MusicIDIn(vs ...int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldMusicID, vs...))
}

// MusicIDNotIn applies the NotIn predicate on the "music_id" field.
func MusicIDNotIn(vs ...int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldMusicID, vs...))
}

// MusicIDGT applies the GT predicate on the "music_id" field.
func MusicIDGT(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldMusicID, v))
}

// MusicIDGTE applies the GTE predicate on the "music_id" field.
func MusicIDGTE(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldMusicID, v))
}

// MusicIDLT applies the LT predicate on the "music_id" field.
func MusicIDLT(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldMusicID, v))
}

// MusicIDLTE applies the LTE predicate on the "music_id" field.
func MusicIDLTE(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldMusicID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContainsFold(FieldTitle, v))
}

// ArtistEQ applies the EQ predicate on the "artist" field.
func ArtistEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldArtist, v))
}

// ArtistNEQ applies the NEQ predicate on the "artist" field.
func ArtistNEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldArtist, v))
}

// ArtistIn applies the In predicate on the "artist" field.
func ArtistIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldArtist, vs...))
}

// ArtistNotIn applies the NotIn predicate on the "artist" field.
func ArtistNotIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldArtist, vs...))
}

// ArtistGT applies the GT predicate on the "artist" field.
func ArtistGT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldArtist, v))
}

// ArtistGTE applies the GTE predicate on the "artist" field.
func ArtistGTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldArtist, v))
}

// ArtistLT applies the LT predicate on the "artist" field.
func ArtistLT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldArtist, v))
}

// ArtistLTE applies the LTE predicate on the "artist" field.
func ArtistLTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldArtist, v))
}

// ArtistContains applies the Contains predicate on the "artist" field.
func ArtistContains(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContains(FieldArtist, v))
}

// ArtistHasPrefix applies the HasPrefix predicate on the "artist" field.
func ArtistHasPrefix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasPrefix(FieldArtist, v))
}

// ArtistHasSuffix applies the HasSuffix predicate on the "artist" field.
func ArtistHasSuffix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasSuffix(FieldArtist, v))
}

// ArtistEqualFold applies the EqualFold predicate on the "artist" field.
func ArtistEqualFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEqualFold(FieldArtist, v))
}

// ArtistContainsFold applies the ContainsFold predicate on the "artist" field.
func ArtistContainsFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContainsFold(FieldArtist, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContainsFold(FieldCategory, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContainsFold(FieldVersion, v))
}

// ReleaseDateEQ applies the EQ predicate on the "release_date" field.
func ReleaseDateEQ(v time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldReleaseDate, v))
}

// ReleaseDateNEQ applies the NEQ predicate on the "release_date" field.
func ReleaseDateNEQ(v time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldReleaseDate, v))
}

// ReleaseDateIn applies the In predicate on the "release_date" field.
func ReleaseDateIn(vs ...time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldReleaseDate, vs...))
}

// ReleaseDateNotIn applies the NotIn predicate on the "release_date" field.
func ReleaseDateNotIn(vs ...time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldReleaseDate, vs...))
}

// ReleaseDateGT applies the GT predicate on the "release_date" field.
func ReleaseDateGT(v time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldReleaseDate, v))
}

// ReleaseDateGTE applies the GTE predicate on the "release_date" field.
func ReleaseDateGTE(v time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldReleaseDate, v))
}

// ReleaseDateLT applies the LT predicate on the "release_date" field.
func ReleaseDateLT(v time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldReleaseDate, v))
}

// ReleaseDateLTE applies the LTE predicate on the "release_date" field.
func ReleaseDateLTE(v time.Time) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldReleaseDate, v))
}

// ReleaseDateIsNil applies the IsNil predicate on the "release_date" field.
func ReleaseDateIsNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIsNull(FieldReleaseDate))
}

// ReleaseDateNotNil applies the NotNil predicate on the "release_date" field.
func ReleaseDateNotNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotNull(FieldReleaseDate))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldIsDeleted, v))
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldIsDeleted, vs...))
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldIsDeleted, vs...))
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldIsDeleted, v))
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldIsDeleted, v))
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldIsDeleted, v))
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldIsDeleted, v))
}

// DeletedVersionEQ applies the EQ predicate on the "deleted_version" field.
func DeletedVersionEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEQ(FieldDeletedVersion, v))
}

// DeletedVersionNEQ applies the NEQ predicate on the "deleted_version" field.
func DeletedVersionNEQ(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNEQ(FieldDeletedVersion, v))
}

// DeletedVersionIn applies the In predicate on the "deleted_version" field.
func DeletedVersionIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIn(FieldDeletedVersion, vs...))
}

// DeletedVersionNotIn applies the NotIn predicate on the "deleted_version" field.
func DeletedVersionNotIn(vs ...string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotIn(FieldDeletedVersion, vs...))
}

// DeletedVersionGT applies the GT predicate on the "deleted_version" field.
func DeletedVersionGT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGT(FieldDeletedVersion, v))
}

// DeletedVersionGTE applies the GTE predicate on the "deleted_version" field.
func DeletedVersionGTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldGTE(FieldDeletedVersion, v))
}

// DeletedVersionLT applies the LT predicate on the "deleted_version" field.
func DeletedVersionLT(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLT(FieldDeletedVersion, v))
}

// DeletedVersionLTE applies the LTE predicate on the "deleted_version" field.
func DeletedVersionLTE(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldLTE(FieldDeletedVersion, v))
}

// DeletedVersionContains applies the Contains predicate on the "deleted_version" field.
func DeletedVersionContains(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContains(FieldDeletedVersion, v))
}

// DeletedVersionHasPrefix applies the HasPrefix predicate on the "deleted_version" field.
func DeletedVersionHasPrefix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasPrefix(FieldDeletedVersion, v))
}

// DeletedVersionHasSuffix applies the HasSuffix predicate on the "deleted_version" field.
func DeletedVersionHasSuffix(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldHasSuffix(FieldDeletedVersion, v))
}

// DeletedVersionIsNil applies the IsNil predicate on the "deleted_version" field.
func DeletedVersionIsNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldIsNull(FieldDeletedVersion))
}

// DeletedVersionNotNil applies the NotNil predicate on the "deleted_version" field.
func DeletedVersionNotNil() predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldNotNull(FieldDeletedVersion))
}

// DeletedVersionEqualFold applies the EqualFold predicate on the "deleted_version" field.
func DeletedVersionEqualFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldEqualFold(FieldDeletedVersion, v))
}

// DeletedVersionContainsFold applies the ContainsFold predicate on the "deleted_version" field.
func DeletedVersionContainsFold(v string) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.FieldContainsFold(FieldDeletedVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChunithmMusic) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChunithmMusic) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChunithmMusic) predicate.ChunithmMusic {
	return predicate.ChunithmMusic(sql.NotPredicates(p))
}
