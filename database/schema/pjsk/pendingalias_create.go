// Code generated by ent, DO NOT EDIT.

package pjsk

import (
	"context"
	"errors"
	"fmt"
	"haruki-database/database/schema/pjsk/pendingalias"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingAliasCreate is the builder for creating a PendingAlias entity.
type PendingAliasCreate struct {
	config
	mutation *PendingAliasMutation
	hooks    []Hook
}

// SetAliasType sets the "alias_type" field.
func (_c *PendingAliasCreate) SetAliasType(v string) *PendingAliasCreate {
	_c.mutation.SetAliasType(v)
	return _c
}

// SetAliasTypeID sets the "alias_type_id" field.
func (_c *PendingAliasCreate) SetAliasTypeID(v int) *PendingAliasCreate {
	_c.mutation.SetAliasTypeID(v)
	return _c
}

// SetAlias sets the "alias" field.
func (_c *PendingAliasCreate) SetAlias(v string) *PendingAliasCreate {
	_c.mutation.SetAlias(v)
	return _c
}

// SetSubmittedBy sets the "submitted_by" field.
func (_c *PendingAliasCreate) SetSubmittedBy(v string) *PendingAliasCreate {
	_c.mutation.SetSubmittedBy(v)
	return _c
}

// SetSubmittedAt sets the "submitted_at" field.
func (_c *PendingAliasCreate) SetSubmittedAt(v time.Time) *PendingAliasCreate {
	_c.mutation.SetSubmittedAt(v)
	return _c
}

// SetID sets the "id" field.
func (_c *PendingAliasCreate) SetID(v int64) *PendingAliasCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the PendingAliasMutation object of the builder.
func (_c *PendingAliasCreate) Mutation() *PendingAliasMutation {
	return _c.mutation
}

// Save creates the PendingAlias in the database.
func (_c *PendingAliasCreate) Save(ctx context.Context) (*PendingAlias, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PendingAliasCreate) SaveX(ctx context.Context) *PendingAlias {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PendingAliasCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PendingAliasCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PendingAliasCreate) check() error {
	if _, ok := _c.mutation.AliasType(); !ok {
		return &ValidationError{Name: "alias_type", err: errors.New(`pjsk: missing required field "PendingAlias.alias_type"`)}
	}
	if v, ok := _c.mutation.AliasType(); ok {
		if err := pendingalias.AliasTypeValidator(v); err != nil {
			return &ValidationError{Name: "alias_type", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.alias_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AliasTypeID(); !ok {
		return &ValidationError{Name: "alias_type_id", err: errors.New(`pjsk: missing required field "PendingAlias.alias_type_id"`)}
	}
	if _, ok := _c.mutation.Alias(); !ok {
		return &ValidationError{Name: "alias", err: errors.New(`pjsk: missing required field "PendingAlias.alias"`)}
	}
	if v, ok := _c.mutation.Alias(); ok {
		if err := pendingalias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.alias": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SubmittedBy(); !ok {
		return &ValidationError{Name: "submitted_by", err: errors.New(`pjsk: missing required field "PendingAlias.submitted_by"`)}
	}
	if v, ok := _c.mutation.SubmittedBy(); ok {
		if err := pendingalias.SubmittedByValidator(v); err != nil {
			return &ValidationError{Name: "submitted_by", err: fmt.Errorf(`pjsk: validator failed for field "PendingAlias.submitted_by": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SubmittedAt(); !ok {
		return &ValidationError{Name: "submitted_at", err: errors.New(`pjsk: missing required field "PendingAlias.submitted_at"`)}
	}
	return nil
}

func (_c *PendingAliasCreate) sqlSave(ctx context.Context) (*PendingAlias, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PendingAliasCreate) createSpec() (*PendingAlias, *sqlgraph.CreateSpec) {
	var (
		_node = &PendingAlias{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(pendingalias.Table, sqlgraph.NewFieldSpec(pendingalias.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.AliasType(); ok {
		_spec.SetField(pendingalias.FieldAliasType, field.TypeString, value)
		_node.AliasType = value
	}
	if value, ok := _c.mutation.AliasTypeID(); ok {
		_spec.SetField(pendingalias.FieldAliasTypeID, field.TypeInt, value)
		_node.AliasTypeID = value
	}
	if value, ok := _c.mutation.Alias(); ok {
		_spec.SetField(pendingalias.FieldAlias, field.TypeString, value)
		_node.Alias = value
	}
	if value, ok := _c.mutation.SubmittedBy(); ok {
		_spec.SetField(pendingalias.FieldSubmittedBy, field.TypeString, value)
		_node.SubmittedBy = value
	}
	if value, ok := _c.mutation.SubmittedAt(); ok {
		_spec.SetField(pendingalias.FieldSubmittedAt, field.TypeTime, value)
		_node.SubmittedAt = value
	}
	return _node, _spec
}

// PendingAliasCreateBulk is the builder for creating many PendingAlias entities in bulk.
type PendingAliasCreateBulk struct {
	config
	err      error
	builders []*PendingAliasCreate
}

// Save creates the PendingAlias entities in the database.
func (_c *PendingAliasCreateBulk) Save(ctx context.Context) ([]*PendingAlias, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PendingAlias, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PendingAliasMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PendingAliasCreateBulk) SaveX(ctx context.Context) []*PendingAlias {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PendingAliasCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PendingAliasCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
